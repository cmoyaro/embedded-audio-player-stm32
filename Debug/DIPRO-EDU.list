
DIPRO-EDU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017aec  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08017d2c  08017d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018154  08018154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801815c  0801815c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018160  08018160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f6  20000000  08018164  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002c954  200001f8  0801835a  0001a1f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2002cb4c  0801835a  0001ab4c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0001a1f6  2**0
                  CONTENTS, READONLY
 10 .debug_info   00044b7f  00000000  00000000  0001a22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009254  00000000  00000000  0005edab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003470  00000000  00000000  00068000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000282e  00000000  00000000  0006b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004288d  00000000  00000000  0006dc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004be4a  00000000  00000000  000b052b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b667  00000000  00000000  000fc375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002779dc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000dab0  00000000  00000000  00277a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  002854d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	200001f8 	.word	0x200001f8
 800025c:	00000000 	.word	0x00000000
 8000260:	08017d14 	.word	0x08017d14

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	200001fc 	.word	0x200001fc
 800027c:	08017d14 	.word	0x08017d14

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97e 	b.w	8000594 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14d      	bne.n	8000358 <__udivmoddi4+0xa8>
 80002bc:	428a      	cmp	r2, r1
 80002be:	460f      	mov	r7, r1
 80002c0:	4684      	mov	ip, r0
 80002c2:	4696      	mov	lr, r2
 80002c4:	fab2 f382 	clz	r3, r2
 80002c8:	d960      	bls.n	800038c <__udivmoddi4+0xdc>
 80002ca:	b14b      	cbz	r3, 80002e0 <__udivmoddi4+0x30>
 80002cc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002da:	fa20 f202 	lsr.w	r2, r0, r2
 80002de:	4317      	orrs	r7, r2
 80002e0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002e4:	fa1f f48e 	uxth.w	r4, lr
 80002e8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002ec:	fbb7 f1f6 	udiv	r1, r7, r6
 80002f0:	fb06 7711 	mls	r7, r6, r1, r7
 80002f4:	fb01 f004 	mul.w	r0, r1, r4
 80002f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002fc:	4290      	cmp	r0, r2
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x62>
 8000300:	eb1e 0202 	adds.w	r2, lr, r2
 8000304:	f101 37ff 	add.w	r7, r1, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x60>
 800030a:	4290      	cmp	r0, r2
 800030c:	f200 812d 	bhi.w	800056a <__udivmoddi4+0x2ba>
 8000310:	4639      	mov	r1, r7
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	fa1f fc8c 	uxth.w	ip, ip
 8000318:	fbb2 f0f6 	udiv	r0, r2, r6
 800031c:	fb06 2210 	mls	r2, r6, r0, r2
 8000320:	fb00 f404 	mul.w	r4, r0, r4
 8000324:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000328:	4564      	cmp	r4, ip
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x8e>
 800032c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000330:	f100 32ff 	add.w	r2, r0, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x8c>
 8000336:	4564      	cmp	r4, ip
 8000338:	f200 811a 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 800033c:	4610      	mov	r0, r2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	ebac 0c04 	sub.w	ip, ip, r4
 8000346:	2100      	movs	r1, #0
 8000348:	b125      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034a:	fa2c f303 	lsr.w	r3, ip, r3
 800034e:	2200      	movs	r2, #0
 8000350:	e9c5 3200 	strd	r3, r2, [r5]
 8000354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000358:	428b      	cmp	r3, r1
 800035a:	d905      	bls.n	8000368 <__udivmoddi4+0xb8>
 800035c:	b10d      	cbz	r5, 8000362 <__udivmoddi4+0xb2>
 800035e:	e9c5 0100 	strd	r0, r1, [r5]
 8000362:	2100      	movs	r1, #0
 8000364:	4608      	mov	r0, r1
 8000366:	e7f5      	b.n	8000354 <__udivmoddi4+0xa4>
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	d14d      	bne.n	800040c <__udivmoddi4+0x15c>
 8000370:	42a3      	cmp	r3, r4
 8000372:	f0c0 80f2 	bcc.w	800055a <__udivmoddi4+0x2aa>
 8000376:	4290      	cmp	r0, r2
 8000378:	f080 80ef 	bcs.w	800055a <__udivmoddi4+0x2aa>
 800037c:	4606      	mov	r6, r0
 800037e:	4623      	mov	r3, r4
 8000380:	4608      	mov	r0, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e6      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000386:	e9c5 6300 	strd	r6, r3, [r5]
 800038a:	e7e3      	b.n	8000354 <__udivmoddi4+0xa4>
 800038c:	2b00      	cmp	r3, #0
 800038e:	f040 80a2 	bne.w	80004d6 <__udivmoddi4+0x226>
 8000392:	1a8a      	subs	r2, r1, r2
 8000394:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000398:	fa1f f68e 	uxth.w	r6, lr
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 f4f7 	udiv	r4, r2, r7
 80003a2:	fb07 2014 	mls	r0, r7, r4, r2
 80003a6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ae:	fb06 f004 	mul.w	r0, r6, r4
 80003b2:	4290      	cmp	r0, r2
 80003b4:	d90f      	bls.n	80003d6 <__udivmoddi4+0x126>
 80003b6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ba:	f104 38ff 	add.w	r8, r4, #4294967295
 80003be:	bf2c      	ite	cs
 80003c0:	f04f 0901 	movcs.w	r9, #1
 80003c4:	f04f 0900 	movcc.w	r9, #0
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d903      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003cc:	f1b9 0f00 	cmp.w	r9, #0
 80003d0:	f000 80c8 	beq.w	8000564 <__udivmoddi4+0x2b4>
 80003d4:	4644      	mov	r4, r8
 80003d6:	1a12      	subs	r2, r2, r0
 80003d8:	fa1f fc8c 	uxth.w	ip, ip
 80003dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e0:	fb07 2210 	mls	r2, r7, r0, r2
 80003e4:	fb00 f606 	mul.w	r6, r0, r6
 80003e8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003ec:	4566      	cmp	r6, ip
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x152>
 80003f0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f8:	d202      	bcs.n	8000400 <__udivmoddi4+0x150>
 80003fa:	4566      	cmp	r6, ip
 80003fc:	f200 80bb 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000400:	4610      	mov	r0, r2
 8000402:	ebac 0c06 	sub.w	ip, ip, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	e79d      	b.n	8000348 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa04 fe01 	lsl.w	lr, r4, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	fa20 fc06 	lsr.w	ip, r0, r6
 800041e:	40f4      	lsrs	r4, r6
 8000420:	408a      	lsls	r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	ea4e 030c 	orr.w	r3, lr, ip
 8000428:	fa00 fe01 	lsl.w	lr, r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	fbb4 f0f8 	udiv	r0, r4, r8
 800043c:	fb08 4410 	mls	r4, r8, r0, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb00 f90c 	mul.w	r9, r0, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	d90e      	bls.n	800046a <__udivmoddi4+0x1ba>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	bf2c      	ite	cs
 8000454:	f04f 0b01 	movcs.w	fp, #1
 8000458:	f04f 0b00 	movcc.w	fp, #0
 800045c:	45a1      	cmp	r9, r4
 800045e:	d903      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000460:	f1bb 0f00 	cmp.w	fp, #0
 8000464:	f000 8093 	beq.w	800058e <__udivmoddi4+0x2de>
 8000468:	4650      	mov	r0, sl
 800046a:	eba4 0409 	sub.w	r4, r4, r9
 800046e:	fa1f f983 	uxth.w	r9, r3
 8000472:	fbb4 f3f8 	udiv	r3, r4, r8
 8000476:	fb08 4413 	mls	r4, r8, r3, r4
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000482:	45a4      	cmp	ip, r4
 8000484:	d906      	bls.n	8000494 <__udivmoddi4+0x1e4>
 8000486:	193c      	adds	r4, r7, r4
 8000488:	f103 38ff 	add.w	r8, r3, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x1e2>
 800048e:	45a4      	cmp	ip, r4
 8000490:	d87a      	bhi.n	8000588 <__udivmoddi4+0x2d8>
 8000492:	4643      	mov	r3, r8
 8000494:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000498:	eba4 040c 	sub.w	r4, r4, ip
 800049c:	fba0 9802 	umull	r9, r8, r0, r2
 80004a0:	4544      	cmp	r4, r8
 80004a2:	46cc      	mov	ip, r9
 80004a4:	4643      	mov	r3, r8
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0x1fe>
 80004a8:	d106      	bne.n	80004b8 <__udivmoddi4+0x208>
 80004aa:	45ce      	cmp	lr, r9
 80004ac:	d204      	bcs.n	80004b8 <__udivmoddi4+0x208>
 80004ae:	3801      	subs	r0, #1
 80004b0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004b4:	eb68 0307 	sbc.w	r3, r8, r7
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x222>
 80004ba:	ebbe 020c 	subs.w	r2, lr, ip
 80004be:	eb64 0403 	sbc.w	r4, r4, r3
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	431e      	orrs	r6, r3
 80004ce:	e9c5 6400 	strd	r6, r4, [r5]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e73e      	b.n	8000354 <__udivmoddi4+0xa4>
 80004d6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004da:	f1c3 0120 	rsb	r1, r3, #32
 80004de:	fa04 f203 	lsl.w	r2, r4, r3
 80004e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004ec:	fa20 f101 	lsr.w	r1, r0, r1
 80004f0:	fa1f f68e 	uxth.w	r6, lr
 80004f4:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fb07 4410 	mls	r4, r7, r0, r4
 80004fe:	0c11      	lsrs	r1, r2, #16
 8000500:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000504:	fb00 f406 	mul.w	r4, r0, r6
 8000508:	428c      	cmp	r4, r1
 800050a:	d90e      	bls.n	800052a <__udivmoddi4+0x27a>
 800050c:	eb1e 0101 	adds.w	r1, lr, r1
 8000510:	f100 38ff 	add.w	r8, r0, #4294967295
 8000514:	bf2c      	ite	cs
 8000516:	f04f 0901 	movcs.w	r9, #1
 800051a:	f04f 0900 	movcc.w	r9, #0
 800051e:	428c      	cmp	r4, r1
 8000520:	d902      	bls.n	8000528 <__udivmoddi4+0x278>
 8000522:	f1b9 0f00 	cmp.w	r9, #0
 8000526:	d02c      	beq.n	8000582 <__udivmoddi4+0x2d2>
 8000528:	4640      	mov	r0, r8
 800052a:	1b09      	subs	r1, r1, r4
 800052c:	b292      	uxth	r2, r2
 800052e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000532:	fb07 1114 	mls	r1, r7, r4, r1
 8000536:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053a:	fb04 f106 	mul.w	r1, r4, r6
 800053e:	4291      	cmp	r1, r2
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x2a2>
 8000542:	eb1e 0202 	adds.w	r2, lr, r2
 8000546:	f104 38ff 	add.w	r8, r4, #4294967295
 800054a:	d201      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 800054c:	4291      	cmp	r1, r2
 800054e:	d815      	bhi.n	800057c <__udivmoddi4+0x2cc>
 8000550:	4644      	mov	r4, r8
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000558:	e721      	b.n	800039e <__udivmoddi4+0xee>
 800055a:	1a86      	subs	r6, r0, r2
 800055c:	eb64 0303 	sbc.w	r3, r4, r3
 8000560:	2001      	movs	r0, #1
 8000562:	e70e      	b.n	8000382 <__udivmoddi4+0xd2>
 8000564:	3c02      	subs	r4, #2
 8000566:	4472      	add	r2, lr
 8000568:	e735      	b.n	80003d6 <__udivmoddi4+0x126>
 800056a:	3902      	subs	r1, #2
 800056c:	4472      	add	r2, lr
 800056e:	e6d0      	b.n	8000312 <__udivmoddi4+0x62>
 8000570:	44f4      	add	ip, lr
 8000572:	3802      	subs	r0, #2
 8000574:	e6e3      	b.n	800033e <__udivmoddi4+0x8e>
 8000576:	44f4      	add	ip, lr
 8000578:	3802      	subs	r0, #2
 800057a:	e742      	b.n	8000402 <__udivmoddi4+0x152>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e7e7      	b.n	8000552 <__udivmoddi4+0x2a2>
 8000582:	3802      	subs	r0, #2
 8000584:	4471      	add	r1, lr
 8000586:	e7d0      	b.n	800052a <__udivmoddi4+0x27a>
 8000588:	3b02      	subs	r3, #2
 800058a:	443c      	add	r4, r7
 800058c:	e782      	b.n	8000494 <__udivmoddi4+0x1e4>
 800058e:	3802      	subs	r0, #2
 8000590:	443c      	add	r4, r7
 8000592:	e76a      	b.n	800046a <__udivmoddi4+0x1ba>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2220      	movs	r2, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f017 fb7b 	bl	8017ca0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005aa:	4b30      	ldr	r3, [pc, #192]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005ac:	4a30      	ldr	r2, [pc, #192]	@ (8000670 <MX_ADC1_Init+0xd8>)
 80005ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005b0:	4b2e      	ldr	r3, [pc, #184]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b8:	4b2c      	ldr	r3, [pc, #176]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80005be:	4b2b      	ldr	r3, [pc, #172]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c4:	4b29      	ldr	r3, [pc, #164]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b28      	ldr	r3, [pc, #160]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005cc:	2204      	movs	r2, #4
 80005ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d0:	4b26      	ldr	r3, [pc, #152]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d6:	4b25      	ldr	r3, [pc, #148]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80005de:	4b23      	ldr	r3, [pc, #140]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e4:	4b21      	ldr	r3, [pc, #132]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005ee:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 80005f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <MX_ADC1_Init+0xd4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000604:	4b19      	ldr	r3, [pc, #100]	@ (800066c <MX_ADC1_Init+0xd4>)
 8000606:	2200      	movs	r2, #0
 8000608:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800060a:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_ADC1_Init+0xd4>)
 800060c:	2200      	movs	r2, #0
 800060e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_ADC1_Init+0xd4>)
 8000612:	2200      	movs	r2, #0
 8000614:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <MX_ADC1_Init+0xd4>)
 8000618:	2201      	movs	r2, #1
 800061a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800061c:	4b13      	ldr	r3, [pc, #76]	@ (800066c <MX_ADC1_Init+0xd4>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000624:	4811      	ldr	r0, [pc, #68]	@ (800066c <MX_ADC1_Init+0xd4>)
 8000626:	f002 fc9f 	bl	8002f68 <HAL_ADC_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000630:	f001 f932 	bl	8001898 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0xdc>)
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000638:	2306      	movs	r3, #6
 800063a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_68CYCLES;
 800063c:	2305      	movs	r3, #5
 800063e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000644:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000646:	2304      	movs	r3, #4
 8000648:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	4619      	mov	r1, r3
 8000652:	4806      	ldr	r0, [pc, #24]	@ (800066c <MX_ADC1_Init+0xd4>)
 8000654:	f003 f8de 	bl	8003814 <HAL_ADC_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800065e:	f001 f91b 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000214 	.word	0x20000214
 8000670:	42028000 	.word	0x42028000
 8000674:	0c000008 	.word	0x0c000008

08000678 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0bc      	sub	sp, #240	@ 0xf0
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000690:	f107 0318 	add.w	r3, r7, #24
 8000694:	22c0      	movs	r2, #192	@ 0xc0
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f017 fb01 	bl	8017ca0 <memset>
  if(adcHandle->Instance==ADC1)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a55      	ldr	r2, [pc, #340]	@ (80007f8 <HAL_ADC_MspInit+0x180>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f040 80a2 	bne.w	80007ee <HAL_ADC_MspInit+0x176>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80006aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006ae:	f04f 0300 	mov.w	r3, #0
 80006b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 80006b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	4618      	mov	r0, r3
 80006c4:	f009 ff44 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 80006ce:	f001 f8e3 	bl	8001898 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006d2:	4b4a      	ldr	r3, [pc, #296]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 80006d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d8:	4a48      	ldr	r2, [pc, #288]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 80006da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e2:	4b46      	ldr	r3, [pc, #280]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 80006e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b42      	ldr	r3, [pc, #264]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 80006f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f6:	4a41      	ldr	r2, [pc, #260]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000700:	4b3e      	ldr	r3, [pc, #248]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 8000702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b3b      	ldr	r3, [pc, #236]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 8000710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000714:	4a39      	ldr	r2, [pc, #228]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800071e:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <HAL_ADC_MspInit+0x184>)
 8000720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|EXT_ADC_IN0_Pin;
 800072c:	2324      	movs	r3, #36	@ 0x24
 800072e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000732:	2303      	movs	r3, #3
 8000734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000742:	4619      	mov	r1, r3
 8000744:	482e      	ldr	r0, [pc, #184]	@ (8000800 <HAL_ADC_MspInit+0x188>)
 8000746:	f005 ff65 	bl	8006614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_ADC_IN1_Pin;
 800074a:	2301      	movs	r3, #1
 800074c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	2303      	movs	r3, #3
 8000752:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(EXT_ADC_IN1_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000760:	4619      	mov	r1, r3
 8000762:	4828      	ldr	r0, [pc, #160]	@ (8000804 <HAL_ADC_MspInit+0x18c>)
 8000764:	f005 ff56 	bl	8006614 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000768:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 800076a:	4a28      	ldr	r2, [pc, #160]	@ (800080c <HAL_ADC_MspInit+0x194>)
 800076c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_ADC1;
 800076e:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000774:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800077a:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8000780:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 8000788:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800078c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800078e:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 8000790:	2202      	movs	r2, #2
 8000792:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000794:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 8000796:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800079a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800079c:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80007ba:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007bc:	2200      	movs	r2, #0
 80007be:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80007c0:	4811      	ldr	r0, [pc, #68]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007c2:	f004 fe93 	bl	80054ec <HAL_DMA_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 80007cc:	f001 f864 	bl	8001898 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel0);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80007d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80007dc:	2110      	movs	r1, #16
 80007de:	480a      	ldr	r0, [pc, #40]	@ (8000808 <HAL_ADC_MspInit+0x190>)
 80007e0:	f005 fa43 	bl	8005c6a <HAL_DMA_ConfigChannelAttributes>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_ADC_MspInit+0x176>
    {
      Error_Handler();
 80007ea:	f001 f855 	bl	8001898 <Error_Handler>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007ee:	bf00      	nop
 80007f0:	37f0      	adds	r7, #240	@ 0xf0
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	42028000 	.word	0x42028000
 80007fc:	46020c00 	.word	0x46020c00
 8000800:	42020800 	.word	0x42020800
 8000804:	42020400 	.word	0x42020400
 8000808:	200002a0 	.word	0x200002a0
 800080c:	40020050 	.word	0x40020050

08000810 <MX_ADC1_Start>:
{
	return HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
}
/* ADC1 start */
HAL_StatusTypeDef MX_ADC1_Start(uint32_t *pu32Data, uint32_t u32Length)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	return HAL_ADC_Start_DMA(&hadc1, pu32Data, u32Length);
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_ADC1_Start+0x20>)
 8000820:	f002 fe6c 	bl	80034fc <HAL_ADC_Start_DMA>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000214 	.word	0x20000214

08000834 <MX_ADC1_Stop>:
/* ADC1 stop */
HAL_StatusTypeDef MX_ADC1_Stop(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	return HAL_ADC_Stop_DMA(&hadc1);
 8000838:	4802      	ldr	r0, [pc, #8]	@ (8000844 <MX_ADC1_Stop+0x10>)
 800083a:	f002 ff69 	bl	8003710 <HAL_ADC_Stop_DMA>
 800083e:	4603      	mov	r3, r0
}
 8000840:	4618      	mov	r0, r3
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000214 	.word	0x20000214

08000848 <HAL_ADC_ConvCpltCallback>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac);
void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac);

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if (ADC1 == hadc->Instance)	{
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <HAL_ADC_ConvCpltCallback+0x28>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d105      	bne.n	8000866 <HAL_ADC_ConvCpltCallback+0x1e>
		osEventFlagsSet(Adc1EventHandle, ADC_CONV_CPLT_FLAG);
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_ADC_ConvCpltCallback+0x2c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f013 fb87 	bl	8013f74 <osEventFlagsSet>
	}
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	42028000 	.word	0x42028000
 8000874:	20028334 	.word	0x20028334

08000878 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if (ADC1 == hadc->Instance)	{
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <HAL_ADC_ErrorCallback+0x28>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d105      	bne.n	8000896 <HAL_ADC_ErrorCallback+0x1e>
		osEventFlagsSet(Adc1EventHandle, ADC_ERROR_FLAG);
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_ADC_ErrorCallback+0x2c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2102      	movs	r1, #2
 8000890:	4618      	mov	r0, r3
 8000892:	f013 fb6f 	bl	8013f74 <osEventFlagsSet>
	}
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	42028000 	.word	0x42028000
 80008a4:	20028334 	.word	0x20028334

080008a8 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if (DAC1 == hdac->Instance)	{
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a06      	ldr	r2, [pc, #24]	@ (80008d0 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d105      	bne.n	80008c6 <HAL_DAC_ConvCpltCallbackCh1+0x1e>
		osEventFlagsSet(Dac1EventHandle, DAC_CONV_CPLT_FLAG);
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f013 fb57 	bl	8013f74 <osEventFlagsSet>
	}
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	46021800 	.word	0x46021800
 80008d4:	20028330 	.word	0x20028330

080008d8 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	if (DAC1 == hdac->Instance)	{
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_DAC_ErrorCallbackCh1+0x28>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d105      	bne.n	80008f6 <HAL_DAC_ErrorCallbackCh1+0x1e>
		osEventFlagsSet(Dac1EventHandle, DAC_ERROR_FLAG);
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_DAC_ErrorCallbackCh1+0x2c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2102      	movs	r1, #2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f013 fb3f 	bl	8013f74 <osEventFlagsSet>
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	46021800 	.word	0x46021800
 8000904:	20028330 	.word	0x20028330

08000908 <LEDTurnOff>:
GPIO_PinState JoystickReadButton(joystick_btn button);
HAL_StatusTypeDef AudioInOneShot(void);
HAL_StatusTypeDef AudioOutOneShot(void);

void LEDTurnOff(bar_led led)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(gpio_led_bar[led].pPort, gpio_led_bar[led].Pin, GPIO_PIN_SET);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <LEDTurnOff+0x2c>)
 8000916:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <LEDTurnOff+0x2c>)
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	4413      	add	r3, r2
 8000922:	889b      	ldrh	r3, [r3, #4]
 8000924:	2201      	movs	r2, #1
 8000926:	4619      	mov	r1, r3
 8000928:	f006 f864 	bl	80069f4 <HAL_GPIO_WritePin>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000

08000938 <LEDTurnOn>:

void LEDTurnOn(bar_led led)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(gpio_led_bar[led].pPort, gpio_led_bar[led].Pin, GPIO_PIN_RESET);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <LEDTurnOn+0x2c>)
 8000946:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <LEDTurnOn+0x2c>)
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4413      	add	r3, r2
 8000952:	889b      	ldrh	r3, [r3, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	f006 f84c 	bl	80069f4 <HAL_GPIO_WritePin>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000000 	.word	0x20000000

08000968 <JoystickReadButton>:
{
	HAL_GPIO_TogglePin(gpio_led_bar[led].pPort, gpio_led_bar[led].Pin);
}

GPIO_PinState JoystickReadButton(joystick_btn button)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(gpio_joystick[button].pPort, gpio_joystick[button].Pin);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <JoystickReadButton+0x30>)
 8000976:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4906      	ldr	r1, [pc, #24]	@ (8000998 <JoystickReadButton+0x30>)
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	440b      	add	r3, r1
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	4619      	mov	r1, r3
 8000986:	4610      	mov	r0, r2
 8000988:	f006 f81c 	bl	80069c4 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000030 	.word	0x20000030

0800099c <AudioInOneShot>:

HAL_StatusTypeDef AudioInOneShot(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
	uint32_t adc_flag, sample_num = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]

	bar_led led_num = LED_0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	72fb      	strb	r3, [r7, #11]

	for (; LED_MAX > led_num; led_num++) {
 80009aa:	e006      	b.n	80009ba <AudioInOneShot+0x1e>
		LEDTurnOff(led_num);
 80009ac:	7afb      	ldrb	r3, [r7, #11]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffaa 	bl	8000908 <LEDTurnOff>
	for (; LED_MAX > led_num; led_num++) {
 80009b4:	7afb      	ldrb	r3, [r7, #11]
 80009b6:	3301      	adds	r3, #1
 80009b8:	72fb      	strb	r3, [r7, #11]
 80009ba:	7afb      	ldrb	r3, [r7, #11]
 80009bc:	2b05      	cmp	r3, #5
 80009be:	d9f5      	bls.n	80009ac <AudioInOneShot+0x10>
	}
	led_num = LED_0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	72fb      	strb	r3, [r7, #11]
	LEDTurnOn(led_num++);
 80009c4:	7afb      	ldrb	r3, [r7, #11]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	72fa      	strb	r2, [r7, #11]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffb4 	bl	8000938 <LEDTurnOn>
	if (HAL_OK != MX_ADC1_Start(&u32DataBlock_Audio[sample_num], DMA_TRANSFER_LEN)) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4a33      	ldr	r2, [pc, #204]	@ (8000aa4 <AudioInOneShot+0x108>)
 80009d6:	4413      	add	r3, r2
 80009d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff17 	bl	8000810 <MX_ADC1_Start>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <AudioInOneShot+0x50>
		return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e057      	b.n	8000a9c <AudioInOneShot+0x100>
	}
	if (HAL_OK != MX_TIM2_Start()) {
 80009ec:	f001 faa8 	bl	8001f40 <MX_TIM2_Start>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <AudioInOneShot+0x5e>
		return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e050      	b.n	8000a9c <AudioInOneShot+0x100>
	}
	adc_flag = osEventFlagsWait(Adc1EventHandle, ADC_CONV_CPLT_FLAG, osFlagsWaitAny, osWaitForever);
 80009fa:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa8 <AudioInOneShot+0x10c>)
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	2200      	movs	r2, #0
 8000a04:	2101      	movs	r1, #1
 8000a06:	f013 fb51 	bl	80140ac <osEventFlagsWait>
 8000a0a:	6078      	str	r0, [r7, #4]
	if (ADC_CONV_CPLT_FLAG != adc_flag) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d001      	beq.n	8000a16 <AudioInOneShot+0x7a>
		return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e042      	b.n	8000a9c <AudioInOneShot+0x100>
	}
	for (sample_num = DMA_TRANSFER_LEN; AUDIO_BUFFER_LEN > sample_num; sample_num += DMA_TRANSFER_LEN) {
 8000a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e025      	b.n	8000a6a <AudioInOneShot+0xce>
		LEDTurnOn(led_num++);
 8000a1e:	7afb      	ldrb	r3, [r7, #11]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	72fa      	strb	r2, [r7, #11]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff87 	bl	8000938 <LEDTurnOn>
		if (HAL_OK != MX_ADC1_Start(&u32DataBlock_Audio[sample_num], DMA_TRANSFER_LEN)) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa4 <AudioInOneShot+0x108>)
 8000a30:	4413      	add	r3, r2
 8000a32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff feea 	bl	8000810 <MX_ADC1_Start>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <AudioInOneShot+0xaa>
			return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e02a      	b.n	8000a9c <AudioInOneShot+0x100>
		}
		adc_flag = osEventFlagsWait(Adc1EventHandle, ADC_CONV_CPLT_FLAG, osFlagsWaitAny, osWaitForever);
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <AudioInOneShot+0x10c>)
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2101      	movs	r1, #1
 8000a52:	f013 fb2b 	bl	80140ac <osEventFlagsWait>
 8000a56:	6078      	str	r0, [r7, #4]
		if (ADC_CONV_CPLT_FLAG != adc_flag) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d001      	beq.n	8000a62 <AudioInOneShot+0xc6>
			return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e01c      	b.n	8000a9c <AudioInOneShot+0x100>
	for (sample_num = DMA_TRANSFER_LEN; AUDIO_BUFFER_LEN > sample_num; sample_num += DMA_TRANSFER_LEN) {
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8000a70:	d3d5      	bcc.n	8000a1e <AudioInOneShot+0x82>
		}
	}
	LEDTurnOn(led_num++);
 8000a72:	7afb      	ldrb	r3, [r7, #11]
 8000a74:	1c5a      	adds	r2, r3, #1
 8000a76:	72fa      	strb	r2, [r7, #11]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <LEDTurnOn>
	if (HAL_OK != MX_TIM2_Stop()) {
 8000a7e:	f001 fa69 	bl	8001f54 <MX_TIM2_Stop>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <AudioInOneShot+0xf0>
		return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e007      	b.n	8000a9c <AudioInOneShot+0x100>
	}
	if (HAL_OK != MX_ADC1_Stop()) {
 8000a8c:	f7ff fed2 	bl	8000834 <MX_ADC1_Stop>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <AudioInOneShot+0xfe>
		return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <AudioInOneShot+0x100>
	}
	return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000318 	.word	0x20000318
 8000aa8:	20028334 	.word	0x20028334

08000aac <AudioOutOneShot>:

HAL_StatusTypeDef AudioOutOneShot(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
	uint32_t dac_flag, sample_num = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]

	bar_led led_num = LED_0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	72fb      	strb	r3, [r7, #11]

	for (;LED_MAX > led_num; led_num++) {
 8000aba:	e006      	b.n	8000aca <AudioOutOneShot+0x1e>
		LEDTurnOn(led_num);
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff3a 	bl	8000938 <LEDTurnOn>
	for (;LED_MAX > led_num; led_num++) {
 8000ac4:	7afb      	ldrb	r3, [r7, #11]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	72fb      	strb	r3, [r7, #11]
 8000aca:	7afb      	ldrb	r3, [r7, #11]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	d9f5      	bls.n	8000abc <AudioOutOneShot+0x10>
	}
	HAL_GPIO_WritePin(AUDIO_SHDWN_GPIO_Port, AUDIO_SHDWN_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad6:	483d      	ldr	r0, [pc, #244]	@ (8000bcc <AudioOutOneShot+0x120>)
 8000ad8:	f005 ff8c 	bl	80069f4 <HAL_GPIO_WritePin>
	led_num = LED_5;
 8000adc:	2305      	movs	r3, #5
 8000ade:	72fb      	strb	r3, [r7, #11]
	LEDTurnOff(led_num--);
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	72fa      	strb	r2, [r7, #11]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff0e 	bl	8000908 <LEDTurnOff>
	if (HAL_OK != MX_DAC1_Start(&u32DataBlock_Audio[sample_num], DMA_TRANSFER_LEN)) {
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4a37      	ldr	r2, [pc, #220]	@ (8000bd0 <AudioOutOneShot+0x124>)
 8000af2:	4413      	add	r3, r2
 8000af4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fb7d 	bl	80011f8 <MX_DAC1_Start>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <AudioOutOneShot+0x5c>
		return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e05d      	b.n	8000bc4 <AudioOutOneShot+0x118>
	}
	if (HAL_OK != MX_TIM2_Start()) {
 8000b08:	f001 fa1a 	bl	8001f40 <MX_TIM2_Start>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <AudioOutOneShot+0x6a>
		return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e056      	b.n	8000bc4 <AudioOutOneShot+0x118>
	}
	dac_flag = osEventFlagsWait(Dac1EventHandle, DAC_CONV_CPLT_FLAG, osFlagsWaitAny, osWaitForever);
 8000b16:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd4 <AudioOutOneShot+0x128>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2101      	movs	r1, #1
 8000b22:	f013 fac3 	bl	80140ac <osEventFlagsWait>
 8000b26:	6078      	str	r0, [r7, #4]
	if (DAC_CONV_CPLT_FLAG != dac_flag) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d001      	beq.n	8000b32 <AudioOutOneShot+0x86>
		return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e048      	b.n	8000bc4 <AudioOutOneShot+0x118>
	}
	for (sample_num = DMA_TRANSFER_LEN; AUDIO_BUFFER_LEN > sample_num; sample_num += DMA_TRANSFER_LEN) {
 8000b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e025      	b.n	8000b86 <AudioOutOneShot+0xda>
		LEDTurnOff(led_num--);
 8000b3a:	7afb      	ldrb	r3, [r7, #11]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	72fa      	strb	r2, [r7, #11]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fee1 	bl	8000908 <LEDTurnOff>
		if (HAL_OK != MX_DAC1_Start(&u32DataBlock_Audio[sample_num], DMA_TRANSFER_LEN)) {
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <AudioOutOneShot+0x124>)
 8000b4c:	4413      	add	r3, r2
 8000b4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fb50 	bl	80011f8 <MX_DAC1_Start>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <AudioOutOneShot+0xb6>
			return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e030      	b.n	8000bc4 <AudioOutOneShot+0x118>
		}
		dac_flag = osEventFlagsWait(Dac1EventHandle, DAC_CONV_CPLT_FLAG, osFlagsWaitAny, osWaitForever);
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <AudioOutOneShot+0x128>)
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	f013 fa9d 	bl	80140ac <osEventFlagsWait>
 8000b72:	6078      	str	r0, [r7, #4]
		if (DAC_CONV_CPLT_FLAG != dac_flag) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d001      	beq.n	8000b7e <AudioOutOneShot+0xd2>
			return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e022      	b.n	8000bc4 <AudioOutOneShot+0x118>
	for (sample_num = DMA_TRANSFER_LEN; AUDIO_BUFFER_LEN > sample_num; sample_num += DMA_TRANSFER_LEN) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8000b8c:	d3d5      	bcc.n	8000b3a <AudioOutOneShot+0x8e>
		}
	}
	LEDTurnOff(led_num--);
 8000b8e:	7afb      	ldrb	r3, [r7, #11]
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	72fa      	strb	r2, [r7, #11]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff feb7 	bl	8000908 <LEDTurnOff>
	if (HAL_OK != MX_TIM2_Stop()) {
 8000b9a:	f001 f9db 	bl	8001f54 <MX_TIM2_Stop>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <AudioOutOneShot+0xfc>
		return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e00d      	b.n	8000bc4 <AudioOutOneShot+0x118>
	}
	if (HAL_OK != MX_DAC1_Stop()) {
 8000ba8:	f000 fb3a 	bl	8001220 <MX_DAC1_Stop>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <AudioOutOneShot+0x10a>
		return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e006      	b.n	8000bc4 <AudioOutOneShot+0x118>
	}
	HAL_GPIO_WritePin(AUDIO_SHDWN_GPIO_Port, AUDIO_SHDWN_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <AudioOutOneShot+0x120>)
 8000bbe:	f005 ff19 	bl	80069f4 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	42020000 	.word	0x42020000
 8000bd0:	20000318 	.word	0x20000318
 8000bd4:	20028330 	.word	0x20028330

08000bd8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */

  /* USER CODE END RTOS_QUEUES */
  /* creation of JoystickUpTask */
  JoystickUpTaskHandle = osThreadNew(JoystickUpTask, NULL, &JoystickUpTask_attributes);
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c54 <MX_FREERTOS_Init+0x7c>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	481d      	ldr	r0, [pc, #116]	@ (8000c58 <MX_FREERTOS_Init+0x80>)
 8000be2:	f013 f8d7 	bl	8013d94 <osThreadNew>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c5c <MX_FREERTOS_Init+0x84>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* creation of JoystickDoTask */
  JoystickDoTaskHandle = osThreadNew(JoystickDoTask, NULL, &JoystickDoTask_attributes);
 8000bec:	4a1c      	ldr	r2, [pc, #112]	@ (8000c60 <MX_FREERTOS_Init+0x88>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	481c      	ldr	r0, [pc, #112]	@ (8000c64 <MX_FREERTOS_Init+0x8c>)
 8000bf2:	f013 f8cf 	bl	8013d94 <osThreadNew>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <MX_FREERTOS_Init+0x90>)
 8000bfa:	6013      	str	r3, [r2, #0]

  /* creation of JoystickRiTask */
  JoystickRiTaskHandle = osThreadNew(JoystickRiTask, NULL, &JoystickRiTask_attributes);
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c6c <MX_FREERTOS_Init+0x94>)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	481b      	ldr	r0, [pc, #108]	@ (8000c70 <MX_FREERTOS_Init+0x98>)
 8000c02:	f013 f8c7 	bl	8013d94 <osThreadNew>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a1a      	ldr	r2, [pc, #104]	@ (8000c74 <MX_FREERTOS_Init+0x9c>)
 8000c0a:	6013      	str	r3, [r2, #0]

  /* creation of JoystickLeTask */
  JoystickLeTaskHandle = osThreadNew(JoystickLeTask, NULL, &JoystickLeTask_attributes);
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000c78 <MX_FREERTOS_Init+0xa0>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	481a      	ldr	r0, [pc, #104]	@ (8000c7c <MX_FREERTOS_Init+0xa4>)
 8000c12:	f013 f8bf 	bl	8013d94 <osThreadNew>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a19      	ldr	r2, [pc, #100]	@ (8000c80 <MX_FREERTOS_Init+0xa8>)
 8000c1a:	6013      	str	r3, [r2, #0]

  /* creation of AudioTask */
  AudioTaskHandle = osThreadNew(AudioTask, NULL, &AudioTask_attributes);
 8000c1c:	4a19      	ldr	r2, [pc, #100]	@ (8000c84 <MX_FREERTOS_Init+0xac>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4819      	ldr	r0, [pc, #100]	@ (8000c88 <MX_FREERTOS_Init+0xb0>)
 8000c22:	f013 f8b7 	bl	8013d94 <osThreadNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a18      	ldr	r2, [pc, #96]	@ (8000c8c <MX_FREERTOS_Init+0xb4>)
 8000c2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of JoystickEvent */
  JoystickEventHandle = osEventFlagsNew(&JoystickEvent_attributes);
 8000c2c:	4818      	ldr	r0, [pc, #96]	@ (8000c90 <MX_FREERTOS_Init+0xb8>)
 8000c2e:	f013 f963 	bl	8013ef8 <osEventFlagsNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a17      	ldr	r2, [pc, #92]	@ (8000c94 <MX_FREERTOS_Init+0xbc>)
 8000c36:	6013      	str	r3, [r2, #0]

  /* creation of Dac1Event */
  Dac1EventHandle = osEventFlagsNew(&Dac1Event_attributes);
 8000c38:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <MX_FREERTOS_Init+0xc0>)
 8000c3a:	f013 f95d 	bl	8013ef8 <osEventFlagsNew>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a16      	ldr	r2, [pc, #88]	@ (8000c9c <MX_FREERTOS_Init+0xc4>)
 8000c42:	6013      	str	r3, [r2, #0]

  /* creation of Adc1Event */
  Adc1EventHandle = osEventFlagsNew(&Adc1Event_attributes);
 8000c44:	4816      	ldr	r0, [pc, #88]	@ (8000ca0 <MX_FREERTOS_Init+0xc8>)
 8000c46:	f013 f957 	bl	8013ef8 <osEventFlagsNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a15      	ldr	r2, [pc, #84]	@ (8000ca4 <MX_FREERTOS_Init+0xcc>)
 8000c4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08017e10 	.word	0x08017e10
 8000c58:	08000ca9 	.word	0x08000ca9
 8000c5c:	20028318 	.word	0x20028318
 8000c60:	08017e34 	.word	0x08017e34
 8000c64:	08000cfd 	.word	0x08000cfd
 8000c68:	2002831c 	.word	0x2002831c
 8000c6c:	08017e58 	.word	0x08017e58
 8000c70:	08000d51 	.word	0x08000d51
 8000c74:	20028320 	.word	0x20028320
 8000c78:	08017e7c 	.word	0x08017e7c
 8000c7c:	08000da5 	.word	0x08000da5
 8000c80:	20028324 	.word	0x20028324
 8000c84:	08017ea0 	.word	0x08017ea0
 8000c88:	08000df9 	.word	0x08000df9
 8000c8c:	20028328 	.word	0x20028328
 8000c90:	08017ec4 	.word	0x08017ec4
 8000c94:	2002832c 	.word	0x2002832c
 8000c98:	08017ed4 	.word	0x08017ed4
 8000c9c:	20028330 	.word	0x20028330
 8000ca0:	08017ee4 	.word	0x08017ee4
 8000ca4:	20028334 	.word	0x20028334

08000ca8 <JoystickUpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_JoystickUpTask */
void JoystickUpTask(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN JoystickUpTask */
  /* Infinite loop */
  for(;;)
  {
	  // Wait for Joystick Button Pulsed
	  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_UP)) {
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fe59 	bl	8000968 <JoystickReadButton>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d119      	bne.n	8000cf0 <JoystickUpTask+0x48>
		  // Wait 50ms for bouncing
		  osDelay(50);
 8000cbc:	2032      	movs	r0, #50	@ 0x32
 8000cbe:	f013 f901 	bl	8013ec4 <osDelay>
		  // Check if Joystick Button is still pulsed
		  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_UP)) {
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff fe50 	bl	8000968 <JoystickReadButton>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d1f0      	bne.n	8000cb0 <JoystickUpTask+0x8>
			  // Send Event
			  osEventFlagsSet(JoystickEventHandle, JOYSTICK_UP_FLAG);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <JoystickUpTask+0x50>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f013 f94d 	bl	8013f74 <osEventFlagsSet>
			  // Wait for Joystick Button Release
			  while (GPIO_PIN_SET == JoystickReadButton(BUTTON_UP));
 8000cda:	bf00      	nop
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fe43 	bl	8000968 <JoystickReadButton>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d0f9      	beq.n	8000cdc <JoystickUpTask+0x34>
			  // Wait 50ms for bouncing
			  osDelay(50);
 8000ce8:	2032      	movs	r0, #50	@ 0x32
 8000cea:	f013 f8eb 	bl	8013ec4 <osDelay>
 8000cee:	e7df      	b.n	8000cb0 <JoystickUpTask+0x8>
		  }
	  }
	  else {
		  osDelay(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f013 f8e7 	bl	8013ec4 <osDelay>
	  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_UP)) {
 8000cf6:	e7db      	b.n	8000cb0 <JoystickUpTask+0x8>
 8000cf8:	2002832c 	.word	0x2002832c

08000cfc <JoystickDoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_JoystickDoTask */
void JoystickDoTask(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN JoystickDoTask */
  /* Infinite loop */
  for(;;)
  {
	  // Wait for Joystick Button Pulsed
	  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_DOWN)) {
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fe2f 	bl	8000968 <JoystickReadButton>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d119      	bne.n	8000d44 <JoystickDoTask+0x48>
		  // Wait 50ms for bouncing
		  osDelay(50);
 8000d10:	2032      	movs	r0, #50	@ 0x32
 8000d12:	f013 f8d7 	bl	8013ec4 <osDelay>
		  // Check if Joystick Button is still pulsed
		  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_DOWN)) {
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff fe26 	bl	8000968 <JoystickReadButton>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d1f0      	bne.n	8000d04 <JoystickDoTask+0x8>
			  // Send Event
			  osEventFlagsSet(JoystickEventHandle, JOYSTICK_DO_FLAG);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <JoystickDoTask+0x50>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2102      	movs	r1, #2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f013 f923 	bl	8013f74 <osEventFlagsSet>
			  // Wait for Joystick Button Release
			  while (GPIO_PIN_SET == JoystickReadButton(BUTTON_DOWN));
 8000d2e:	bf00      	nop
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fe19 	bl	8000968 <JoystickReadButton>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d0f9      	beq.n	8000d30 <JoystickDoTask+0x34>
			  // Wait 50ms for bouncing
			  osDelay(50);
 8000d3c:	2032      	movs	r0, #50	@ 0x32
 8000d3e:	f013 f8c1 	bl	8013ec4 <osDelay>
 8000d42:	e7df      	b.n	8000d04 <JoystickDoTask+0x8>
		  }
	  }
	  else {
		  osDelay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f013 f8bd 	bl	8013ec4 <osDelay>
	  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_DOWN)) {
 8000d4a:	e7db      	b.n	8000d04 <JoystickDoTask+0x8>
 8000d4c:	2002832c 	.word	0x2002832c

08000d50 <JoystickRiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_JoystickRiTask */
void JoystickRiTask(void *argument)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN JoystickRiTask */
  /* Infinite loop */
  for(;;)
  {
	  // Wait for Joystick Button Pulsed
	  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_RIGHT)) {
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fe05 	bl	8000968 <JoystickReadButton>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d119      	bne.n	8000d98 <JoystickRiTask+0x48>
		  // Wait 50ms for bouncing
		  osDelay(50);
 8000d64:	2032      	movs	r0, #50	@ 0x32
 8000d66:	f013 f8ad 	bl	8013ec4 <osDelay>
		  // Check if Joystick Button is still pulsed
		  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_RIGHT)) {
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f7ff fdfc 	bl	8000968 <JoystickReadButton>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d1f0      	bne.n	8000d58 <JoystickRiTask+0x8>
			  // Send Event
			  osEventFlagsSet(JoystickEventHandle, JOYSTICK_RI_FLAG);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <JoystickRiTask+0x50>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f013 f8f9 	bl	8013f74 <osEventFlagsSet>
			  // Wait for Joystick Button Release
			  while (GPIO_PIN_SET == JoystickReadButton(BUTTON_RIGHT));
 8000d82:	bf00      	nop
 8000d84:	2002      	movs	r0, #2
 8000d86:	f7ff fdef 	bl	8000968 <JoystickReadButton>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d0f9      	beq.n	8000d84 <JoystickRiTask+0x34>
			  // Wait 50ms for bouncing
			  osDelay(50);
 8000d90:	2032      	movs	r0, #50	@ 0x32
 8000d92:	f013 f897 	bl	8013ec4 <osDelay>
 8000d96:	e7df      	b.n	8000d58 <JoystickRiTask+0x8>
		  }
	  }
	  else {
		  osDelay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f013 f893 	bl	8013ec4 <osDelay>
	  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_RIGHT)) {
 8000d9e:	e7db      	b.n	8000d58 <JoystickRiTask+0x8>
 8000da0:	2002832c 	.word	0x2002832c

08000da4 <JoystickLeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_JoystickLeTask */
void JoystickLeTask(void *argument)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN JoystickLeTask */
  /* Infinite loop */
  for(;;)
  {
	  // Wait for Joystick Button Pulsed
	  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_LEFT)) {
 8000dac:	2003      	movs	r0, #3
 8000dae:	f7ff fddb 	bl	8000968 <JoystickReadButton>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d119      	bne.n	8000dec <JoystickLeTask+0x48>
		  // Wait 50ms for bouncing
		  osDelay(50);
 8000db8:	2032      	movs	r0, #50	@ 0x32
 8000dba:	f013 f883 	bl	8013ec4 <osDelay>
		  // Check if Joystick Button is still pulsed
		  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_LEFT)) {
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f7ff fdd2 	bl	8000968 <JoystickReadButton>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d1f0      	bne.n	8000dac <JoystickLeTask+0x8>
			  // Send Event
			  osEventFlagsSet(JoystickEventHandle, JOYSTICK_LE_FLAG);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <JoystickLeTask+0x50>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f013 f8cf 	bl	8013f74 <osEventFlagsSet>
			  // Wait for Joystick Button Release
			  while (GPIO_PIN_SET == JoystickReadButton(BUTTON_LEFT));
 8000dd6:	bf00      	nop
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f7ff fdc5 	bl	8000968 <JoystickReadButton>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d0f9      	beq.n	8000dd8 <JoystickLeTask+0x34>
			  // Wait 50ms for bouncing
			  osDelay(50);
 8000de4:	2032      	movs	r0, #50	@ 0x32
 8000de6:	f013 f86d 	bl	8013ec4 <osDelay>
 8000dea:	e7df      	b.n	8000dac <JoystickLeTask+0x8>
		  }
	  }
	  else {
		  osDelay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f013 f869 	bl	8013ec4 <osDelay>
	  if (GPIO_PIN_SET == JoystickReadButton(BUTTON_LEFT)) {
 8000df2:	e7db      	b.n	8000dac <JoystickLeTask+0x8>
 8000df4:	2002832c 	.word	0x2002832c

08000df8 <AudioTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AudioTask */
void AudioTask(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AudioTask */
  uint32_t joystick_flag;
  /* Infinite loop */
  for(;;)
  {
	  joystick_flag = osEventFlagsGet(JoystickEventHandle);
 8000e00:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <AudioTask+0xa4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f013 f931 	bl	801406c <osEventFlagsGet>
 8000e0a:	60f8      	str	r0, [r7, #12]

	  switch (joystick_flag) {
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	2b07      	cmp	r3, #7
 8000e12:	d839      	bhi.n	8000e88 <AudioTask+0x90>
 8000e14:	a201      	add	r2, pc, #4	@ (adr r2, 8000e1c <AudioTask+0x24>)
 8000e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1a:	bf00      	nop
 8000e1c:	08000e3d 	.word	0x08000e3d
 8000e20:	08000e55 	.word	0x08000e55
 8000e24:	08000e89 	.word	0x08000e89
 8000e28:	08000e6d 	.word	0x08000e6d
 8000e2c:	08000e89 	.word	0x08000e89
 8000e30:	08000e89 	.word	0x08000e89
 8000e34:	08000e89 	.word	0x08000e89
 8000e38:	08000e7b 	.word	0x08000e7b
	  	  case JOYSTICK_UP_FLAG:
	  		  if (HAL_OK != AudioInOneShot()) {
 8000e3c:	f7ff fdae 	bl	800099c <AudioInOneShot>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d125      	bne.n	8000e92 <AudioTask+0x9a>
	  			  goto error;
	  		  }
			  osEventFlagsClear(JoystickEventHandle, JOYSTICK_UP_FLAG);
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <AudioTask+0xa4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f013 f8d5 	bl	8013ffc <osEventFlagsClear>
	  		  break;
 8000e52:	e01a      	b.n	8000e8a <AudioTask+0x92>
	  	  case JOYSTICK_DO_FLAG:
	  		  if (HAL_OK != AudioOutOneShot()) {
 8000e54:	f7ff fe2a 	bl	8000aac <AudioOutOneShot>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d11b      	bne.n	8000e96 <AudioTask+0x9e>
	  			  goto error;
	  		  }
	  		  osEventFlagsClear(JoystickEventHandle, JOYSTICK_DO_FLAG);
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <AudioTask+0xa4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2102      	movs	r1, #2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f013 f8c9 	bl	8013ffc <osEventFlagsClear>
			  break;
 8000e6a:	e00e      	b.n	8000e8a <AudioTask+0x92>
	  	  case JOYSTICK_RI_FLAG:
	  		  osEventFlagsClear(JoystickEventHandle, JOYSTICK_RI_FLAG);
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <AudioTask+0xa4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f013 f8c2 	bl	8013ffc <osEventFlagsClear>
	  		  break;
 8000e78:	e007      	b.n	8000e8a <AudioTask+0x92>
	  	  case JOYSTICK_LE_FLAG:
	  		  osEventFlagsClear(JoystickEventHandle, JOYSTICK_LE_FLAG);
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <AudioTask+0xa4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4618      	mov	r0, r3
 8000e82:	f013 f8bb 	bl	8013ffc <osEventFlagsClear>
	  		  break;
 8000e86:	e000      	b.n	8000e8a <AudioTask+0x92>
	  	  default:
	  		  // Nothing
	  		  break;
 8000e88:	bf00      	nop
	  }
	  osDelay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f013 f81a 	bl	8013ec4 <osDelay>
	  joystick_flag = osEventFlagsGet(JoystickEventHandle);
 8000e90:	e7b6      	b.n	8000e00 <AudioTask+0x8>
	  			  goto error;
 8000e92:	bf00      	nop
 8000e94:	e000      	b.n	8000e98 <AudioTask+0xa0>
	  			  goto error;
 8000e96:	bf00      	nop
  }
  error:
  	  osThreadExit();
 8000e98:	f013 f80d 	bl	8013eb6 <osThreadExit>
 8000e9c:	2002832c 	.word	0x2002832c

08000ea0 <CBUFFER_Init>:
 *                   		bufer circular a tratar.
 *
 * @return		Ninguno.
 */
void CBUFFER_Init(e_CBUFFER_Items eItem)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]

	if (false == asCBUFFER[eItem].bIsInitialized)
 8000eaa:	79fa      	ldrb	r2, [r7, #7]
 8000eac:	491e      	ldr	r1, [pc, #120]	@ (8000f28 <CBUFFER_Init+0x88>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	4413      	add	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f083 0301 	eor.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d027      	beq.n	8000f1a <CBUFFER_Init+0x7a>
	{
		/* Initialise variables */
		asCBUFFER[eItem].u16CurrentNumItems = 0U;
 8000eca:	79fa      	ldrb	r2, [r7, #7]
 8000ecc:	4916      	ldr	r1, [pc, #88]	@ (8000f28 <CBUFFER_Init+0x88>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	01db      	lsls	r3, r3, #7
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	801a      	strh	r2, [r3, #0]
		asCBUFFER[eItem].u16HeadIndex = 0U;
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	4911      	ldr	r1, [pc, #68]	@ (8000f28 <CBUFFER_Init+0x88>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	01db      	lsls	r3, r3, #7
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	801a      	strh	r2, [r3, #0]
		asCBUFFER[eItem].u16TailIndex = 0U;
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	490d      	ldr	r1, [pc, #52]	@ (8000f28 <CBUFFER_Init+0x88>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	01db      	lsls	r3, r3, #7
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	3302      	adds	r3, #2
 8000f00:	2200      	movs	r2, #0
 8000f02:	801a      	strh	r2, [r3, #0]
		/* Set initialise flag */
		asCBUFFER[eItem].bIsInitialized = true;
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <CBUFFER_Init+0x88>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
	}

}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20028338 	.word	0x20028338

08000f2c <CBUFFER_Push>:
 * @param[in]  	u16Length   Longitud del array. Valor mayor o igual a 1.
 *
 * @return     	Ninguno.
 */
void CBUFFER_Push(e_CBUFFER_Items eItem, uint8_t *pu8Data, uint16_t u16Length)
{
 8000f2c:	b4f0      	push	{r4, r5, r6, r7}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	80bb      	strh	r3, [r7, #4]

	uint16_t u16Temporal = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	81fb      	strh	r3, [r7, #14]

	/* Push one, or more, bytes in the circular buffer */
	for (;u16Length > u16Temporal; u16Temporal++)
 8000f40:	e03e      	b.n	8000fc0 <CBUFFER_Push+0x94>
	{
		asCBUFFER[eItem].au8Buffer[asCBUFFER[eItem].u16TailIndex++] = pu8Data[u16Temporal];
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	18d4      	adds	r4, r2, r3
 8000f48:	79f9      	ldrb	r1, [r7, #7]
 8000f4a:	79fa      	ldrb	r2, [r7, #7]
 8000f4c:	482c      	ldr	r0, [pc, #176]	@ (8001000 <CBUFFER_Push+0xd4>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	01db      	lsls	r3, r3, #7
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4403      	add	r3, r0
 8000f58:	3302      	adds	r3, #2
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b298      	uxth	r0, r3
 8000f5e:	1c43      	adds	r3, r0, #1
 8000f60:	b29e      	uxth	r6, r3
 8000f62:	4d27      	ldr	r5, [pc, #156]	@ (8001000 <CBUFFER_Push+0xd4>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	01db      	lsls	r3, r3, #7
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	442b      	add	r3, r5
 8000f6e:	3302      	adds	r3, #2
 8000f70:	4632      	mov	r2, r6
 8000f72:	801a      	strh	r2, [r3, #0]
 8000f74:	4605      	mov	r5, r0
 8000f76:	7820      	ldrb	r0, [r4, #0]
 8000f78:	4a21      	ldr	r2, [pc, #132]	@ (8001000 <CBUFFER_Push+0xd4>)
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	01db      	lsls	r3, r3, #7
 8000f7e:	440b      	add	r3, r1
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	442b      	add	r3, r5
 8000f86:	3306      	adds	r3, #6
 8000f88:	4602      	mov	r2, r0
 8000f8a:	701a      	strb	r2, [r3, #0]
		asCBUFFER[eItem].u16TailIndex &= ~CBUFFER_BUFFER_SIZE;
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	491c      	ldr	r1, [pc, #112]	@ (8001000 <CBUFFER_Push+0xd4>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	01db      	lsls	r3, r3, #7
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fa6:	b298      	uxth	r0, r3
 8000fa8:	4915      	ldr	r1, [pc, #84]	@ (8001000 <CBUFFER_Push+0xd4>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	01db      	lsls	r3, r3, #7
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	801a      	strh	r2, [r3, #0]
	for (;u16Length > u16Temporal; u16Temporal++)
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	81fb      	strh	r3, [r7, #14]
 8000fc0:	88ba      	ldrh	r2, [r7, #4]
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8bc      	bhi.n	8000f42 <CBUFFER_Push+0x16>
	}
	/* Increase all bytes pushed */
	asCBUFFER[eItem].u16CurrentNumItems += u16Length;
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	490d      	ldr	r1, [pc, #52]	@ (8001000 <CBUFFER_Push+0xd4>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	01db      	lsls	r3, r3, #7
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b299      	uxth	r1, r3
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	440b      	add	r3, r1
 8000fe2:	b298      	uxth	r0, r3
 8000fe4:	4906      	ldr	r1, [pc, #24]	@ (8001000 <CBUFFER_Push+0xd4>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	01db      	lsls	r3, r3, #7
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	801a      	strh	r2, [r3, #0]

}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bcf0      	pop	{r4, r5, r6, r7}
 8000ffe:	4770      	bx	lr
 8001000:	20028338 	.word	0x20028338

08001004 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef handle_GPDMA1_Channel1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	@ 0x38
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2230      	movs	r2, #48	@ 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f016 fe44 	bl	8017ca0 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_DAC1_Init+0x88>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <MX_DAC1_Init+0x8c>)
 8001020:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001022:	481a      	ldr	r0, [pc, #104]	@ (800108c <MX_DAC1_Init+0x88>)
 8001024:	f003 fdce 	bl	8004bc4 <HAL_DAC_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 800102e:	f000 fc33 	bl	8001898 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001042:	230a      	movs	r3, #10
 8001044:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800104a:	2301      	movs	r3, #1
 800104c:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	480c      	ldr	r0, [pc, #48]	@ (800108c <MX_DAC1_Init+0x88>)
 800105c:	f003 ffe6 	bl	800502c <HAL_DAC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8001066:	f000 fc17 	bl	8001898 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_DAC1_Init+0x88>)
 8001074:	f004 f9cc 	bl	8005410 <HAL_DACEx_SetConfigAutonomousMode>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 800107e:	f000 fc0b 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3738      	adds	r7, #56	@ 0x38
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20028740 	.word	0x20028740
 8001090:	46021800 	.word	0x46021800

08001094 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ba      	sub	sp, #232	@ 0xe8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	22c0      	movs	r2, #192	@ 0xc0
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f016 fdf3 	bl	8017ca0 <memset>
  if(dacHandle->Instance==DAC1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a48      	ldr	r2, [pc, #288]	@ (80011e0 <HAL_DAC_MspInit+0x14c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	f040 8088 	bne.w	80011d6 <HAL_DAC_MspInit+0x142>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 80010c6:	4a47      	ldr	r2, [pc, #284]	@ (80011e4 <HAL_DAC_MspInit+0x150>)
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 80010d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 80010d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f009 fa33 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_DAC_MspInit+0x60>
    {
      Error_Handler();
 80010f0:	f000 fbd2 	bl	8001898 <Error_Handler>
    }

    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010f4:	4b3c      	ldr	r3, [pc, #240]	@ (80011e8 <HAL_DAC_MspInit+0x154>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010fa:	4a3b      	ldr	r2, [pc, #236]	@ (80011e8 <HAL_DAC_MspInit+0x154>)
 80010fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001100:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001104:	4b38      	ldr	r3, [pc, #224]	@ (80011e8 <HAL_DAC_MspInit+0x154>)
 8001106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800110a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b35      	ldr	r3, [pc, #212]	@ (80011e8 <HAL_DAC_MspInit+0x154>)
 8001114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001118:	4a33      	ldr	r2, [pc, #204]	@ (80011e8 <HAL_DAC_MspInit+0x154>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001122:	4b31      	ldr	r3, [pc, #196]	@ (80011e8 <HAL_DAC_MspInit+0x154>)
 8001124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 8001130:	2310      	movs	r3, #16
 8001132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001146:	4619      	mov	r1, r3
 8001148:	4828      	ldr	r0, [pc, #160]	@ (80011ec <HAL_DAC_MspInit+0x158>)
 800114a:	f005 fa63 	bl	8006614 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* GPDMA1_REQUEST_DAC1_CH1 Init */
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800114e:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 8001150:	4a28      	ldr	r2, [pc, #160]	@ (80011f4 <HAL_DAC_MspInit+0x160>)
 8001152:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_DAC1_CH1;
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 8001156:	2202      	movs	r2, #2
 8001158:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001160:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 8001162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001166:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 800116a:	2208      	movs	r2, #8
 800116c:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 8001176:	2202      	movs	r2, #2
 8001178:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800117a:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 800117c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001180:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 800118a:	2201      	movs	r2, #1
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 8001190:	2201      	movs	r2, #1
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT1;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 8001196:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800119a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80011a8:	4811      	ldr	r0, [pc, #68]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 80011aa:	f004 f99f 	bl	80054ec <HAL_DMA_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_DAC_MspInit+0x124>
    {
      Error_Handler();
 80011b4:	f000 fb70 	bl	8001898 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle, DMA_Handle1, handle_GPDMA1_Channel1);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80011c4:	2110      	movs	r1, #16
 80011c6:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <HAL_DAC_MspInit+0x15c>)
 80011c8:	f004 fd4f 	bl	8005c6a <HAL_DMA_ConfigChannelAttributes>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_DAC_MspInit+0x142>
    {
      Error_Handler();
 80011d2:	f000 fb61 	bl	8001898 <Error_Handler>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80011d6:	bf00      	nop
 80011d8:	37e8      	adds	r7, #232	@ 0xe8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	46021800 	.word	0x46021800
 80011e4:	10008000 	.word	0x10008000
 80011e8:	46020c00 	.word	0x46020c00
 80011ec:	42020000 	.word	0x42020000
 80011f0:	20028754 	.word	0x20028754
 80011f4:	400200d0 	.word	0x400200d0

080011f8 <MX_DAC1_Start>:
}

/* USER CODE BEGIN 1 */
/* DAC1 start */
HAL_StatusTypeDef MX_DAC1_Start(uint32_t *pu32Data, uint32_t u32Length)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	return HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, pu32Data, u32Length, DAC_ALIGN_12B_R);
 8001202:	2300      	movs	r3, #0
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	2100      	movs	r1, #0
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <MX_DAC1_Start+0x24>)
 800120e:	f003 fcfb 	bl	8004c08 <HAL_DAC_Start_DMA>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20028740 	.word	0x20028740

08001220 <MX_DAC1_Stop>:
/* DAC1 stop */
HAL_StatusTypeDef MX_DAC1_Stop(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	return HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001224:	2100      	movs	r1, #0
 8001226:	4803      	ldr	r0, [pc, #12]	@ (8001234 <MX_DAC1_Stop+0x14>)
 8001228:	f003 fea8 	bl	8004f7c <HAL_DAC_Stop_DMA>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20028740 	.word	0x20028740

08001238 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_GPDMA1_Init+0x4c>)
 8001240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001244:	4a0f      	ldr	r2, [pc, #60]	@ (8001284 <MX_GPDMA1_Init+0x4c>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <MX_GPDMA1_Init+0x4c>)
 8001250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2105      	movs	r1, #5
 8001260:	201d      	movs	r0, #29
 8001262:	f003 fc87 	bl	8004b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001266:	201d      	movs	r0, #29
 8001268:	f003 fc9e 	bl	8004ba8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 5, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2105      	movs	r1, #5
 8001270:	201e      	movs	r0, #30
 8001272:	f003 fc7f 	bl	8004b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001276:	201e      	movs	r0, #30
 8001278:	f003 fc96 	bl	8004ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	46020c00 	.word	0x46020c00

08001288 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b82      	ldr	r3, [pc, #520]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a4:	4a80      	ldr	r2, [pc, #512]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ae:	4b7e      	ldr	r3, [pc, #504]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012bc:	4b7a      	ldr	r3, [pc, #488]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c2:	4a79      	ldr	r2, [pc, #484]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012cc:	4b76      	ldr	r3, [pc, #472]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b73      	ldr	r3, [pc, #460]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e0:	4a71      	ldr	r2, [pc, #452]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ea:	4b6f      	ldr	r3, [pc, #444]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b6b      	ldr	r3, [pc, #428]	@ (80014a8 <MX_GPIO_Init+0x220>)
 80012fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fe:	4a6a      	ldr	r2, [pc, #424]	@ (80014a8 <MX_GPIO_Init+0x220>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001308:	4b67      	ldr	r3, [pc, #412]	@ (80014a8 <MX_GPIO_Init+0x220>)
 800130a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	4b64      	ldr	r3, [pc, #400]	@ (80014a8 <MX_GPIO_Init+0x220>)
 8001318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131c:	4a62      	ldr	r2, [pc, #392]	@ (80014a8 <MX_GPIO_Init+0x220>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001326:	4b60      	ldr	r3, [pc, #384]	@ (80014a8 <MX_GPIO_Init+0x220>)
 8001328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_EN_GPIO_Port, WIFI_EN_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800133a:	485c      	ldr	r0, [pc, #368]	@ (80014ac <MX_GPIO_Init+0x224>)
 800133c:	f005 fb5a 	bl	80069f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, BAR_LED0_Pin|BAR_LED1_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2103      	movs	r1, #3
 8001344:	485a      	ldr	r0, [pc, #360]	@ (80014b0 <MX_GPIO_Init+0x228>)
 8001346:	f005 fb55 	bl	80069f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAR_LED2_Pin|EXT_SPI_NCS_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2118      	movs	r1, #24
 800134e:	4857      	ldr	r0, [pc, #348]	@ (80014ac <MX_GPIO_Init+0x224>)
 8001350:	f005 fb50 	bl	80069f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BAR_LED5_Pin|BAR_LED4_Pin|BAR_LED3_Pin, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2107      	movs	r1, #7
 8001358:	4856      	ldr	r0, [pc, #344]	@ (80014b4 <MX_GPIO_Init+0x22c>)
 800135a:	f005 fb4b 	bl	80069f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI_NCS_GPIO_Port, ACC_SPI_NCS_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2104      	movs	r1, #4
 8001362:	4855      	ldr	r0, [pc, #340]	@ (80014b8 <MX_GPIO_Init+0x230>)
 8001364:	f005 fb46 	bl	80069f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AUDIO_SHDWN_Pin|EXT_DIO0_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800136e:	4851      	ldr	r0, [pc, #324]	@ (80014b4 <MX_GPIO_Init+0x22c>)
 8001370:	f005 fb40 	bl	80069f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_DIO1_GPIO_Port, EXT_DIO1_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2108      	movs	r1, #8
 8001378:	484d      	ldr	r0, [pc, #308]	@ (80014b0 <MX_GPIO_Init+0x228>)
 800137a:	f005 fb3b 	bl	80069f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WIFI_RDY_Pin|WIFI_DRDY_Pin;
 800137e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4846      	ldr	r0, [pc, #280]	@ (80014ac <MX_GPIO_Init+0x224>)
 8001394:	f005 f93e 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin|BAR_LED2_Pin;
 8001398:	f248 0308 	movw	r3, #32776	@ 0x8008
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	483e      	ldr	r0, [pc, #248]	@ (80014ac <MX_GPIO_Init+0x224>)
 80013b2:	f005 f92f 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAR_LED0_Pin;
 80013b6:	2301      	movs	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ba:	2311      	movs	r3, #17
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BAR_LED0_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4838      	ldr	r0, [pc, #224]	@ (80014b0 <MX_GPIO_Init+0x228>)
 80013ce:	f005 f921 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = BAR_LED1_Pin|EXT_DIO1_Pin;
 80013d2:	230a      	movs	r3, #10
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4831      	ldr	r0, [pc, #196]	@ (80014b0 <MX_GPIO_Init+0x228>)
 80013ea:	f005 f913 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BAR_LED5_Pin|BAR_LED4_Pin|BAR_LED3_Pin|AUDIO_SHDWN_Pin
 80013ee:	f240 6307 	movw	r3, #1543	@ 0x607
 80013f2:	617b      	str	r3, [r7, #20]
                          |EXT_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	482b      	ldr	r0, [pc, #172]	@ (80014b4 <MX_GPIO_Init+0x22c>)
 8001408:	f005 f904 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = JOYSTICK_UP_Pin|JOYSTICK_LE_Pin;
 800140c:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4824      	ldr	r0, [pc, #144]	@ (80014b4 <MX_GPIO_Init+0x22c>)
 8001422:	f005 f8f7 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_SPI_NCS_Pin;
 8001426:	2310      	movs	r3, #16
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_SPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	481b      	ldr	r0, [pc, #108]	@ (80014ac <MX_GPIO_Init+0x224>)
 800143e:	f005 f8e9 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001442:	2302      	movs	r3, #2
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_GPIO_Init+0x234>)
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4818      	ldr	r0, [pc, #96]	@ (80014b8 <MX_GPIO_Init+0x230>)
 8001456:	f005 f8dd 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_SPI_NCS_Pin;
 800145a:	2304      	movs	r3, #4
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_SPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <MX_GPIO_Init+0x230>)
 8001472:	f005 f8cf 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOYSTICK_RI_Pin|JOYSTICK_DO_Pin;
 8001476:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4808      	ldr	r0, [pc, #32]	@ (80014ac <MX_GPIO_Init+0x224>)
 800148c:	f005 f8c2 	bl	8006614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2105      	movs	r1, #5
 8001494:	200c      	movs	r0, #12
 8001496:	f003 fb6d 	bl	8004b74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800149a:	200c      	movs	r0, #12
 800149c:	f003 fb84 	bl	8004ba8 <HAL_NVIC_EnableIRQ>

}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	@ 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	46020c00 	.word	0x46020c00
 80014ac:	42020800 	.word	0x42020800
 80014b0:	42021c00 	.word	0x42021c00
 80014b4:	42020000 	.word	0x42020000
 80014b8:	42020400 	.word	0x42020400
 80014bc:	10110000 	.word	0x10110000

080014c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001538 <MX_I2C1_Init+0x78>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014cc:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <MX_I2C1_Init+0x7c>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014d0:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014d8:	2201      	movs	r2, #1
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014dc:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fa:	480e      	ldr	r0, [pc, #56]	@ (8001534 <MX_I2C1_Init+0x74>)
 80014fc:	f005 face 	bl	8006a9c <HAL_I2C_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001506:	f000 f9c7 	bl	8001898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800150a:	2100      	movs	r1, #0
 800150c:	4809      	ldr	r0, [pc, #36]	@ (8001534 <MX_I2C1_Init+0x74>)
 800150e:	f006 f914 	bl	800773a <HAL_I2CEx_ConfigAnalogFilter>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001518:	f000 f9be 	bl	8001898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800151c:	2100      	movs	r1, #0
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_I2C1_Init+0x74>)
 8001520:	f006 f956 	bl	80077d0 <HAL_I2CEx_ConfigDigitalFilter>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 f9b5 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200287cc 	.word	0x200287cc
 8001538:	40005400 	.word	0x40005400
 800153c:	00303d5b 	.word	0x00303d5b

08001540 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <MX_I2C3_Init+0x74>)
 8001546:	4a1c      	ldr	r2, [pc, #112]	@ (80015b8 <MX_I2C3_Init+0x78>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800154a:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <MX_I2C3_Init+0x74>)
 800154c:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <MX_I2C3_Init+0x7c>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001550:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <MX_I2C3_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001556:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <MX_I2C3_Init+0x74>)
 8001558:	2201      	movs	r2, #1
 800155a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <MX_I2C3_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <MX_I2C3_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <MX_I2C3_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_I2C3_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MX_I2C3_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800157a:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <MX_I2C3_Init+0x74>)
 800157c:	f005 fa8e 	bl	8006a9c <HAL_I2C_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001586:	f000 f987 	bl	8001898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <MX_I2C3_Init+0x74>)
 800158e:	f006 f8d4 	bl	800773a <HAL_I2CEx_ConfigAnalogFilter>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001598:	f000 f97e 	bl	8001898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_I2C3_Init+0x74>)
 80015a0:	f006 f916 	bl	80077d0 <HAL_I2CEx_ConfigDigitalFilter>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015aa:	f000 f975 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20028820 	.word	0x20028820
 80015b8:	46002800 	.word	0x46002800
 80015bc:	00303d5b 	.word	0x00303d5b

080015c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0bc      	sub	sp, #240	@ 0xf0
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	22c0      	movs	r2, #192	@ 0xc0
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f016 fb5d 	bl	8017ca0 <memset>
  if(i2cHandle->Instance==I2C1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a55      	ldr	r2, [pc, #340]	@ (8001740 <HAL_I2C_MspInit+0x180>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d147      	bne.n	8001680 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015f0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4618      	mov	r0, r3
 8001608:	f008 ffa2 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001612:	f000 f941 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	4b4b      	ldr	r3, [pc, #300]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 8001618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800161c:	4a49      	ldr	r2, [pc, #292]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 8001628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EXT_I2C_SCL_Pin|EXT_I2C_SDA_Pin;
 8001634:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001638:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163c:	2312      	movs	r3, #18
 800163e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800164e:	2304      	movs	r3, #4
 8001650:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001658:	4619      	mov	r1, r3
 800165a:	483b      	ldr	r0, [pc, #236]	@ (8001748 <HAL_I2C_MspInit+0x188>)
 800165c:	f004 ffda 	bl	8006614 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001660:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 8001662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001666:	4a37      	ldr	r2, [pc, #220]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 8001668:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800166c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001670:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 8001672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800167e:	e05a      	b.n	8001736 <HAL_I2C_MspInit+0x176>
  else if(i2cHandle->Instance==I2C3)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a31      	ldr	r2, [pc, #196]	@ (800174c <HAL_I2C_MspInit+0x18c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d155      	bne.n	8001736 <HAL_I2C_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800168a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	4618      	mov	r0, r3
 80016a2:	f008 ff55 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80016ac:	f000 f8f4 	bl	8001898 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 80016b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b6:	4a23      	ldr	r2, [pc, #140]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c0:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 80016c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMP_I2C_SCL_Pin|TMP_I2C_SDA_Pin;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d4:	2312      	movs	r3, #18
 80016d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016e6:	2304      	movs	r3, #4
 80016e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016f0:	4619      	mov	r1, r3
 80016f2:	4817      	ldr	r0, [pc, #92]	@ (8001750 <HAL_I2C_MspInit+0x190>)
 80016f4:	f004 ff8e 	bl	8006614 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 80016fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016fe:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001704:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_I2C_MspInit+0x184>)
 800170a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800170e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 6, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2106      	movs	r1, #6
 800171a:	2058      	movs	r0, #88	@ 0x58
 800171c:	f003 fa2a 	bl	8004b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001720:	2058      	movs	r0, #88	@ 0x58
 8001722:	f003 fa41 	bl	8004ba8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 6, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2106      	movs	r1, #6
 800172a:	2059      	movs	r0, #89	@ 0x59
 800172c:	f003 fa22 	bl	8004b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001730:	2059      	movs	r0, #89	@ 0x59
 8001732:	f003 fa39 	bl	8004ba8 <HAL_NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	37f0      	adds	r7, #240	@ 0xf0
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40005400 	.word	0x40005400
 8001744:	46020c00 	.word	0x46020c00
 8001748:	42020400 	.word	0x42020400
 800174c:	46002800 	.word	0x46002800
 8001750:	42020800 	.word	0x42020800

08001754 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001758:	2000      	movs	r0, #0
 800175a:	f006 f885 	bl	8007868 <HAL_ICACHE_ConfigAssociativityMode>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001764:	f000 f898 	bl	8001898 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001768:	f006 f89e 	bl	80078a8 <HAL_ICACHE_Enable>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001772:	f000 f891 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}

0800177a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177e:	f000 fffb 	bl	8002778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001782:	f000 f826 	bl	80017d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001786:	f7ff fd7f 	bl	8001288 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800178a:	f7ff fd55 	bl	8001238 <MX_GPDMA1_Init>
  MX_DAC1_Init();
 800178e:	f7ff fc39 	bl	8001004 <MX_DAC1_Init>
  MX_I2C1_Init();
 8001792:	f7ff fe95 	bl	80014c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001796:	f000 f885 	bl	80018a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800179a:	f000 f8f1 	bl	8001980 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800179e:	f000 fcff 	bl	80021a0 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80017a2:	f7ff fecd 	bl	8001540 <MX_I2C3_Init>
  MX_UART5_Init();
 80017a6:	f000 fcaf 	bl	8002108 <MX_UART5_Init>
  MX_ICACHE_Init();
 80017aa:	f7ff ffd3 	bl	8001754 <MX_ICACHE_Init>
  MX_ADC1_Init();
 80017ae:	f7fe fef3 	bl	8000598 <MX_ADC1_Init>
  MX_TOUCHSENSING_Init();
 80017b2:	f015 fe31 	bl	8017418 <MX_TOUCHSENSING_Init>
  MX_TSC_Init();
 80017b6:	f000 fbd7 	bl	8001f68 <MX_TSC_Init>
  MX_TIM2_Init();
 80017ba:	f000 fb53 	bl	8001e64 <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017be:	f000 fe31 	bl	8002424 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017c2:	f012 fa97 	bl	8013cf4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80017c6:	f7ff fa07 	bl	8000bd8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017ca:	f012 fab9 	bl	8013d40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ce:	bf00      	nop
 80017d0:	e7fd      	b.n	80017ce <main+0x54>

080017d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b09e      	sub	sp, #120	@ 0x78
 80017d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	2260      	movs	r2, #96	@ 0x60
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f016 fa5d 	bl	8017ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e6:	463b      	mov	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80017f6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80017fa:	f007 fb19 	bl	8008e30 <HAL_PWREx_ControlVoltageScaling>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001804:	f000 f848 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001808:	232a      	movs	r3, #42	@ 0x2a
 800180a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001816:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001818:	2310      	movs	r3, #16
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800181c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001826:	2300      	movs	r3, #0
 8001828:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	4618      	mov	r0, r3
 8001830:	f007 fbaa 	bl	8008f88 <HAL_RCC_OscConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800183a:	f000 f82d 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	231f      	movs	r3, #31
 8001840:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001842:	2301      	movs	r3, #1
 8001844:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f008 fa70 	bl	8009d40 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001866:	f000 f817 	bl	8001898 <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3778      	adds	r7, #120	@ 0x78
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001886:	f000 ffa5 	bl	80027d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40012c00 	.word	0x40012c00

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <Error_Handler+0x8>

080018a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018b4:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018b6:	4a31      	ldr	r2, [pc, #196]	@ (800197c <MX_SPI1_Init+0xd8>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018ca:	2203      	movs	r2, #3
 80018cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018e2:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e8:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ee:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f4:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80018fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <MX_SPI1_Init+0xd4>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001900:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <MX_SPI1_Init+0xd4>)
 8001902:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001906:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <MX_SPI1_Init+0xd4>)
 800190a:	2200      	movs	r2, #0
 800190c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_SPI1_Init+0xd4>)
 8001910:	2200      	movs	r2, #0
 8001912:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <MX_SPI1_Init+0xd4>)
 8001916:	2200      	movs	r2, #0
 8001918:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <MX_SPI1_Init+0xd4>)
 800191c:	2200      	movs	r2, #0
 800191e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <MX_SPI1_Init+0xd4>)
 8001922:	2200      	movs	r2, #0
 8001924:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <MX_SPI1_Init+0xd4>)
 8001928:	2200      	movs	r2, #0
 800192a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <MX_SPI1_Init+0xd4>)
 800192e:	2200      	movs	r2, #0
 8001930:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_SPI1_Init+0xd4>)
 8001934:	2200      	movs	r2, #0
 8001936:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <MX_SPI1_Init+0xd4>)
 800193a:	2200      	movs	r2, #0
 800193c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800193e:	480e      	ldr	r0, [pc, #56]	@ (8001978 <MX_SPI1_Init+0xd4>)
 8001940:	f00b fae0 	bl	800cf04 <HAL_SPI_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800194a:	f7ff ffa5 	bl	8001898 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001952:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	@ (8001978 <MX_SPI1_Init+0xd4>)
 8001962:	f00b fec0 	bl	800d6e6 <HAL_SPIEx_SetConfigAutonomousMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 800196c:	f7ff ff94 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20028874 	.word	0x20028874
 800197c:	40013000 	.word	0x40013000

08001980 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001992:	4a32      	ldr	r2, [pc, #200]	@ (8001a5c <MX_SPI2_Init+0xdc>)
 8001994:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001996:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001998:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800199c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800199e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019a6:	2203      	movs	r2, #3
 80019a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b2:	4b29      	ldr	r3, [pc, #164]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019b8:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c6:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d2:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019da:	2207      	movs	r2, #7
 80019dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019de:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019f8:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019fe:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a1c:	480e      	ldr	r0, [pc, #56]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001a1e:	f00b fa71 	bl	800cf04 <HAL_SPI_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8001a28:	f7ff ff36 	bl	8001898 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001a30:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <MX_SPI2_Init+0xd8>)
 8001a40:	f00b fe51 	bl	800d6e6 <HAL_SPIEx_SetConfigAutonomousMode>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8001a4a:	f7ff ff25 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20028904 	.word	0x20028904
 8001a5c:	40003800 	.word	0x40003800

08001a60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0bc      	sub	sp, #240	@ 0xf0
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	22c0      	movs	r2, #192	@ 0xc0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f016 f90d 	bl	8017ca0 <memset>
  if(spiHandle->Instance==SPI1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a52      	ldr	r2, [pc, #328]	@ (8001bd4 <HAL_SPI_MspInit+0x174>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d147      	bne.n	8001b20 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001a90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001a9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001aa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f008 fd51 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001ab4:	f7ff fef0 	bl	8001898 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ab8:	4b47      	ldr	r3, [pc, #284]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001aba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001abe:	4a46      	ldr	r2, [pc, #280]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001ac0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ac4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ac8:	4b43      	ldr	r3, [pc, #268]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001aca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ace:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001adc:	4a3e      	ldr	r2, [pc, #248]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = EXT_SPI_CLK_Pin|EXT_SPI_MISO_Pin|EXT_SPI_MOSI_Pin;
 8001af4:	23e0      	movs	r3, #224	@ 0xe0
 8001af6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b0c:	2305      	movs	r3, #5
 8001b0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b16:	4619      	mov	r1, r3
 8001b18:	4830      	ldr	r0, [pc, #192]	@ (8001bdc <HAL_SPI_MspInit+0x17c>)
 8001b1a:	f004 fd7b 	bl	8006614 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b1e:	e054      	b.n	8001bca <HAL_SPI_MspInit+0x16a>
  else if(spiHandle->Instance==SPI2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2e      	ldr	r2, [pc, #184]	@ (8001be0 <HAL_SPI_MspInit+0x180>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d14f      	bne.n	8001bca <HAL_SPI_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001b36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3e:	f107 0318 	add.w	r3, r7, #24
 8001b42:	4618      	mov	r0, r3
 8001b44:	f008 fd04 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 8001b4e:	f7ff fea3 	bl	8001898 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b58:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b62:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b76:	4a18      	ldr	r2, [pc, #96]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_SPI_MspInit+0x178>)
 8001b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACC_SPI_CLK_Pin|ACC_SPI_MISO_Pin|ACC_SPI_MOSI_Pin;
 8001b8e:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ba8:	2305      	movs	r3, #5
 8001baa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480b      	ldr	r0, [pc, #44]	@ (8001be4 <HAL_SPI_MspInit+0x184>)
 8001bb6:	f004 fd2d 	bl	8006614 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	203c      	movs	r0, #60	@ 0x3c
 8001bc0:	f002 ffd8 	bl	8004b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bc4:	203c      	movs	r0, #60	@ 0x3c
 8001bc6:	f002 ffef 	bl	8004ba8 <HAL_NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	37f0      	adds	r7, #240	@ 0xf0
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40013000 	.word	0x40013000
 8001bd8:	46020c00 	.word	0x46020c00
 8001bdc:	42020000 	.word	0x42020000
 8001be0:	40003800 	.word	0x40003800
 8001be4:	42020400 	.word	0x42020400

08001be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_MspInit+0x44>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <HAL_MspInit+0x44>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_MspInit+0x44>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001c0c:	f007 f9ac 	bl	8008f68 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	210f      	movs	r1, #15
 8001c14:	f06f 0001 	mvn.w	r0, #1
 8001c18:	f002 ffac 	bl	8004b74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 fe2b 	bl	8002878 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	46020c00 	.word	0x46020c00

08001c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08e      	sub	sp, #56	@ 0x38
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c40:	4b2e      	ldr	r3, [pc, #184]	@ (8001cfc <HAL_InitTick+0xcc>)
 8001c42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c46:	4a2d      	ldr	r2, [pc, #180]	@ (8001cfc <HAL_InitTick+0xcc>)
 8001c48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c4c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_InitTick+0xcc>)
 8001c52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c5e:	f107 0210 	add.w	r2, r7, #16
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f008 fbb3 	bl	800a3d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c6e:	f008 fb89 	bl	800a384 <HAL_RCC_GetPCLK2Freq>
 8001c72:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c76:	4a22      	ldr	r2, [pc, #136]	@ (8001d00 <HAL_InitTick+0xd0>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	0c9b      	lsrs	r3, r3, #18
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <HAL_InitTick+0xd4>)
 8001c84:	4a20      	ldr	r2, [pc, #128]	@ (8001d08 <HAL_InitTick+0xd8>)
 8001c86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c88:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <HAL_InitTick+0xd4>)
 8001c8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c8e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c90:	4a1c      	ldr	r2, [pc, #112]	@ (8001d04 <HAL_InitTick+0xd4>)
 8001c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c94:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c96:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <HAL_InitTick+0xd4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <HAL_InitTick+0xd4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001ca2:	4818      	ldr	r0, [pc, #96]	@ (8001d04 <HAL_InitTick+0xd4>)
 8001ca4:	f00b fd60 	bl	800d768 <HAL_TIM_Base_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001cae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d118      	bne.n	8001ce8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001cb6:	4813      	ldr	r0, [pc, #76]	@ (8001d04 <HAL_InitTick+0xd4>)
 8001cb8:	f00b fe6e 	bl	800d998 <HAL_TIM_Base_Start_IT>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d808      	bhi.n	8001ce2 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	202a      	movs	r0, #42	@ 0x2a
 8001cd6:	f002 ff4d 	bl	8004b74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cda:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <HAL_InitTick+0xdc>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e002      	b.n	8001ce8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ce8:	202a      	movs	r0, #42	@ 0x2a
 8001cea:	f002 ff5d 	bl	8004ba8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001cee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3738      	adds	r7, #56	@ 0x38
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	46020c00 	.word	0x46020c00
 8001d00:	431bde83 	.word	0x431bde83
 8001d04:	20028994 	.word	0x20028994
 8001d08:	40012c00 	.word	0x40012c00
 8001d0c:	20000054 	.word	0x20000054

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <NMI_Handler+0x4>

08001d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <MemManage_Handler+0x4>

08001d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <BusFault_Handler+0x4>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <UsageFault_Handler+0x4>

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f004 fe6a 	bl	8006a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001d5a:	f003 fdfc 	bl	8005956 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200002a0 	.word	0x200002a0

08001d68 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001d6e:	f003 fdf2 	bl	8005956 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20028754 	.word	0x20028754

08001d7c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d80:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <TIM1_UP_IRQHandler+0x10>)
 8001d82:	f00b fea9 	bl	800dad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20028994 	.word	0x20028994

08001d90 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <SPI2_IRQHandler+0x10>)
 8001d96:	f00b f9cb 	bl	800d130 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20028904 	.word	0x20028904

08001da4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <UART5_IRQHandler+0x10>)
 8001daa:	f00c fca3 	bl	800e6f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20028a70 	.word	0x20028a70

08001db8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <OTG_FS_IRQHandler+0x10>)
 8001dbe:	f005 fed6 	bl	8007b6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20028e68 	.word	0x20028e68

08001dcc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <I2C3_EV_IRQHandler+0x10>)
 8001dd2:	f004 fefe 	bl	8006bd2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20028820 	.word	0x20028820

08001de0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <I2C3_ER_IRQHandler+0x10>)
 8001de6:	f004 ff0e 	bl	8006c06 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20028820 	.word	0x20028820

08001df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001df8:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <SystemInit+0x68>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfe:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <SystemInit+0x68>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001e08:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <SystemInit+0x6c>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <SystemInit+0x6c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <SystemInit+0x6c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <SystemInit+0x6c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <SystemInit+0x6c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0e      	ldr	r2, [pc, #56]	@ (8001e60 <SystemInit+0x6c>)
 8001e26:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001e2a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <SystemInit+0x6c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <SystemInit+0x6c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <SystemInit+0x6c>)
 8001e3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <SystemInit+0x6c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <SystemInit+0x68>)
 8001e4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e4e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00
 8001e60:	46020c00 	.word	0x46020c00

08001e64 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001e84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001e98:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001e9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eaa:	4814      	ldr	r0, [pc, #80]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001eac:	f00b fc5c 	bl	800d768 <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001eb6:	f7ff fcef 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ebe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480d      	ldr	r0, [pc, #52]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001ec8:	f00b ff56 	bl	800dd78 <HAL_TIM_ConfigClockSource>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ed2:	f7ff fce1 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4806      	ldr	r0, [pc, #24]	@ (8001efc <MX_TIM2_Init+0x98>)
 8001ee4:	f00c fa08 	bl	800e2f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001eee:	f7ff fcd3 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200289e0 	.word	0x200289e0

08001f00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <HAL_TIM_Base_MspInit+0x3c>)
 8001f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f18:	4a08      	ldr	r2, [pc, #32]	@ (8001f3c <HAL_TIM_Base_MspInit+0x3c>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_TIM_Base_MspInit+0x3c>)
 8001f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	46020c00 	.word	0x46020c00

08001f40 <MX_TIM2_Start>:
}

/* USER CODE BEGIN 1 */
/* TIM2 start function */
HAL_StatusTypeDef MX_TIM2_Start(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim2);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <MX_TIM2_Start+0x10>)
 8001f46:	f00b fc67 	bl	800d818 <HAL_TIM_Base_Start>
 8001f4a:	4603      	mov	r3, r0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200289e0 	.word	0x200289e0

08001f54 <MX_TIM2_Stop>:
/* TIM2 stop function */
HAL_StatusTypeDef MX_TIM2_Stop(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Stop(&htim2);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <MX_TIM2_Stop+0x10>)
 8001f5a:	f00b fcf5 	bl	800d948 <HAL_TIM_Base_Stop>
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200289e0 	.word	0x200289e0

08001f68 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe8 <MX_TSC_Init+0x80>)
 8001f70:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_16CYCLES;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001f74:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 8001f78:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_16CYCLES;
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001f7c:	f04f 6270 	mov.w	r2, #251658240	@ 0xf000000
 8001f80:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = ENABLE;
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 32;
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV1;
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001f9c:	22a0      	movs	r2, #160	@ 0xa0
 8001f9e:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO2|TSC_GROUP2_IO2|TSC_GROUP3_IO3|TSC_GROUP4_IO2;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001fbc:	f242 4222 	movw	r2, #9250	@ 0x2422
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  htsc.Init.ShieldIOs = 0;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO1|TSC_GROUP2_IO1|TSC_GROUP3_IO2|TSC_GROUP4_IO1;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001fca:	f241 2211 	movw	r2, #4625	@ 0x1211
 8001fce:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <MX_TSC_Init+0x7c>)
 8001fd2:	f00c fa99 	bl	800e508 <HAL_TSC_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TSC_Init+0x78>
  {
    Error_Handler();
 8001fdc:	f7ff fc5c 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20028a2c 	.word	0x20028a2c
 8001fe8:	40024000 	.word	0x40024000

08001fec <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3b      	ldr	r2, [pc, #236]	@ (80020f8 <HAL_TSC_MspInit+0x10c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d170      	bne.n	80020f0 <HAL_TSC_MspInit+0x104>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 800200e:	4b3b      	ldr	r3, [pc, #236]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002014:	4a39      	ldr	r2, [pc, #228]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800201e:	4b37      	ldr	r3, [pc, #220]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	4b33      	ldr	r3, [pc, #204]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 800202e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002032:	4a32      	ldr	r2, [pc, #200]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800203c:	4b2f      	ldr	r3, [pc, #188]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 800203e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 800204c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002050:	4a2a      	ldr	r2, [pc, #168]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_TSC_MspInit+0x110>)
 800205c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> TSC_G3_IO2
    PC11     ------> TSC_G3_IO3
    PB4 (NJTRST)     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    */
    GPIO_InitStruct.Pin = TS_G1_CS_Pin|TS_G2_CS_Pin;
 8002068:	f241 0310 	movw	r3, #4112	@ 0x1010
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206e:	2312      	movs	r3, #18
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 800207a:	2309      	movs	r3, #9
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	481e      	ldr	r0, [pc, #120]	@ (8002100 <HAL_TSC_MspInit+0x114>)
 8002086:	f004 fac5 	bl	8006614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TS_G1_IO_Pin|TS_G2_IO_Pin;
 800208a:	f242 0320 	movw	r3, #8224	@ 0x2020
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 800209c:	2309      	movs	r3, #9
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4816      	ldr	r0, [pc, #88]	@ (8002100 <HAL_TSC_MspInit+0x114>)
 80020a8:	f004 fab4 	bl	8006614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TS_G4_CS_Pin|TS_G3_CS_Pin;
 80020ac:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b2:	2312      	movs	r3, #18
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80020be:	2309      	movs	r3, #9
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	480e      	ldr	r0, [pc, #56]	@ (8002104 <HAL_TSC_MspInit+0x118>)
 80020ca:	f004 faa3 	bl	8006614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TS_G4_IO_Pin|TS_G3_IO_Pin;
 80020ce:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 80020d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80020e0:	2309      	movs	r3, #9
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	4806      	ldr	r0, [pc, #24]	@ (8002104 <HAL_TSC_MspInit+0x118>)
 80020ec:	f004 fa92 	bl	8006614 <HAL_GPIO_Init>

  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	@ 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40024000 	.word	0x40024000
 80020fc:	46020c00 	.word	0x46020c00
 8002100:	42020400 	.word	0x42020400
 8002104:	42020800 	.word	0x42020800

08002108 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <MX_UART5_Init+0x90>)
 800210e:	4a23      	ldr	r2, [pc, #140]	@ (800219c <MX_UART5_Init+0x94>)
 8002110:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <MX_UART5_Init+0x90>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <MX_UART5_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <MX_UART5_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002126:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <MX_UART5_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b1a      	ldr	r3, [pc, #104]	@ (8002198 <MX_UART5_Init+0x90>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <MX_UART5_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <MX_UART5_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <MX_UART5_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <MX_UART5_Init+0x90>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <MX_UART5_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002150:	4811      	ldr	r0, [pc, #68]	@ (8002198 <MX_UART5_Init+0x90>)
 8002152:	f00c fa7e 	bl	800e652 <HAL_UART_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800215c:	f7ff fb9c 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002160:	2100      	movs	r1, #0
 8002162:	480d      	ldr	r0, [pc, #52]	@ (8002198 <MX_UART5_Init+0x90>)
 8002164:	f00d f9ef 	bl	800f546 <HAL_UARTEx_SetTxFifoThreshold>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800216e:	f7ff fb93 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002172:	2100      	movs	r1, #0
 8002174:	4808      	ldr	r0, [pc, #32]	@ (8002198 <MX_UART5_Init+0x90>)
 8002176:	f00d fa24 	bl	800f5c2 <HAL_UARTEx_SetRxFifoThreshold>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002180:	f7ff fb8a 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <MX_UART5_Init+0x90>)
 8002186:	f00d f9a5 	bl	800f4d4 <HAL_UARTEx_DisableFifoMode>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002190:	f7ff fb82 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20028a70 	.word	0x20028a70
 800219c:	40005000 	.word	0x40005000

080021a0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a4:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021a6:	4a23      	ldr	r2, [pc, #140]	@ (8002234 <MX_USART1_UART_Init+0x94>)
 80021a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021aa:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d6:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e2:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021e8:	4811      	ldr	r0, [pc, #68]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021ea:	f00c fa32 	bl	800e652 <HAL_UART_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021f4:	f7ff fb50 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f8:	2100      	movs	r1, #0
 80021fa:	480d      	ldr	r0, [pc, #52]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 80021fc:	f00d f9a3 	bl	800f546 <HAL_UARTEx_SetTxFifoThreshold>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002206:	f7ff fb47 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220a:	2100      	movs	r1, #0
 800220c:	4808      	ldr	r0, [pc, #32]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 800220e:	f00d f9d8 	bl	800f5c2 <HAL_UARTEx_SetRxFifoThreshold>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002218:	f7ff fb3e 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	@ (8002230 <MX_USART1_UART_Init+0x90>)
 800221e:	f00d f959 	bl	800f4d4 <HAL_UARTEx_DisableFifoMode>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002228:	f7ff fb36 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20028b04 	.word	0x20028b04
 8002234:	40013800 	.word	0x40013800

08002238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0be      	sub	sp, #248	@ 0xf8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002250:	f107 0320 	add.w	r3, r7, #32
 8002254:	22c0      	movs	r2, #192	@ 0xc0
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f015 fd21 	bl	8017ca0 <memset>
  if(uartHandle->Instance==UART5)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a62      	ldr	r2, [pc, #392]	@ (80023ec <HAL_UART_MspInit+0x1b4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d173      	bne.n	8002350 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002268:	f04f 0210 	mov.w	r2, #16
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	4618      	mov	r0, r3
 8002280:	f008 f966 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800228a:	f7ff fb05 	bl	8001898 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800228e:	4b58      	ldr	r3, [pc, #352]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 8002290:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002294:	4a56      	ldr	r2, [pc, #344]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 8002296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800229a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800229e:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80022a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ac:	4b50      	ldr	r3, [pc, #320]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80022ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022b2:	4a4f      	ldr	r2, [pc, #316]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022bc:	4b4c      	ldr	r3, [pc, #304]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80022be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ca:	4b49      	ldr	r3, [pc, #292]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80022cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022d0:	4a47      	ldr	r2, [pc, #284]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022da:	4b45      	ldr	r3, [pc, #276]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = WIFI_UART_TX_Pin;
 80022e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002302:	2308      	movs	r3, #8
 8002304:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(WIFI_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800230c:	4619      	mov	r1, r3
 800230e:	4839      	ldr	r0, [pc, #228]	@ (80023f4 <HAL_UART_MspInit+0x1bc>)
 8002310:	f004 f980 	bl	8006614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin;
 8002314:	2304      	movs	r3, #4
 8002316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800232c:	2308      	movs	r3, #8
 800232e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(WIFI_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002336:	4619      	mov	r1, r3
 8002338:	482f      	ldr	r0, [pc, #188]	@ (80023f8 <HAL_UART_MspInit+0x1c0>)
 800233a:	f004 f96b 	bl	8006614 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2105      	movs	r1, #5
 8002342:	2041      	movs	r0, #65	@ 0x41
 8002344:	f002 fc16 	bl	8004b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002348:	2041      	movs	r0, #65	@ 0x41
 800234a:	f002 fc2d 	bl	8004ba8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800234e:	e049      	b.n	80023e4 <HAL_UART_MspInit+0x1ac>
  else if(uartHandle->Instance==USART1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a29      	ldr	r2, [pc, #164]	@ (80023fc <HAL_UART_MspInit+0x1c4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d144      	bne.n	80023e4 <HAL_UART_MspInit+0x1ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800235a:	f04f 0201 	mov.w	r2, #1
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002366:	2300      	movs	r3, #0
 8002368:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236a:	f107 0320 	add.w	r3, r7, #32
 800236e:	4618      	mov	r0, r3
 8002370:	f008 f8ee 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_UART_MspInit+0x146>
      Error_Handler();
 800237a:	f7ff fa8d 	bl	8001898 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800237e:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 8002380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002384:	4a1a      	ldr	r2, [pc, #104]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 8002386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800238a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800238e:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 8002390:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 800239e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023a2:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023ac:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <HAL_UART_MspInit+0x1b8>)
 80023ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXT_UART_TX_Pin|EXT_UART_RX_Pin;
 80023ba:	23c0      	movs	r3, #192	@ 0xc0
 80023bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d2:	2307      	movs	r3, #7
 80023d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80023dc:	4619      	mov	r1, r3
 80023de:	4808      	ldr	r0, [pc, #32]	@ (8002400 <HAL_UART_MspInit+0x1c8>)
 80023e0:	f004 f918 	bl	8006614 <HAL_GPIO_Init>
}
 80023e4:	bf00      	nop
 80023e6:	37f8      	adds	r7, #248	@ 0xf8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40005000 	.word	0x40005000
 80023f0:	46020c00 	.word	0x46020c00
 80023f4:	42020800 	.word	0x42020800
 80023f8:	42020c00 	.word	0x42020c00
 80023fc:	40013800 	.word	0x40013800
 8002400:	42020400 	.word	0x42020400

08002404 <MX_USB_OTG_FS_PCD_Private_PushBytes>:
#include "usbd_desc.h"
#include "usbd_cdc.h"
#include "usbd_cdc_if.h"

void MX_USB_OTG_FS_PCD_Private_PushBytes(uint8_t *pu8Data, uint16_t u16Length)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
	CBUFFER_Push(CBUFFER_USB_RX, pu8Data, u16Length);
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	461a      	mov	r2, r3
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	2000      	movs	r0, #0
 8002418:	f7fe fd88 	bl	8000f2c <CBUFFER_Push>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_OTG_FS_Init 0 */
  /* Init circular buffer */
  CBUFFER_Init(CBUFFER_USB_RX);
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fd39 	bl	8000ea0 <CBUFFER_Init>

  /* Unlink previous class resources */
  hUsbDeviceFS.pClass = NULL;
 800242e:	4b39      	ldr	r3, [pc, #228]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002430:	2200      	movs	r2, #0
 8002432:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  hUsbDeviceFS.pUserData = NULL;
 8002436:	4b37      	ldr	r3, [pc, #220]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002438:	2200      	movs	r2, #0
 800243a:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  hUsbDeviceFS.pConfDesc = NULL;
 800243e:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002440:	2200      	movs	r2, #0
 8002442:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  hUsbDeviceFS.pDesc = &CDC_Desc;
 8002446:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002448:	4a33      	ldr	r2, [pc, #204]	@ (8002518 <MX_USB_OTG_FS_PCD_Init+0xf4>)
 800244a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

  /* Set Device initial State */
  hUsbDeviceFS.dev_state = USBD_STATE_DEFAULT;
 800244e:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002450:	2201      	movs	r2, #1
 8002452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  hUsbDeviceFS.id = 0;
 8002456:	4b2f      	ldr	r3, [pc, #188]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.pData = &hUsbDeviceFS;
 800245c:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 800245e:	4a2d      	ldr	r2, [pc, #180]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002460:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  hUsbDeviceFS.pData = &hpcd_USB_OTG_FS;
 8002464:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002466:	4a2d      	ldr	r2, [pc, #180]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 8002468:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
  /* Init Device Library */
  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 800246e:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <MX_USB_OTG_FS_PCD_Init+0xfc>)
 8002470:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 8002474:	2206      	movs	r2, #6
 8002476:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002478:	4b28      	ldr	r3, [pc, #160]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 800247a:	2202      	movs	r2, #2
 800247c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800247e:	4b27      	ldr	r3, [pc, #156]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 8002480:	2202      	movs	r2, #2
 8002482:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002484:	4b25      	ldr	r3, [pc, #148]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800248a:	4b24      	ldr	r3, [pc, #144]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002490:	4b22      	ldr	r3, [pc, #136]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 8002498:	2200      	movs	r2, #0
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800249c:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80024a2:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80024a8:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024ae:	481b      	ldr	r0, [pc, #108]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 80024b0:	f005 fa0a 	bl	80078c8 <HAL_PCD_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_USB_OTG_FS_PCD_Init+0x9a>
  {
    Error_Handler();
 80024ba:	f7ff f9ed 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x100);
 80024be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024c2:	4816      	ldr	r0, [pc, #88]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 80024c4:	f006 fc73 	bl	8008dae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x10);
 80024c8:	2210      	movs	r2, #16
 80024ca:	2100      	movs	r1, #0
 80024cc:	4813      	ldr	r0, [pc, #76]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 80024ce:	f006 fc27 	bl	8008d20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x10);
 80024d2:	2210      	movs	r2, #16
 80024d4:	2101      	movs	r1, #1
 80024d6:	4811      	ldr	r0, [pc, #68]	@ (800251c <MX_USB_OTG_FS_PCD_Init+0xf8>)
 80024d8:	f006 fc22 	bl	8008d20 <HAL_PCDEx_SetTxFiFo>

  /* Add supported class and start the library */
  if (USBD_RegisterClass(&hUsbDeviceFS, USBD_CDC_CLASS) != USBD_OK) {
 80024dc:	4911      	ldr	r1, [pc, #68]	@ (8002524 <MX_USB_OTG_FS_PCD_Init+0x100>)
 80024de:	480d      	ldr	r0, [pc, #52]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 80024e0:	f010 fa64 	bl	80129ac <USBD_RegisterClass>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_USB_OTG_FS_PCD_Init+0xca>
	  Error_Handler();
 80024ea:	f7ff f9d5 	bl	8001898 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_fops) != USBD_OK) {
 80024ee:	490e      	ldr	r1, [pc, #56]	@ (8002528 <MX_USB_OTG_FS_PCD_Init+0x104>)
 80024f0:	4808      	ldr	r0, [pc, #32]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 80024f2:	f010 f9e5 	bl	80128c0 <USBD_CDC_RegisterInterface>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_USB_OTG_FS_PCD_Init+0xdc>
	  Error_Handler();
 80024fc:	f7ff f9cc 	bl	8001898 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8002500:	4804      	ldr	r0, [pc, #16]	@ (8002514 <MX_USB_OTG_FS_PCD_Init+0xf0>)
 8002502:	f010 fa7a 	bl	80129fa <USBD_Start>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_USB_OTG_FS_PCD_Init+0xec>
	  Error_Handler();
 800250c:	f7ff f9c4 	bl	8001898 <Error_Handler>
  }
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20028b98 	.word	0x20028b98
 8002518:	200001a8 	.word	0x200001a8
 800251c:	20028e68 	.word	0x20028e68
 8002520:	42040000 	.word	0x42040000
 8002524:	20000068 	.word	0x20000068
 8002528:	20000194 	.word	0x20000194

0800252c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0da      	sub	sp, #360	@ 0x168
 8002530:	af00      	add	r7, sp, #0
 8002532:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002536:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800253a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800254c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002550:	22c0      	movs	r2, #192	@ 0xc0
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f015 fba3 	bl	8017ca0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800255a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800255e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6c      	ldr	r2, [pc, #432]	@ (8002718 <HAL_PCD_MspInit+0x1ec>)
 8002568:	4293      	cmp	r3, r2
 800256a:	f040 80d0 	bne.w	800270e <HAL_PCD_MspInit+0x1e2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002572:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002576:	4618      	mov	r0, r3
 8002578:	2360      	movs	r3, #96	@ 0x60
 800257a:	461a      	mov	r2, r3
 800257c:	2100      	movs	r1, #0
 800257e:	f015 fb8f 	bl	8017ca0 <memset>
    RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8002582:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	615a      	str	r2, [r3, #20]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8002594:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002598:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800259c:	2220      	movs	r2, #32
 800259e:	601a      	str	r2, [r3, #0]
  	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80025a0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025a4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025ae:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025b6:	2200      	movs	r2, #0
 80025b8:	639a      	str	r2, [r3, #56]	@ 0x38

  	if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4618      	mov	r0, r3
 80025c0:	f006 fce2 	bl	8008f88 <HAL_RCC_OscConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_PCD_MspInit+0xa2>
  	{
  	  Error_Handler();
 80025ca:	f7ff f965 	bl	8001898 <Error_Handler>
  	}
  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80025ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80025e4:	4618      	mov	r0, r3
 80025e6:	f007 ffb3 	bl	800a550 <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_PCD_MspInit+0xc8>
    {
      Error_Handler();
 80025f0:	f7ff f952 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b49      	ldr	r3, [pc, #292]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 80025f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025fa:	4a48      	ldr	r2, [pc, #288]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002604:	4b45      	ldr	r3, [pc, #276]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 8002606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002610:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002612:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002616:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800262c:	230a      	movs	r3, #10
 800262e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002636:	4619      	mov	r1, r3
 8002638:	4839      	ldr	r0, [pc, #228]	@ (8002720 <HAL_PCD_MspInit+0x1f4>)
 800263a:	f003 ffeb 	bl	8006614 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800263e:	4b37      	ldr	r3, [pc, #220]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 8002640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002644:	4a35      	ldr	r2, [pc, #212]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 8002646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800264a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800264e:	4b33      	ldr	r3, [pc, #204]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002658:	673b      	str	r3, [r7, #112]	@ 0x70
 800265a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265c:	4b2f      	ldr	r3, [pc, #188]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 800265e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d119      	bne.n	800269e <HAL_PCD_MspInit+0x172>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b2c      	ldr	r3, [pc, #176]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 800266c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002670:	4a2a      	ldr	r2, [pc, #168]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800267a:	4b28      	ldr	r3, [pc, #160]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 800267c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
      HAL_PWREx_EnableVddUSB();
 8002688:	f006 fc5e 	bl	8008f48 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	4b23      	ldr	r3, [pc, #140]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 800268e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002692:	4a22      	ldr	r2, [pc, #136]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800269c:	e001      	b.n	80026a2 <HAL_PCD_MspInit+0x176>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800269e:	f006 fc53 	bl	8008f48 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2105      	movs	r1, #5
 80026a6:	2049      	movs	r0, #73	@ 0x49
 80026a8:	f002 fa64 	bl	8004b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80026ac:	2049      	movs	r0, #73	@ 0x49
 80026ae:	f002 fa7b 	bl	8004ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */
    /* Enable CRS Clock */
    __HAL_RCC_CRS_CLK_ENABLE();
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 80026b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026b8:	4a18      	ldr	r2, [pc, #96]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 80026ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026be:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_PCD_MspInit+0x1f0>)
 80026c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026c8:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80026cc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026de:	681b      	ldr	r3, [r3, #0]

    /* Default Synchro Signal division factor (not divided) */
    RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80026e0:	2300      	movs	r3, #0
 80026e2:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Set the SYNCSRC[|:0] bits according to CRS_Source value */
    RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 80026e4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80026e8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* HSI48 is synchronized with USB SOF at 1KHz rate */
    RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 80026ea:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 80026ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 80026f2:	2322      	movs	r3, #34	@ 0x22
 80026f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* Set the TRIM[5:0] to the default value */
    RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 80026fe:	2320      	movs	r3, #32
 8002700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    /* Start automatic syncrhonization */
    HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002704:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002708:	4618      	mov	r0, r3
 800270a:	f00a fa89 	bl	800cc20 <HAL_RCCEx_CRSConfig>
  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800270e:	bf00      	nop
 8002710:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	42040000 	.word	0x42040000
 800271c:	46020c00 	.word	0x46020c00
 8002720:	42020000 	.word	0x42020000

08002724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800275c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002728:	f7ff fb64 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800272c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800272e:	e003      	b.n	8002738 <LoopCopyDataInit>

08002730 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002732:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002734:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002736:	3104      	adds	r1, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002738:	480a      	ldr	r0, [pc, #40]	@ (8002764 <LoopForever+0xa>)
	ldr	r3, =_edata
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <LoopForever+0xe>)
	adds	r2, r0, r1
 800273c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800273e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002740:	d3f6      	bcc.n	8002730 <CopyDataInit>
	ldr	r2, =_sbss
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002744:	e002      	b.n	800274c <LoopFillZerobss>

08002746 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002746:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002748:	f842 3b04 	str.w	r3, [r2], #4

0800274c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <LoopForever+0x16>)
	cmp	r2, r3
 800274e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002750:	d3f9      	bcc.n	8002746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f015 faad 	bl	8017cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002756:	f7ff f810 	bl	800177a <main>

0800275a <LoopForever>:

LoopForever:
    b LoopForever
 800275a:	e7fe      	b.n	800275a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800275c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002760:	08018164 	.word	0x08018164
	ldr	r0, =_sdata
 8002764:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002768:	200001f6 	.word	0x200001f6
	ldr	r2, =_sbss
 800276c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002770:	2002cb4c 	.word	0x2002cb4c

08002774 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC1_IRQHandler>
	...

08002778 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <HAL_Init+0x4c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_Init+0x4c>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002788:	2003      	movs	r0, #3
 800278a:	f002 f9e8 	bl	8004b5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800278e:	f007 fcc9 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <HAL_Init+0x50>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	490b      	ldr	r1, [pc, #44]	@ (80027cc <HAL_Init+0x54>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <HAL_Init+0x58>)
 80027a6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a8:	200f      	movs	r0, #15
 80027aa:	f7ff fa41 	bl	8001c30 <HAL_InitTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e002      	b.n	80027be <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7ff fa16 	bl	8001be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000
 80027c8:	46020c00 	.word	0x46020c00
 80027cc:	08017ef4 	.word	0x08017ef4
 80027d0:	20000050 	.word	0x20000050

080027d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	@ (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000058 	.word	0x20000058
 80027f8:	20029374 	.word	0x20029374

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20029374 	.word	0x20029374

08002814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff ffee 	bl	80027fc <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d005      	beq.n	800283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_Delay+0x44>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283a:	bf00      	nop
 800283c:	f7ff ffde 	bl	80027fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d8f7      	bhi.n	800283c <HAL_Delay+0x28>
  {
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000058 	.word	0x20000058

0800285c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <HAL_GetREVID+0x18>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	b29b      	uxth	r3, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e0044000 	.word	0xe0044000

08002878 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 0202 	bic.w	r2, r3, #2
 8002888:	4904      	ldr	r1, [pc, #16]	@ (800289c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	46007400 	.word	0x46007400

080028a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <LL_ADC_SetResolution+0x3c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d104      	bne.n	8002928 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3b01      	subs	r3, #1
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f023 020c 	bic.w	r2, r3, #12
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	46021000 	.word	0x46021000

08002948 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3360      	adds	r3, #96	@ 0x60
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	430b      	orrs	r3, r1
 8002978:	431a      	orrs	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3360      	adds	r3, #96	@ 0x60
 8002998:	461a      	mov	r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b087      	sub	sp, #28
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3360      	adds	r3, #96	@ 0x60
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	431a      	orrs	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3360      	adds	r3, #96	@ 0x60
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	601a      	str	r2, [r3, #0]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3360      	adds	r3, #96	@ 0x60
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d002      	beq.n	8002a8a <LL_ADC_SetGainCompensation+0x32>
 8002a84:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a88:	e000      	b.n	8002a8c <LL_ADC_SetGainCompensation+0x34>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2107      	movs	r1, #7
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	401a      	ands	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc0 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d020      	beq.n	8002b5a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3330      	adds	r3, #48	@ 0x30
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	4413      	add	r3, r2
 8002b2a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	211f      	movs	r1, #31
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	f003 011f 	and.w	r1, r3, #31
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	431a      	orrs	r2, r3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002b58:	e02b      	b.n	8002bb2 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	210f      	movs	r1, #15
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	e010      	b.n	8002ba4 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	613b      	str	r3, [r7, #16]
  return result;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	f001 011f 	and.w	r1, r1, #31
 8002baa:	408b      	lsls	r3, r1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bb2:	bf00      	nop
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	46021000 	.word	0x46021000

08002bc4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2201      	movs	r2, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	e015      	b.n	8002c14 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	60fb      	str	r3, [r7, #12]
  return result;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2201      	movs	r2, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	401a      	ands	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b08b      	sub	sp, #44	@ 0x2c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d20 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d042      	beq.n	8002cf6 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <LL_ADC_SetChannelSamplingTime+0x28>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 021f 	and.w	r2, r3, #31
 8002c82:	e011      	b.n	8002ca8 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	617b      	str	r3, [r7, #20]
  return result;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e003      	b.n	8002ca6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	0e5b      	lsrs	r3, r3, #25
 8002cac:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	1ad2      	subs	r2, r2, r3
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	0e5b      	lsrs	r3, r3, #25
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	4413      	add	r3, r2
 8002cd4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2107      	movs	r1, #7
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002cf4:	e00e      	b.n	8002d14 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	401a      	ands	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	0219      	lsls	r1, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	400b      	ands	r3, r1
 8002d0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	615a      	str	r2, [r3, #20]
}
 8002d14:	bf00      	nop
 8002d16:	372c      	adds	r7, #44	@ 0x2c
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	46021000 	.word	0x46021000

08002d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0318 	and.w	r3, r3, #24
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d48:	40d9      	lsrs	r1, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	000fffff 	.word	0x000fffff

08002d6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6093      	str	r3, [r2, #8]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002da4:	d101      	bne.n	8002daa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002dc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002df4:	d101      	bne.n	8002dfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e44:	f043 0202 	orr.w	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <LL_ADC_IsEnabled+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_ADC_IsEnabled+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_IsDisableOngoing+0x18>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_IsDisableOngoing+0x1a>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002edc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee0:	f043 0210 	orr.w	r2, r3, #16
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f2a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d101      	bne.n	8002f5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e2b3      	b.n	80034f0 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a8b      	ldr	r2, [pc, #556]	@ (80031c4 <HAL_ADC_Init+0x25c>)
 8002f96:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fd fb69 	bl	8000678 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fee9 	bl	8002d90 <LL_ADC_IsDeepPowerDownEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fecf 	bl	8002d6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff04 	bl	8002de0 <LL_ADC_IsInternalRegulatorEnabled>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d115      	bne.n	800300a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fee8 	bl	8002db8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe8:	4b77      	ldr	r3, [pc, #476]	@ (80031c8 <HAL_ADC_Init+0x260>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	4a77      	ldr	r2, [pc, #476]	@ (80031cc <HAL_ADC_Init+0x264>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ffc:	e002      	b.n	8003004 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3b01      	subs	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f9      	bne.n	8002ffe <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fee6 	bl	8002de0 <LL_ADC_IsInternalRegulatorEnabled>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800301e:	f043 0210 	orr.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff59 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 8003042:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 8244 	bne.w	80034da <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8240 	bne.w	80034da <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800305e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fef2 	bl	8002e58 <LL_ADC_IsEnabled>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d140      	bne.n	80030fc <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a51      	ldr	r2, [pc, #324]	@ (80031c4 <HAL_ADC_Init+0x25c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d028      	beq.n	80030d6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a51      	ldr	r2, [pc, #324]	@ (80031d0 <HAL_ADC_Init+0x268>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d109      	bne.n	80030a2 <HAL_ADC_Init+0x13a>
 800308e:	4850      	ldr	r0, [pc, #320]	@ (80031d0 <HAL_ADC_Init+0x268>)
 8003090:	f7ff fee2 	bl	8002e58 <LL_ADC_IsEnabled>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf0c      	ite	eq
 800309a:	2301      	moveq	r3, #1
 800309c:	2300      	movne	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	e008      	b.n	80030b4 <HAL_ADC_Init+0x14c>
 80030a2:	4848      	ldr	r0, [pc, #288]	@ (80031c4 <HAL_ADC_Init+0x25c>)
 80030a4:	f7ff fed8 	bl	8002e58 <LL_ADC_IsEnabled>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d021      	beq.n	80030fc <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a44      	ldr	r2, [pc, #272]	@ (80031d0 <HAL_ADC_Init+0x268>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Init+0x15e>
 80030c2:	4a44      	ldr	r2, [pc, #272]	@ (80031d4 <HAL_ADC_Init+0x26c>)
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_Init+0x160>
 80030c6:	4a44      	ldr	r2, [pc, #272]	@ (80031d8 <HAL_ADC_Init+0x270>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7ff fbe6 	bl	80028a0 <LL_ADC_SetCommonClock>
 80030d4:	e012      	b.n	80030fc <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f7ff fc11 	bl	8002908 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80030e6:	4b3c      	ldr	r3, [pc, #240]	@ (80031d8 <HAL_ADC_Init+0x270>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80030f6:	4938      	ldr	r1, [pc, #224]	@ (80031d8 <HAL_ADC_Init+0x270>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a30      	ldr	r2, [pc, #192]	@ (80031c4 <HAL_ADC_Init+0x25c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d010      	beq.n	8003128 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800310c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003112:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003118:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003120:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003122:	4313      	orrs	r3, r2
 8003124:	623b      	str	r3, [r7, #32]
 8003126:	e030      	b.n	800318a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	7f1b      	ldrb	r3, [r3, #28]
 800312c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003134:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003136:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800313c:	2a00      	cmp	r2, #0
 800313e:	d002      	beq.n	8003146 <HAL_ADC_Init+0x1de>
 8003140:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003144:	e000      	b.n	8003148 <HAL_ADC_Init+0x1e0>
 8003146:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003148:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800314e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da04      	bge.n	8003162 <HAL_ADC_Init+0x1fa>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003160:	e001      	b.n	8003166 <HAL_ADC_Init+0x1fe>
 8003162:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003166:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4918      	ldr	r1, [pc, #96]	@ (80031d0 <HAL_ADC_Init+0x268>)
 800316e:	428b      	cmp	r3, r1
 8003170:	d103      	bne.n	800317a <HAL_ADC_Init+0x212>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003178:	e003      	b.n	8003182 <HAL_ADC_Init+0x21a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003180:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003182:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	4313      	orrs	r3, r2
 8003188:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d12f      	bne.n	80031f4 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	@ (80031c4 <HAL_ADC_Init+0x25c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	3b01      	subs	r3, #1
 80031a4:	045b      	lsls	r3, r3, #17
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	e022      	b.n	80031f4 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d111      	bne.n	80031dc <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	e018      	b.n	80031f4 <HAL_ADC_Init+0x28c>
 80031c2:	bf00      	nop
 80031c4:	46021000 	.word	0x46021000
 80031c8:	20000050 	.word	0x20000050
 80031cc:	053e2d63 	.word	0x053e2d63
 80031d0:	42028000 	.word	0x42028000
 80031d4:	42028308 	.word	0x42028308
 80031d8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a92      	ldr	r2, [pc, #584]	@ (8003444 <HAL_ADC_Init+0x4dc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d018      	beq.n	8003230 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003212:	4313      	orrs	r3, r2
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	4313      	orrs	r3, r2
 8003218:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	4b89      	ldr	r3, [pc, #548]	@ (8003448 <HAL_ADC_Init+0x4e0>)
 8003222:	4013      	ands	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	6a39      	ldr	r1, [r7, #32]
 800322a:	430b      	orrs	r3, r1
 800322c:	60d3      	str	r3, [r2, #12]
 800322e:	e031      	b.n	8003294 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003244:	4313      	orrs	r3, r2
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	4313      	orrs	r3, r2
 800324a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	4b7e      	ldr	r3, [pc, #504]	@ (800344c <HAL_ADC_Init+0x4e4>)
 8003254:	4013      	ands	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	6a39      	ldr	r1, [r7, #32]
 800325c:	430b      	orrs	r3, r1
 800325e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6a      	ldr	r2, [pc, #424]	@ (8003444 <HAL_ADC_Init+0x4dc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	f000 8093 	beq.w	80033c6 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fe25 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 80032aa:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fe46 	bl	8002f42 <LL_ADC_INJ_IsConversionOngoing>
 80032b6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d161      	bne.n	8003382 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d15e      	bne.n	8003382 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7f1b      	ldrb	r3, [r3, #28]
 80032c8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4960      	ldr	r1, [pc, #384]	@ (8003450 <HAL_ADC_Init+0x4e8>)
 80032d0:	428b      	cmp	r3, r1
 80032d2:	d102      	bne.n	80032da <HAL_ADC_Init+0x372>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	e002      	b.n	80032e0 <HAL_ADC_Init+0x378>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032de:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032e0:	4313      	orrs	r3, r2
 80032e2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	6a39      	ldr	r1, [r7, #32]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f7ff fba2 	bl	8002a58 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800331a:	2b01      	cmp	r3, #1
 800331c:	d11e      	bne.n	800335c <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	4b4a      	ldr	r3, [pc, #296]	@ (8003454 <HAL_ADC_Init+0x4ec>)
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003332:	0411      	lsls	r1, r2, #16
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003338:	4311      	orrs	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800334a:	0892      	lsrs	r2, r2, #2
 800334c:	430a      	orrs	r2, r1
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	611a      	str	r2, [r3, #16]
 800335a:	e007      	b.n	800336c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10c      	bne.n	80033a4 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	f023 010f 	bic.w	r1, r3, #15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80033a2:	e007      	b.n	80033b4 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 020f 	bic.w	r2, r2, #15
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033b8:	f023 0303 	bic.w	r3, r3, #3
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033c4:	e092      	b.n	80034ec <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d111      	bne.n	80033f4 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80033d8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80033de:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80033e4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <HAL_ADC_Init+0x4f0>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	69f9      	ldr	r1, [r7, #28]
 8003404:	430b      	orrs	r3, r1
 8003406:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003410:	461a      	mov	r2, r3
 8003412:	2100      	movs	r1, #0
 8003414:	f7ff fb43 	bl	8002a9e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003420:	461a      	mov	r2, r3
 8003422:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003426:	f7ff fb3a 	bl	8002a9e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d114      	bne.n	800345c <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f062 020f 	orn	r2, r2, #15
 8003440:	629a      	str	r2, [r3, #40]	@ 0x28
 8003442:	e024      	b.n	800348e <HAL_ADC_Init+0x526>
 8003444:	46021000 	.word	0x46021000
 8003448:	fff0c013 	.word	0xfff0c013
 800344c:	ffde800d 	.word	0xffde800d
 8003450:	42028000 	.word	0x42028000
 8003454:	fc00f81e 	.word	0xfc00f81e
 8003458:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003464:	d113      	bne.n	800348e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f003 031c 	and.w	r3, r3, #28
 8003478:	f06f 020f 	mvn.w	r2, #15
 800347c:	fa02 f103 	lsl.w	r1, r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <HAL_ADC_Init+0x590>)
 8003496:	4013      	ands	r3, r2
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	429a      	cmp	r2, r3
 800349c:	d10b      	bne.n	80034b6 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034b4:	e01a      	b.n	80034ec <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ba:	f023 0312 	bic.w	r3, r3, #18
 80034be:	f043 0210 	orr.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034d8:	e008      	b.n	80034ec <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80034ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3728      	adds	r7, #40	@ 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	833ffff3 	.word	0x833ffff3

080034fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b0a2      	sub	sp, #136	@ 0x88
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fcf1 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 80e9 	bne.w	80036ec <HAL_ADC_Start_DMA+0x1f0>
  {
    __HAL_LOCK(hadc);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_ADC_Start_DMA+0x2c>
 8003524:	2302      	movs	r3, #2
 8003526:	e0e6      	b.n	80036f6 <HAL_ADC_Start_DMA+0x1fa>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f001 f903 	bl	800473c <ADC_Enable>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800353c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003540:	2b00      	cmp	r3, #0
 8003542:	f040 80ce 	bne.w	80036e2 <HAL_ADC_Start_DMA+0x1e6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a68      	ldr	r2, [pc, #416]	@ (8003700 <HAL_ADC_Start_DMA+0x204>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d010      	beq.n	8003586 <HAL_ADC_Start_DMA+0x8a>
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <HAL_ADC_Start_DMA+0x82>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003574:	f023 0206 	bic.w	r2, r3, #6
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800357c:	e006      	b.n	800358c <HAL_ADC_Start_DMA+0x90>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003584:	e002      	b.n	800358c <HAL_ADC_Start_DMA+0x90>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	4a5c      	ldr	r2, [pc, #368]	@ (8003704 <HAL_ADC_Start_DMA+0x208>)
 8003592:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003598:	4a5b      	ldr	r2, [pc, #364]	@ (8003708 <HAL_ADC_Start_DMA+0x20c>)
 800359a:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a0:	4a5a      	ldr	r2, [pc, #360]	@ (800370c <HAL_ADC_Start_DMA+0x210>)
 80035a2:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	221c      	movs	r2, #28
 80035aa:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0210 	orr.w	r2, r2, #16
 80035c2:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003700 <HAL_ADC_Start_DMA+0x204>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d107      	bne.n	80035de <HAL_ADC_Start_DMA+0xe2>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d04f      	beq.n	800368c <HAL_ADC_Start_DMA+0x190>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d046      	beq.n	8003684 <HAL_ADC_Start_DMA+0x188>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d040      	beq.n	8003684 <HAL_ADC_Start_DMA+0x188>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f002 fe9f 	bl	8006354 <HAL_DMAEx_List_GetNodeConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_ADC_Start_DMA+0x124>
            {
              return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e06a      	b.n	80036f6 <HAL_ADC_Start_DMA+0x1fa>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003622:	2b02      	cmp	r3, #2
 8003624:	d104      	bne.n	8003630 <HAL_ADC_Start_DMA+0x134>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800362e:	e00a      	b.n	8003646 <HAL_ADC_Start_DMA+0x14a>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d104      	bne.n	8003640 <HAL_ADC_Start_DMA+0x144>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800363e:	e002      	b.n	8003646 <HAL_ADC_Start_DMA+0x14a>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003652:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	4618      	mov	r0, r3
 8003678:	f002 fdd8 	bl	800622c <HAL_DMAEx_List_Start_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003682:	e028      	b.n	80036d6 <HAL_ADC_Start_DMA+0x1da>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800368a:	e024      	b.n	80036d6 <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d104      	bne.n	80036a0 <HAL_ADC_Start_DMA+0x1a4>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800369e:	e00c      	b.n	80036ba <HAL_ADC_Start_DMA+0x1be>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d104      	bne.n	80036b4 <HAL_ADC_Start_DMA+0x1b8>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036b2:	e002      	b.n	80036ba <HAL_ADC_Start_DMA+0x1be>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3340      	adds	r3, #64	@ 0x40
 80036c4:	4619      	mov	r1, r3
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036cc:	f002 f83e 	bl	800574c <HAL_DMA_Start_IT>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fbe2 	bl	8002ea4 <LL_ADC_REG_StartConversion>
 80036e0:	e007      	b.n	80036f2 <HAL_ADC_Start_DMA+0x1f6>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_Start_DMA+0x1f6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
 80036ee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80036f2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3788      	adds	r7, #136	@ 0x88
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	46021000 	.word	0x46021000
 8003704:	080048db 	.word	0x080048db
 8003708:	080049b3 	.word	0x080049b3
 800370c:	080049cf 	.word	0x080049cf

08003710 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_ADC_Stop_DMA+0x16>
 8003722:	2302      	movs	r3, #2
 8003724:	e066      	b.n	80037f4 <HAL_ADC_Stop_DMA+0xe4>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800372e:	2103      	movs	r1, #3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 ff47 	bl	80045c4 <ADC_ConversionStop>
 8003736:	4603      	mov	r3, r0
 8003738:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d154      	bne.n	80037ea <HAL_ADC_Stop_DMA+0xda>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    /* Note: For ADC1 and ADC2, DMA configuration kept for potential next ADC start DMA action. */
    if (hadc->Instance == ADC4)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2d      	ldr	r2, [pc, #180]	@ (80037fc <HAL_ADC_Stop_DMA+0xec>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d107      	bne.n	800375a <HAL_ADC_Stop_DMA+0x4a>
    {

      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	60da      	str	r2, [r3, #12]
    }

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d10f      	bne.n	8003788 <HAL_ADC_Stop_DMA+0x78>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376c:	4618      	mov	r0, r3
 800376e:	f002 f84d 	bl	800580c <HAL_DMA_Abort>
 8003772:	4603      	mov	r3, r0
 8003774:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003780:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	679a      	str	r2, [r3, #120]	@ 0x78
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0210 	bic.w	r2, r2, #16
 8003796:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <HAL_ADC_Stop_DMA+0x9a>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f001 f83c 	bl	800481c <ADC_Disable>
 80037a4:	4603      	mov	r3, r0
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e002      	b.n	80037b0 <HAL_ADC_Stop_DMA+0xa0>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f001 f836 	bl	800481c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d119      	bne.n	80037ea <HAL_ADC_Stop_DMA+0xda>
    {
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a10      	ldr	r2, [pc, #64]	@ (80037fc <HAL_ADC_Stop_DMA+0xec>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00a      	beq.n	80037d6 <HAL_ADC_Stop_DMA+0xc6>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	679a      	str	r2, [r3, #120]	@ 0x78
 80037d4:	e009      	b.n	80037ea <HAL_ADC_Stop_DMA+0xda>
      }
      else
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	679a      	str	r2, [r3, #120]	@ 0x78
      }
    }
  }

  __HAL_UNLOCK(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	46021000 	.word	0x46021000

08003800 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b0bc      	sub	sp, #240	@ 0xf0
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4aa8      	ldr	r2, [pc, #672]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x2bc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d103      	bne.n	800383a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003840:	2b01      	cmp	r3, #1
 8003842:	d102      	bne.n	800384a <HAL_ADC_ConfigChannel+0x36>
 8003844:	2302      	movs	r3, #2
 8003846:	f000 beb5 	b.w	80045b4 <HAL_ADC_ConfigChannel+0xda0>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fb4c 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 8695 	bne.w	800458e <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a99      	ldr	r2, [pc, #612]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x2bc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	f000 83ea 	beq.w	8004044 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <HAL_ADC_ConfigChannel+0x7a>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2201      	movs	r2, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	e01d      	b.n	80038ca <HAL_ADC_ConfigChannel+0xb6>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 80038a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 80038aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80038b2:	2320      	movs	r3, #32
 80038b4:	e004      	b.n	80038c0 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80038b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	2201      	movs	r2, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	69d1      	ldr	r1, [r2, #28]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	f7ff f90d 	bl	8002b04 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fb00 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 80038f4:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fb20 	bl	8002f42 <LL_ADC_INJ_IsConversionOngoing>
 8003902:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 81ed 	bne.w	8003cea <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 81e8 	bne.w	8003cea <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	461a      	mov	r2, r3
 8003928:	f7ff f998 	bl	8002c5c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d046      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6919      	ldr	r1, [r3, #16]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800395e:	f7fe fff3 	bl	8002948 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6919      	ldr	r1, [r3, #16]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	461a      	mov	r2, r3
 8003970:	f7ff f821 	bl	80029b6 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	7e9b      	ldrb	r3, [r3, #26]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d11e      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x17e>
 800398c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003990:	e000      	b.n	8003994 <HAL_ADC_ConfigChannel+0x180>
 8003992:	2300      	movs	r3, #0
 8003994:	461a      	mov	r2, r3
 8003996:	f7ff f844 	bl	8002a22 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x19c>
 80039aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80039ae:	e000      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x19e>
 80039b0:	2300      	movs	r3, #0
 80039b2:	461a      	mov	r2, r3
 80039b4:	f7ff f81a 	bl	80029ec <LL_ADC_SetOffsetSignedSaturation>
 80039b8:	e197      	b.n	8003cea <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2200      	movs	r2, #0
 80039c4:	4619      	mov	r1, r3
 80039c6:	f7ff f82c 	bl	8002a22 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2200      	movs	r2, #0
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7ff f809 	bl	80029ec <LL_ADC_SetOffsetSignedSaturation>
 80039da:	e186      	b.n	8003cea <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe ffd1 	bl	800298a <LL_ADC_GetOffsetChannel>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1f4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe ffc6 	bl	800298a <LL_ADC_GetOffsetChannel>
 80039fe:	4603      	mov	r3, r0
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	f003 021f 	and.w	r2, r3, #31
 8003a06:	e01e      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x232>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe ffbb 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8003a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8003a36:	2320      	movs	r3, #32
 8003a38:	e004      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8003a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x24a>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	0e9b      	lsrs	r3, r3, #26
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	e018      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x27c>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003a7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003a82:	2320      	movs	r3, #32
 8003a84:	e004      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003a86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d107      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f7fe ff52 	bl	8002948 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe ff6d 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x2c0>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2101      	movs	r1, #1
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe ff62 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	f003 021f 	and.w	r2, r3, #31
 8003ace:	e020      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x2fe>
 8003ad0:	46021000 	.word	0x46021000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe ff55 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003afa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8003b02:	2320      	movs	r3, #32
 8003b04:	e004      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8003b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x316>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0e9b      	lsrs	r3, r3, #26
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	e018      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x348>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003b4e:	2320      	movs	r3, #32
 8003b50:	e004      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d107      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f7fe feec 	bl	8002948 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ff07 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x388>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe fefc 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003b92:	4603      	mov	r3, r0
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	f003 021f 	and.w	r2, r3, #31
 8003b9a:	e01e      	b.n	8003bda <HAL_ADC_ConfigChannel+0x3c6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fef1 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bbe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003bc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8003bca:	2320      	movs	r3, #32
 8003bcc:	e004      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x3de>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e9b      	lsrs	r3, r3, #26
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	e018      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x410>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8003c16:	2320      	movs	r3, #32
 8003c18:	e004      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8003c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d107      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	2300      	movs	r3, #0
 8003c32:	2102      	movs	r1, #2
 8003c34:	f7fe fe88 	bl	8002948 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2103      	movs	r1, #3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fea3 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x450>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2103      	movs	r1, #3
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fe98 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	0e9b      	lsrs	r3, r3, #26
 8003c5e:	f003 021f 	and.w	r2, r3, #31
 8003c62:	e01a      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x486>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2103      	movs	r1, #3
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fe8d 	bl	800298a <LL_ADC_GetOffsetChannel>
 8003c70:	4603      	mov	r3, r0
 8003c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	e004      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8003c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x49e>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0e9b      	lsrs	r3, r3, #26
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	e011      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x4c2>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003cc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e003      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8003cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d107      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2103      	movs	r1, #3
 8003ce6:	f7fe fe2f 	bl	8002948 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff f8b2 	bl	8002e58 <LL_ADC_IsEnabled>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 8456 	bne.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	f7ff f80b 	bl	8002d24 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d16:	f040 80d6 	bne.w	8003ec6 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x52a>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	0e9b      	lsrs	r3, r3, #26
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2b09      	cmp	r3, #9
 8003d34:	bf94      	ite	ls
 8003d36:	2301      	movls	r3, #1
 8003d38:	2300      	movhi	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e019      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x55e>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003d4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003d50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8003d56:	2320      	movs	r3, #32
 8003d58:	e003      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8003d5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	bf94      	ite	ls
 8003d6c:	2301      	movls	r3, #1
 8003d6e:	2300      	movhi	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d04d      	beq.n	8003e12 <HAL_ADC_ConfigChannel+0x5fe>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x57e>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	0e9b      	lsrs	r3, r3, #26
 8003d88:	3301      	adds	r3, #1
 8003d8a:	069b      	lsls	r3, r3, #26
 8003d8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d90:	e015      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x5aa>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8003daa:	2320      	movs	r3, #32
 8003dac:	e003      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8003dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	069b      	lsls	r3, r3, #26
 8003dba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x5ca>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	0e9b      	lsrs	r3, r3, #26
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	e017      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x5fa>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003de6:	fa93 f3a3 	rbit	r3, r3
 8003dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003dec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8003df6:	2320      	movs	r3, #32
 8003df8:	e003      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8003dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	e04e      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x69c>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x61a>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	0e9b      	lsrs	r3, r3, #26
 8003e24:	3301      	adds	r3, #1
 8003e26:	069b      	lsls	r3, r3, #26
 8003e28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e2c:	e015      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x646>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8003e46:	2320      	movs	r3, #32
 8003e48:	e003      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8003e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	3301      	adds	r3, #1
 8003e54:	069b      	lsls	r3, r3, #26
 8003e56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x666>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	0e9b      	lsrs	r3, r3, #26
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	e017      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x696>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e003      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8003e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003eb0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003ec2:	f7fe fecb 	bl	8002c5c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f280 836c 	bge.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a97      	ldr	r2, [pc, #604]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x6ca>
 8003eda:	4b97      	ldr	r3, [pc, #604]	@ (8004138 <HAL_ADC_ConfigChannel+0x924>)
 8003edc:	e000      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x6cc>
 8003ede:	4b97      	ldr	r3, [pc, #604]	@ (800413c <HAL_ADC_ConfigChannel+0x928>)
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fd03 	bl	80028ec <LL_ADC_GetCommonPathInternalCh>
 8003ee6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a91      	ldr	r2, [pc, #580]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d109      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x6f4>
 8003ef4:	488f      	ldr	r0, [pc, #572]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8003ef6:	f7fe ffaf 	bl	8002e58 <LL_ADC_IsEnabled>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e008      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x706>
 8003f08:	488d      	ldr	r0, [pc, #564]	@ (8004140 <HAL_ADC_ConfigChannel+0x92c>)
 8003f0a:	f7fe ffa5 	bl	8002e58 <LL_ADC_IsEnabled>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf0c      	ite	eq
 8003f14:	2301      	moveq	r3, #1
 8003f16:	2300      	movne	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8088 	beq.w	8004030 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a87      	ldr	r2, [pc, #540]	@ (8004144 <HAL_ADC_ConfigChannel+0x930>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d132      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d12c      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d005      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x738>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a7e      	ldr	r2, [pc, #504]	@ (8004140 <HAL_ADC_ConfigChannel+0x92c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f040 832b 	bne.w	80045a2 <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a78      	ldr	r2, [pc, #480]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x746>
 8003f56:	4a78      	ldr	r2, [pc, #480]	@ (8004138 <HAL_ADC_ConfigChannel+0x924>)
 8003f58:	e000      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x748>
 8003f5a:	4a78      	ldr	r2, [pc, #480]	@ (800413c <HAL_ADC_ConfigChannel+0x928>)
 8003f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f7fe fcad 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f6c:	4b76      	ldr	r3, [pc, #472]	@ (8004148 <HAL_ADC_ConfigChannel+0x934>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	099b      	lsrs	r3, r3, #6
 8003f72:	4a76      	ldr	r2, [pc, #472]	@ (800414c <HAL_ADC_ConfigChannel+0x938>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003f7e:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003f80:	e002      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f9      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f8e:	e308      	b.n	80045a2 <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a6e      	ldr	r2, [pc, #440]	@ (8004150 <HAL_ADC_ConfigChannel+0x93c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d121      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11b      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a62      	ldr	r2, [pc, #392]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d005      	beq.n	8003fbc <HAL_ADC_ConfigChannel+0x7a8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a62      	ldr	r2, [pc, #392]	@ (8004140 <HAL_ADC_ConfigChannel+0x92c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	f040 82f5 	bne.w	80045a6 <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a5c      	ldr	r2, [pc, #368]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x7b6>
 8003fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8004138 <HAL_ADC_ConfigChannel+0x924>)
 8003fc8:	e000      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x7b8>
 8003fca:	4a5c      	ldr	r2, [pc, #368]	@ (800413c <HAL_ADC_ConfigChannel+0x928>)
 8003fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f7fe fc75 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fdc:	e2e3      	b.n	80045a6 <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5c      	ldr	r2, [pc, #368]	@ (8004154 <HAL_ADC_ConfigChannel+0x940>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f040 82df 	bne.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f040 82d8 	bne.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a4d      	ldr	r2, [pc, #308]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d005      	beq.n	800400e <HAL_ADC_ConfigChannel+0x7fa>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a4e      	ldr	r2, [pc, #312]	@ (8004140 <HAL_ADC_ConfigChannel+0x92c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	f040 82cd 	bne.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a48      	ldr	r2, [pc, #288]	@ (8004134 <HAL_ADC_ConfigChannel+0x920>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d101      	bne.n	800401c <HAL_ADC_ConfigChannel+0x808>
 8004018:	4a47      	ldr	r2, [pc, #284]	@ (8004138 <HAL_ADC_ConfigChannel+0x924>)
 800401a:	e000      	b.n	800401e <HAL_ADC_ConfigChannel+0x80a>
 800401c:	4a47      	ldr	r2, [pc, #284]	@ (800413c <HAL_ADC_ConfigChannel+0x928>)
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004022:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f7fe fc4c 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
 800402e:	e2bb      	b.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8004042:	e2b1      	b.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 800404c:	f7fe fc06 	bl	800285c <HAL_GetREVID>
 8004050:	4603      	mov	r3, r0
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004056:	d130      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a3e      	ldr	r2, [pc, #248]	@ (8004158 <HAL_ADC_ConfigChannel+0x944>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d103      	bne.n	800406a <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004062:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <HAL_ADC_ConfigChannel+0x948>)
 8004064:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004068:	e027      	b.n	80040ba <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3c      	ldr	r2, [pc, #240]	@ (8004160 <HAL_ADC_ConfigChannel+0x94c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d103      	bne.n	800407c <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004074:	4b3b      	ldr	r3, [pc, #236]	@ (8004164 <HAL_ADC_ConfigChannel+0x950>)
 8004076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800407a:	e01e      	b.n	80040ba <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a39      	ldr	r2, [pc, #228]	@ (8004168 <HAL_ADC_ConfigChannel+0x954>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d103      	bne.n	800408e <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8004086:	4b39      	ldr	r3, [pc, #228]	@ (800416c <HAL_ADC_ConfigChannel+0x958>)
 8004088:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800408c:	e015      	b.n	80040ba <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a37      	ldr	r2, [pc, #220]	@ (8004170 <HAL_ADC_ConfigChannel+0x95c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004098:	4b36      	ldr	r3, [pc, #216]	@ (8004174 <HAL_ADC_ConfigChannel+0x960>)
 800409a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800409e:	e00c      	b.n	80040ba <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a34      	ldr	r2, [pc, #208]	@ (8004178 <HAL_ADC_ConfigChannel+0x964>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d103      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 80040aa:	4b31      	ldr	r3, [pc, #196]	@ (8004170 <HAL_ADC_ConfigChannel+0x95c>)
 80040ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040b0:	e003      	b.n	80040ba <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	f000 81a2 	beq.w	8004408 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040cc:	d004      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80040d2:	4a2a      	ldr	r2, [pc, #168]	@ (800417c <HAL_ADC_ConfigChannel+0x968>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d107      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fd6f 	bl	8002bc4 <LL_ADC_REG_SetSequencerChAdd>
 80040e6:	e0c1      	b.n	800426c <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	210f      	movs	r1, #15
 80040f8:	fa01 f303 	lsl.w	r3, r1, r3
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004104:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x904>
 800410c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	e037      	b.n	8004188 <HAL_ADC_ConfigChannel+0x974>
 8004118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800412a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d127      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e029      	b.n	8004188 <HAL_ADC_ConfigChannel+0x974>
 8004134:	42028000 	.word	0x42028000
 8004138:	42028308 	.word	0x42028308
 800413c:	46021308 	.word	0x46021308
 8004140:	46021000 	.word	0x46021000
 8004144:	ce080000 	.word	0xce080000
 8004148:	20000050 	.word	0x20000050
 800414c:	053e2d63 	.word	0x053e2d63
 8004150:	ca040000 	.word	0xca040000
 8004154:	80000001 	.word	0x80000001
 8004158:	b6002000 	.word	0xb6002000
 800415c:	da400000 	.word	0xda400000
 8004160:	ba004000 	.word	0xba004000
 8004164:	de800000 	.word	0xde800000
 8004168:	b2001000 	.word	0xb2001000
 800416c:	81000001 	.word	0x81000001
 8004170:	d6200000 	.word	0xd6200000
 8004174:	d2100000 	.word	0xd2100000
 8004178:	d7200000 	.word	0xd7200000
 800417c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	6849      	ldr	r1, [r1, #4]
 800418c:	f001 011f 	and.w	r1, r1, #31
 8004190:	408b      	lsls	r3, r1
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d860      	bhi.n	800426c <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80041aa:	f7fe fb57 	bl	800285c <HAL_GetREVID>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b4:	d851      	bhi.n	800425a <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 80041b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80041ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x9c4>
 80041c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80041c6:	0e9b      	lsrs	r3, r3, #26
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2b13      	cmp	r3, #19
 80041ce:	bf8c      	ite	hi
 80041d0:	2301      	movhi	r3, #1
 80041d2:	2300      	movls	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e016      	b.n	8004206 <HAL_ADC_ConfigChannel+0x9f2>
 80041d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80041dc:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	61bb      	str	r3, [r7, #24]
  return result;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 80041f0:	2320      	movs	r3, #32
 80041f2:	e003      	b.n	80041fc <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b13      	cmp	r3, #19
 80041fe:	bf8c      	ite	hi
 8004200:	2301      	movhi	r3, #1
 8004202:	2300      	movls	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d027      	beq.n	800425a <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800420a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800420e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_ADC_ConfigChannel+0xa16>
 8004216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800421a:	0e9b      	lsrs	r3, r3, #26
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	3b09      	subs	r3, #9
 8004222:	2201      	movs	r2, #1
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	e015      	b.n	8004256 <HAL_ADC_ConfigChannel+0xa42>
 800422a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800422e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	60fb      	str	r3, [r7, #12]
  return result;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 8004242:	2320      	movs	r3, #32
 8004244:	e003      	b.n	800424e <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	3b09      	subs	r3, #9
 8004250:	2201      	movs	r2, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004266:	4619      	mov	r1, r3
 8004268:	f7fe fc4c 	bl	8002b04 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	461a      	mov	r2, r3
 8004276:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800427a:	f7fe fcef 	bl	8002c5c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f280 8190 	bge.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a97      	ldr	r2, [pc, #604]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_ADC_ConfigChannel+0xa82>
 8004292:	4b97      	ldr	r3, [pc, #604]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 8004294:	e000      	b.n	8004298 <HAL_ADC_ConfigChannel+0xa84>
 8004296:	4b97      	ldr	r3, [pc, #604]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe fb27 	bl	80028ec <LL_ADC_GetCommonPathInternalCh>
 800429e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a94      	ldr	r2, [pc, #592]	@ (80044f8 <HAL_ADC_ConfigChannel+0xce4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d126      	bne.n	80042fa <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d120      	bne.n	80042fa <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a8b      	ldr	r2, [pc, #556]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0xab2>
 80042c2:	4a8b      	ldr	r2, [pc, #556]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 80042c4:	e000      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xab4>
 80042c6:	4a8b      	ldr	r2, [pc, #556]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f7fe faf7 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80042d8:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <HAL_ADC_ConfigChannel+0xce8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	4a88      	ldr	r2, [pc, #544]	@ (8004500 <HAL_ADC_ConfigChannel+0xcec>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80042ea:	e002      	b.n	80042f2 <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f9      	bne.n	80042ec <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80042f8:	e067      	b.n	80043ca <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a81      	ldr	r2, [pc, #516]	@ (8004504 <HAL_ADC_ConfigChannel+0xcf0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d116      	bne.n	8004332 <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800430c:	2b00      	cmp	r3, #0
 800430e:	d110      	bne.n	8004332 <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a75      	ldr	r2, [pc, #468]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0xb0a>
 800431a:	4a75      	ldr	r2, [pc, #468]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 800431c:	e000      	b.n	8004320 <HAL_ADC_ConfigChannel+0xb0c>
 800431e:	4a75      	ldr	r2, [pc, #468]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004324:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f7fe facb 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
 8004330:	e04b      	b.n	80043ca <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a74      	ldr	r2, [pc, #464]	@ (8004508 <HAL_ADC_ConfigChannel+0xcf4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d116      	bne.n	800436a <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d110      	bne.n	800436a <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a67      	ldr	r2, [pc, #412]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <HAL_ADC_ConfigChannel+0xb42>
 8004352:	4a67      	ldr	r2, [pc, #412]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 8004354:	e000      	b.n	8004358 <HAL_ADC_ConfigChannel+0xb44>
 8004356:	4a67      	ldr	r2, [pc, #412]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f7fe faaf 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
 8004368:	e02f      	b.n	80043ca <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a67      	ldr	r2, [pc, #412]	@ (800450c <HAL_ADC_ConfigChannel+0xcf8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d12a      	bne.n	80043ca <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d124      	bne.n	80043ca <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a62      	ldr	r2, [pc, #392]	@ (8004510 <HAL_ADC_ConfigChannel+0xcfc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d11f      	bne.n	80043ca <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a57      	ldr	r2, [pc, #348]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_ADC_ConfigChannel+0xb84>
 8004394:	4a56      	ldr	r2, [pc, #344]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 8004396:	e000      	b.n	800439a <HAL_ADC_ConfigChannel+0xb86>
 8004398:	4a56      	ldr	r2, [pc, #344]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800439e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7fe fa8e 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80043aa:	f7fe fa57 	bl	800285c <HAL_GetREVID>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b4:	d809      	bhi.n	80043ca <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80043ca:	f7fe fa47 	bl	800285c <HAL_GetREVID>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d4:	f040 80e8 	bne.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004514 <HAL_ADC_ConfigChannel+0xd00>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f040 80e2 	bne.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 80db 	bne.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004406:	e0cf      	b.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004410:	d004      	beq.n	800441c <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004416:	4a40      	ldr	r2, [pc, #256]	@ (8004518 <HAL_ADC_ConfigChannel+0xd04>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d106      	bne.n	800442a <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fc00 	bl	8002c2a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f280 80ba 	bge.w	80045a8 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2c      	ldr	r2, [pc, #176]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0xc2e>
 800443e:	4b2c      	ldr	r3, [pc, #176]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 8004440:	e000      	b.n	8004444 <HAL_ADC_ConfigChannel+0xc30>
 8004442:	4b2c      	ldr	r3, [pc, #176]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe fa51 	bl	80028ec <LL_ADC_GetCommonPathInternalCh>
 800444a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a32      	ldr	r2, [pc, #200]	@ (800451c <HAL_ADC_ConfigChannel+0xd08>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d110      	bne.n	800447a <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a23      	ldr	r2, [pc, #140]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_ADC_ConfigChannel+0xc52>
 8004462:	4a23      	ldr	r2, [pc, #140]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 8004464:	e000      	b.n	8004468 <HAL_ADC_ConfigChannel+0xc54>
 8004466:	4a23      	ldr	r2, [pc, #140]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f7fe fa27 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
 8004478:	e06d      	b.n	8004556 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a28      	ldr	r2, [pc, #160]	@ (8004520 <HAL_ADC_ConfigChannel+0xd0c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d110      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a18      	ldr	r2, [pc, #96]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <HAL_ADC_ConfigChannel+0xc7e>
 800448e:	4a18      	ldr	r2, [pc, #96]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 8004490:	e000      	b.n	8004494 <HAL_ADC_ConfigChannel+0xc80>
 8004492:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 8004494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f7fe fa11 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
 80044a4:	e057      	b.n	8004556 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a17      	ldr	r2, [pc, #92]	@ (8004508 <HAL_ADC_ConfigChannel+0xcf4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d110      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0d      	ldr	r2, [pc, #52]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_ADC_ConfigChannel+0xcaa>
 80044ba:	4a0d      	ldr	r2, [pc, #52]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 80044bc:	e000      	b.n	80044c0 <HAL_ADC_ConfigChannel+0xcac>
 80044be:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <HAL_ADC_ConfigChannel+0xce0>)
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f7fe f9fb 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
 80044d0:	e041      	b.n	8004556 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a0d      	ldr	r2, [pc, #52]	@ (800450c <HAL_ADC_ConfigChannel+0xcf8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d13c      	bne.n	8004556 <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a02      	ldr	r2, [pc, #8]	@ (80044ec <HAL_ADC_ConfigChannel+0xcd8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d11e      	bne.n	8004524 <HAL_ADC_ConfigChannel+0xd10>
 80044e6:	4a02      	ldr	r2, [pc, #8]	@ (80044f0 <HAL_ADC_ConfigChannel+0xcdc>)
 80044e8:	e01d      	b.n	8004526 <HAL_ADC_ConfigChannel+0xd12>
 80044ea:	bf00      	nop
 80044ec:	42028000 	.word	0x42028000
 80044f0:	42028308 	.word	0x42028308
 80044f4:	46021308 	.word	0x46021308
 80044f8:	b6002000 	.word	0xb6002000
 80044fc:	20000050 	.word	0x20000050
 8004500:	053e2d63 	.word	0x053e2d63
 8004504:	ba004000 	.word	0xba004000
 8004508:	80000001 	.word	0x80000001
 800450c:	b2001000 	.word	0xb2001000
 8004510:	46021000 	.word	0x46021000
 8004514:	d7200000 	.word	0xd7200000
 8004518:	80000010 	.word	0x80000010
 800451c:	ce080000 	.word	0xce080000
 8004520:	ca040000 	.word	0xca040000
 8004524:	4a25      	ldr	r2, [pc, #148]	@ (80045bc <HAL_ADC_ConfigChannel+0xda8>)
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe f9c8 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8004536:	f7fe f991 	bl	800285c <HAL_GetREVID>
 800453a:	4603      	mov	r3, r0
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004540:	d809      	bhi.n	8004556 <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8004556:	f7fe f981 	bl	800285c <HAL_GetREVID>
 800455a:	4603      	mov	r3, r0
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004560:	d122      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a16      	ldr	r2, [pc, #88]	@ (80045c0 <HAL_ADC_ConfigChannel+0xdac>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d11d      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800456c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d117      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800458c:	e00c      	b.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004592:	f043 0220 	orr.w	r2, r3, #32
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80045a0:	e002      	b.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a6:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80045b0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	37f0      	adds	r7, #240	@ 0xf0
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	46021308 	.word	0x46021308
 80045c0:	d7200000 	.word	0xd7200000

080045c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fc8a 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 80045e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fcab 	bl	8002f42 <LL_ADC_INJ_IsConversionOngoing>
 80045ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <ADC_ConversionStop+0x38>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8099 	beq.w	800472e <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d02b      	beq.n	8004662 <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004610:	2b01      	cmp	r3, #1
 8004612:	d126      	bne.n	8004662 <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7f1b      	ldrb	r3, [r3, #28]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d122      	bne.n	8004662 <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800461c:	2301      	movs	r3, #1
 800461e:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004620:	e014      	b.n	800464c <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4a44      	ldr	r2, [pc, #272]	@ (8004738 <ADC_ConversionStop+0x174>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d90d      	bls.n	8004646 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800462e:	f043 0210 	orr.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e074      	b.n	8004730 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3301      	adds	r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004656:	2b40      	cmp	r3, #64	@ 0x40
 8004658:	d1e3      	bne.n	8004622 <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2240      	movs	r2, #64	@ 0x40
 8004660:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d014      	beq.n	8004692 <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fc41 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00c      	beq.n	8004692 <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe fbfe 	bl	8002e7e <LL_ADC_IsDisableOngoing>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fc1d 	bl	8002ecc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d014      	beq.n	80046c2 <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fc50 	bl	8002f42 <LL_ADC_INJ_IsConversionOngoing>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe fbe6 	bl	8002e7e <LL_ADC_IsDisableOngoing>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d104      	bne.n	80046c2 <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fc2c 	bl	8002f1a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d005      	beq.n	80046d4 <ADC_ConversionStop+0x110>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d105      	bne.n	80046da <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80046ce:	230c      	movs	r3, #12
 80046d0:	617b      	str	r3, [r7, #20]
        break;
 80046d2:	e005      	b.n	80046e0 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 80046d4:	2308      	movs	r3, #8
 80046d6:	617b      	str	r3, [r7, #20]
        break;
 80046d8:	e002      	b.n	80046e0 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 80046da:	2304      	movs	r3, #4
 80046dc:	617b      	str	r3, [r7, #20]
        break;
 80046de:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80046e0:	f7fe f88c 	bl	80027fc <HAL_GetTick>
 80046e4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80046e6:	e01b      	b.n	8004720 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80046e8:	f7fe f888 	bl	80027fc <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d914      	bls.n	8004720 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004708:	f043 0210 	orr.w	r2, r3, #16
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004714:	f043 0201 	orr.w	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e007      	b.n	8004730 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1dc      	bne.n	80046e8 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	000cdbff 	.word	0x000cdbff

0800473c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fb85 	bl	8002e58 <LL_ADC_IsEnabled>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d15a      	bne.n	800480a <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	4b2e      	ldr	r3, [pc, #184]	@ (8004814 <ADC_Enable+0xd8>)
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004766:	f043 0210 	orr.w	r2, r3, #16
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e046      	b.n	800480c <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe fb3c 	bl	8002e08 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <ADC_Enable+0x66>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <ADC_Enable+0xdc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d033      	beq.n	800480a <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80047a2:	f7fe f82b 	bl	80027fc <HAL_GetTick>
 80047a6:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a8:	e028      	b.n	80047fc <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fb52 	bl	8002e58 <LL_ADC_IsEnabled>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fb22 	bl	8002e08 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047c4:	f7fe f81a 	bl	80027fc <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d914      	bls.n	80047fc <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d00d      	beq.n	80047fc <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e4:	f043 0210 	orr.w	r2, r3, #16
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e007      	b.n	800480c <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d1cf      	bne.n	80047aa <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	8000003f 	.word	0x8000003f
 8004818:	46021000 	.word	0x46021000

0800481c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe fb28 	bl	8002e7e <LL_ADC_IsDisableOngoing>
 800482e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe fb0f 	bl	8002e58 <LL_ADC_IsEnabled>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d047      	beq.n	80048d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d144      	bne.n	80048d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030d 	and.w	r3, r3, #13
 8004850:	2b01      	cmp	r3, #1
 8004852:	d10c      	bne.n	800486e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe fae9 	bl	8002e30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2203      	movs	r2, #3
 8004864:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004866:	f7fd ffc9 	bl	80027fc <HAL_GetTick>
 800486a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800486c:	e029      	b.n	80048c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004872:	f043 0210 	orr.w	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800487e:	f043 0201 	orr.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e023      	b.n	80048d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800488a:	f7fd ffb7 	bl	80027fc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d914      	bls.n	80048c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048aa:	f043 0210 	orr.w	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048b6:	f043 0201 	orr.w	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e007      	b.n	80048d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1dc      	bne.n	800488a <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d14b      	bne.n	800498c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d021      	beq.n	8004952 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe f8e2 	bl	8002adc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d032      	beq.n	8004984 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d12b      	bne.n	8004984 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004930:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800493c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11f      	bne.n	8004984 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004948:	f043 0201 	orr.w	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	679a      	str	r2, [r3, #120]	@ 0x78
 8004950:	e018      	b.n	8004984 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d111      	bne.n	8004984 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004964:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d105      	bne.n	8004984 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7fb ff5f 	bl	8000848 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800498a:	e00e      	b.n	80049aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7fb ff6d 	bl	8000878 <HAL_ADC_ErrorCallback>
}
 800499e:	e004      	b.n	80049aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	4798      	blx	r3
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7fe ff1d 	bl	8003800 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ec:	f043 0204 	orr.w	r2, r3, #4
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7fb ff3f 	bl	8000878 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <__NVIC_SetPriorityGrouping+0x44>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a20:	4013      	ands	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a36:	4a04      	ldr	r2, [pc, #16]	@ (8004a48 <__NVIC_SetPriorityGrouping+0x44>)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	60d3      	str	r3, [r2, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <__NVIC_GetPriorityGrouping+0x18>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	f003 0307 	and.w	r3, r3, #7
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db0b      	blt.n	8004a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	4907      	ldr	r1, [pc, #28]	@ (8004aa0 <__NVIC_EnableIRQ+0x38>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2001      	movs	r0, #1
 8004a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e100 	.word	0xe000e100

08004aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	db0a      	blt.n	8004ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	490c      	ldr	r1, [pc, #48]	@ (8004af0 <__NVIC_SetPriority+0x4c>)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004acc:	e00a      	b.n	8004ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4908      	ldr	r1, [pc, #32]	@ (8004af4 <__NVIC_SetPriority+0x50>)
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	3b04      	subs	r3, #4
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	761a      	strb	r2, [r3, #24]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000e100 	.word	0xe000e100
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	@ 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f1c3 0307 	rsb	r3, r3, #7
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	bf28      	it	cs
 8004b16:	2304      	movcs	r3, #4
 8004b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2b06      	cmp	r3, #6
 8004b20:	d902      	bls.n	8004b28 <NVIC_EncodePriority+0x30>
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3b03      	subs	r3, #3
 8004b26:	e000      	b.n	8004b2a <NVIC_EncodePriority+0x32>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b40:	f04f 31ff 	mov.w	r1, #4294967295
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43d9      	mvns	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b50:	4313      	orrs	r3, r2
         );
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3724      	adds	r7, #36	@ 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff ff4c 	bl	8004a04 <__NVIC_SetPriorityGrouping>
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b82:	f7ff ff63 	bl	8004a4c <__NVIC_GetPriorityGrouping>
 8004b86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	6978      	ldr	r0, [r7, #20]
 8004b8e:	f7ff ffb3 	bl	8004af8 <NVIC_EncodePriority>
 8004b92:	4602      	mov	r2, r0
 8004b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ff82 	bl	8004aa4 <__NVIC_SetPriority>
}
 8004ba0:	bf00      	nop
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff56 	bl	8004a68 <__NVIC_EnableIRQ>
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e014      	b.n	8004c00 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	791b      	ldrb	r3, [r3, #4]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc fa54 	bl	8001094 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0a4      	sub	sp, #144	@ 0x90
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e1a4      	b.n	8004f6a <HAL_DAC_Start_DMA+0x362>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	795b      	ldrb	r3, [r3, #5]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_DAC_Start_DMA+0x24>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e19e      	b.n	8004f6a <HAL_DAC_Start_DMA+0x362>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2202      	movs	r2, #2
 8004c36:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d12e      	bne.n	8004c9c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	4a8b      	ldr	r2, [pc, #556]	@ (8004e70 <HAL_DAC_Start_DMA+0x268>)
 8004c44:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	4a8a      	ldr	r2, [pc, #552]	@ (8004e74 <HAL_DAC_Start_DMA+0x26c>)
 8004c4c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4a89      	ldr	r2, [pc, #548]	@ (8004e78 <HAL_DAC_Start_DMA+0x270>)
 8004c54:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c64:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d004      	beq.n	8004c78 <HAL_DAC_Start_DMA+0x70>
 8004c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d006      	beq.n	8004c84 <HAL_DAC_Start_DMA+0x7c>
 8004c76:	e00b      	b.n	8004c90 <HAL_DAC_Start_DMA+0x88>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8004c82:	e03a      	b.n	8004cfa <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8004c8e:	e034      	b.n	8004cfa <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3310      	adds	r3, #16
 8004c96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8004c9a:	e02e      	b.n	8004cfa <HAL_DAC_Start_DMA+0xf2>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a76      	ldr	r2, [pc, #472]	@ (8004e7c <HAL_DAC_Start_DMA+0x274>)
 8004ca2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a75      	ldr	r2, [pc, #468]	@ (8004e80 <HAL_DAC_Start_DMA+0x278>)
 8004caa:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a74      	ldr	r2, [pc, #464]	@ (8004e84 <HAL_DAC_Start_DMA+0x27c>)
 8004cb2:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_DAC_Start_DMA+0xce>
 8004ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d006      	beq.n	8004ce2 <HAL_DAC_Start_DMA+0xda>
 8004cd4:	e00b      	b.n	8004cee <HAL_DAC_Start_DMA+0xe6>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8004ce0:	e00b      	b.n	8004cfa <HAL_DAC_Start_DMA+0xf2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3318      	adds	r3, #24
 8004ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8004cec:	e005      	b.n	8004cfa <HAL_DAC_Start_DMA+0xf2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	331c      	adds	r3, #28
 8004cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        break;
 8004cf8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d17e      	bne.n	8004dfe <HAL_DAC_Start_DMA+0x1f6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle1->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04b      	beq.n	8004db6 <HAL_DAC_Start_DMA+0x1ae>
    {
      if ((hdac->DMA_Handle1->LinkedListQueue != NULL) && (hdac->DMA_Handle1->LinkedListQueue->Head != NULL))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d044      	beq.n	8004db2 <HAL_DAC_Start_DMA+0x1aa>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d03e      	beq.n	8004db2 <HAL_DAC_Start_DMA+0x1aa>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle1->LinkedListQueue->Head) != HAL_OK)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	f107 0318 	add.w	r3, r7, #24
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 fb06 	bl	8006354 <HAL_DMAEx_List_GetNodeConfig>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_DAC_Start_DMA+0x14a>
        {
          return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e10b      	b.n	8004f6a <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d104      	bne.n	8004d62 <HAL_DAC_Start_DMA+0x15a>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d60:	e00a      	b.n	8004d78 <HAL_DAC_Start_DMA+0x170>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d104      	bne.n	8004d72 <HAL_DAC_Start_DMA+0x16a>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d70:	e002      	b.n	8004d78 <HAL_DAC_Start_DMA+0x170>
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d84:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004d9e:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle1);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f001 fa41 	bl	800622c <HAL_DMAEx_List_Start_IT>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004db0:	e0af      	b.n	8004f12 <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0d9      	b.n	8004f6a <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d104      	bne.n	8004dca <HAL_DAC_Start_DMA+0x1c2>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dc8:	e00c      	b.n	8004de4 <HAL_DAC_Start_DMA+0x1dc>
      }
      else if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d104      	bne.n	8004dde <HAL_DAC_Start_DMA+0x1d6>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ddc:	e002      	b.n	8004de4 <HAL_DAC_Start_DMA+0x1dc>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, LengthInBytes);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6898      	ldr	r0, [r3, #8]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004df2:	f000 fcab 	bl	800574c <HAL_DMA_Start_IT>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004dfc:	e089      	b.n	8004f12 <HAL_DAC_Start_DMA+0x30a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle2->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d057      	beq.n	8004ecc <HAL_DAC_Start_DMA+0x2c4>
    {
      if ((hdac->DMA_Handle2->LinkedListQueue != NULL) && (hdac->DMA_Handle2->LinkedListQueue->Head != NULL))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d050      	beq.n	8004ec8 <HAL_DAC_Start_DMA+0x2c0>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d04a      	beq.n	8004ec8 <HAL_DAC_Start_DMA+0x2c0>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle2->LinkedListQueue->Head) != HAL_OK)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	f107 0318 	add.w	r3, r7, #24
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f001 fa87 	bl	8006354 <HAL_DMAEx_List_GetNodeConfig>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_DAC_Start_DMA+0x248>
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e08c      	b.n	8004f6a <HAL_DAC_Start_DMA+0x362>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d104      	bne.n	8004e60 <HAL_DAC_Start_DMA+0x258>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e5e:	e016      	b.n	8004e8e <HAL_DAC_Start_DMA+0x286>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d110      	bne.n	8004e88 <HAL_DAC_Start_DMA+0x280>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e6e:	e00e      	b.n	8004e8e <HAL_DAC_Start_DMA+0x286>
 8004e70:	08005369 	.word	0x08005369
 8004e74:	0800538b 	.word	0x0800538b
 8004e78:	080053a7 	.word	0x080053a7
 8004e7c:	08005481 	.word	0x08005481
 8004e80:	080054a3 	.word	0x080054a3
 8004e84:	080054bf 	.word	0x080054bf
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004e9a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004eb4:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle2);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 f9b6 	bl	800622c <HAL_DMAEx_List_Start_IT>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004ec6:	e024      	b.n	8004f12 <HAL_DAC_Start_DMA+0x30a>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e04e      	b.n	8004f6a <HAL_DAC_Start_DMA+0x362>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d104      	bne.n	8004ee0 <HAL_DAC_Start_DMA+0x2d8>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ede:	e00c      	b.n	8004efa <HAL_DAC_Start_DMA+0x2f2>
      }
      else if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d104      	bne.n	8004ef4 <HAL_DAC_Start_DMA+0x2ec>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ef2:	e002      	b.n	8004efa <HAL_DAC_Start_DMA+0x2f2>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, LengthInBytes);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68d8      	ldr	r0, [r3, #12]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f04:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004f08:	f000 fc20 	bl	800574c <HAL_DMA_Start_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004f18:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d11c      	bne.n	8004f5a <HAL_DAC_Start_DMA+0x352>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f38:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <HAL_DAC_Start_DMA+0x36c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f78 <HAL_DAC_Start_DMA+0x370>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	099b      	lsrs	r3, r3, #6
 8004f46:	3301      	adds	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004f4a:	e002      	b.n	8004f52 <HAL_DAC_Start_DMA+0x34a>
    {
      wait_loop_index--;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f9      	bne.n	8004f4c <HAL_DAC_Start_DMA+0x344>
 8004f58:	e005      	b.n	8004f66 <HAL_DAC_Start_DMA+0x35e>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f043 0204 	orr.w	r2, r3, #4
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004f66:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3790      	adds	r7, #144	@ 0x90
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000050 	.word	0x20000050
 8004f78:	053e2d63 	.word	0x053e2d63

08004f7c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e03e      	b.n	800500e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	400a      	ands	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2201      	movs	r2, #1
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43da      	mvns	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	400a      	ands	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10d      	bne.n	8004fec <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fc19 	bl	800580c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e00c      	b.n	8005006 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fc0b 	bl	800580c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8005004:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	@ 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_DAC_ConfigChannel+0x1c>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e184      	b.n	8005356 <HAL_DAC_ConfigChannel+0x32a>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	795b      	ldrb	r3, [r3, #5]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_DAC_ConfigChannel+0x2c>
 8005054:	2302      	movs	r3, #2
 8005056:	e17e      	b.n	8005356 <HAL_DAC_ConfigChannel+0x32a>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2202      	movs	r2, #2
 8005062:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d17a      	bne.n	8005162 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800506c:	f7fd fbc6 	bl	80027fc <HAL_GetTick>
 8005070:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d13d      	bne.n	80050f4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005078:	e018      	b.n	80050ac <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800507a:	f7fd fbbf 	bl	80027fc <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d911      	bls.n	80050ac <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f043 0208 	orr.w	r2, r3, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2203      	movs	r2, #3
 80050a6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e154      	b.n	8005356 <HAL_DAC_ConfigChannel+0x32a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1df      	bne.n	800507a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80050c4:	e020      	b.n	8005108 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80050c6:	f7fd fb99 	bl	80027fc <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d90f      	bls.n	80050f4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da0a      	bge.n	80050f4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f043 0208 	orr.w	r2, r3, #8
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2203      	movs	r2, #3
 80050ee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e130      	b.n	8005356 <HAL_DAC_ConfigChannel+0x32a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dbe3      	blt.n	80050c6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005106:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	ea02 0103 	and.w	r1, r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	409a      	lsls	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	21ff      	movs	r1, #255	@ 0xff
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	43db      	mvns	r3, r3
 800514a:	ea02 0103 	and.w	r1, r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	409a      	lsls	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005168:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d11d      	bne.n	80051bc <HAL_DAC_ConfigChannel+0x190>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	221f      	movs	r2, #31
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005198:	4013      	ands	r3, r2
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b0:	4313      	orrs	r3, r2
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2207      	movs	r2, #7
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d4:	4013      	ands	r3, r2
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d102      	bne.n	80051e6 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = 0x00000000UL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	e00f      	b.n	8005206 <HAL_DAC_ConfigChannel+0x1da>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d102      	bne.n	80051f4 <HAL_DAC_ConfigChannel+0x1c8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80051ee:	2301      	movs	r3, #1
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	e008      	b.n	8005206 <HAL_DAC_ConfigChannel+0x1da>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <HAL_DAC_ConfigChannel+0x1d6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80051fc:	2301      	movs	r3, #1
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	e001      	b.n	8005206 <HAL_DAC_ConfigChannel+0x1da>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005202:	2300      	movs	r3, #0
 8005204:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	6a3a      	ldr	r2, [r7, #32]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	43db      	mvns	r3, r3
 8005226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005228:	4013      	ands	r3, r2
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	7a1b      	ldrb	r3, [r3, #8]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d102      	bne.n	800523a <HAL_DAC_ConfigChannel+0x20e>
 8005234:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005238:	e000      	b.n	800523c <HAL_DAC_ConfigChannel+0x210>
 800523a:	2300      	movs	r3, #0
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005254:	4013      	ands	r3, r2
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	7a5b      	ldrb	r3, [r3, #9]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d102      	bne.n	8005266 <HAL_DAC_ConfigChannel+0x23a>
 8005260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005264:	e000      	b.n	8005268 <HAL_DAC_ConfigChannel+0x23c>
 8005266:	2300      	movs	r3, #0
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d114      	bne.n	80052a8 <HAL_DAC_ConfigChannel+0x27c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800527e:	f005 f853 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 8005282:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4a36      	ldr	r2, [pc, #216]	@ (8005360 <HAL_DAC_ConfigChannel+0x334>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d904      	bls.n	8005296 <HAL_DAC_ConfigChannel+0x26a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
 8005294:	e00f      	b.n	80052b6 <HAL_DAC_ConfigChannel+0x28a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4a32      	ldr	r2, [pc, #200]	@ (8005364 <HAL_DAC_ConfigChannel+0x338>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d90a      	bls.n	80052b4 <HAL_DAC_ConfigChannel+0x288>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	e006      	b.n	80052b6 <HAL_DAC_ConfigChannel+0x28a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ae:	4313      	orrs	r3, r2
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052b2:	e000      	b.n	80052b6 <HAL_DAC_ConfigChannel+0x28a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80052b4:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c4:	4313      	orrs	r3, r2
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	43da      	mvns	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	400a      	ands	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005308:	4013      	ands	r3, r2
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005320:	4313      	orrs	r3, r2
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6819      	ldr	r1, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	22c0      	movs	r2, #192	@ 0xc0
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43da      	mvns	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	400a      	ands	r2, r1
 8005346:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005354:	7ffb      	ldrb	r3, [r7, #31]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	@ 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	09896800 	.word	0x09896800
 8005364:	04c4b400 	.word	0x04c4b400

08005368 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005374:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7fb fa96 	bl	80008a8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	711a      	strb	r2, [r3, #4]
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005396:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff fe3c 	bl	8005016 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f043 0204 	orr.w	r2, r3, #4
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7fb fa89 	bl	80008d8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	711a      	strb	r2, [r3, #4]
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e024      	b.n	8005474 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	791b      	ldrb	r3, [r3, #4]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d11e      	bne.n	8005472 <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	795b      	ldrb	r3, [r3, #5]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 800543c:	2302      	movs	r3, #2
 800543e:	e019      	b.n	8005474 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005452:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
  }
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7ff ffa0 	bl	80053d4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	711a      	strb	r2, [r3, #4]
}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff ff99 	bl	80053e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f043 0204 	orr.w	r2, r3, #4
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff ff8f 	bl	80053fc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	711a      	strb	r2, [r3, #4]
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80054f4:	f7fd f982 	bl	80027fc <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0df      	b.n	80056c4 <HAL_DMA_Init+0x1d8>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6e      	ldr	r2, [pc, #440]	@ (80056cc <HAL_DMA_Init+0x1e0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	f000 809f 	beq.w	8005656 <HAL_DMA_Init+0x16a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a6c      	ldr	r2, [pc, #432]	@ (80056d0 <HAL_DMA_Init+0x1e4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	f000 8099 	beq.w	8005656 <HAL_DMA_Init+0x16a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6a      	ldr	r2, [pc, #424]	@ (80056d4 <HAL_DMA_Init+0x1e8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	f000 8093 	beq.w	8005656 <HAL_DMA_Init+0x16a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a68      	ldr	r2, [pc, #416]	@ (80056d8 <HAL_DMA_Init+0x1ec>)
 8005536:	4293      	cmp	r3, r2
 8005538:	f000 808d 	beq.w	8005656 <HAL_DMA_Init+0x16a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a66      	ldr	r2, [pc, #408]	@ (80056dc <HAL_DMA_Init+0x1f0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	f000 8087 	beq.w	8005656 <HAL_DMA_Init+0x16a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a64      	ldr	r2, [pc, #400]	@ (80056e0 <HAL_DMA_Init+0x1f4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	f000 8081 	beq.w	8005656 <HAL_DMA_Init+0x16a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a62      	ldr	r2, [pc, #392]	@ (80056e4 <HAL_DMA_Init+0x1f8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d07b      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a61      	ldr	r2, [pc, #388]	@ (80056e8 <HAL_DMA_Init+0x1fc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d076      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a5f      	ldr	r2, [pc, #380]	@ (80056ec <HAL_DMA_Init+0x200>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d071      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a5e      	ldr	r2, [pc, #376]	@ (80056f0 <HAL_DMA_Init+0x204>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d06c      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a5c      	ldr	r2, [pc, #368]	@ (80056f4 <HAL_DMA_Init+0x208>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d067      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a5b      	ldr	r2, [pc, #364]	@ (80056f8 <HAL_DMA_Init+0x20c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d062      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a59      	ldr	r2, [pc, #356]	@ (80056fc <HAL_DMA_Init+0x210>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d05d      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a58      	ldr	r2, [pc, #352]	@ (8005700 <HAL_DMA_Init+0x214>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d058      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a56      	ldr	r2, [pc, #344]	@ (8005704 <HAL_DMA_Init+0x218>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d053      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a55      	ldr	r2, [pc, #340]	@ (8005708 <HAL_DMA_Init+0x21c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d04e      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a53      	ldr	r2, [pc, #332]	@ (800570c <HAL_DMA_Init+0x220>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d049      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a52      	ldr	r2, [pc, #328]	@ (8005710 <HAL_DMA_Init+0x224>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d044      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a50      	ldr	r2, [pc, #320]	@ (8005714 <HAL_DMA_Init+0x228>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d03f      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a4f      	ldr	r2, [pc, #316]	@ (8005718 <HAL_DMA_Init+0x22c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d03a      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a4d      	ldr	r2, [pc, #308]	@ (800571c <HAL_DMA_Init+0x230>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d035      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a4c      	ldr	r2, [pc, #304]	@ (8005720 <HAL_DMA_Init+0x234>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d030      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005724 <HAL_DMA_Init+0x238>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d02b      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a49      	ldr	r2, [pc, #292]	@ (8005728 <HAL_DMA_Init+0x23c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d026      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a47      	ldr	r2, [pc, #284]	@ (800572c <HAL_DMA_Init+0x240>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d021      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a46      	ldr	r2, [pc, #280]	@ (8005730 <HAL_DMA_Init+0x244>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d01c      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a44      	ldr	r2, [pc, #272]	@ (8005734 <HAL_DMA_Init+0x248>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d017      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a43      	ldr	r2, [pc, #268]	@ (8005738 <HAL_DMA_Init+0x24c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d012      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a41      	ldr	r2, [pc, #260]	@ (800573c <HAL_DMA_Init+0x250>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00d      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a40      	ldr	r2, [pc, #256]	@ (8005740 <HAL_DMA_Init+0x254>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d008      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a3e      	ldr	r2, [pc, #248]	@ (8005744 <HAL_DMA_Init+0x258>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <HAL_DMA_Init+0x16a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a3d      	ldr	r2, [pc, #244]	@ (8005748 <HAL_DMA_Init+0x25c>)
 8005654:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0206 	orr.w	r2, r2, #6
 8005674:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005676:	e00f      	b.n	8005698 <HAL_DMA_Init+0x1ac>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005678:	f7fd f8c0 	bl	80027fc <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b05      	cmp	r3, #5
 8005684:	d908      	bls.n	8005698 <HAL_DMA_Init+0x1ac>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2210      	movs	r2, #16
 800568a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2203      	movs	r2, #3
 8005690:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e015      	b.n	80056c4 <HAL_DMA_Init+0x1d8>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e8      	bne.n	8005678 <HAL_DMA_Init+0x18c>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fb40 	bl	8005d2c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40020050 	.word	0x40020050
 80056d0:	50020050 	.word	0x50020050
 80056d4:	400200d0 	.word	0x400200d0
 80056d8:	500200d0 	.word	0x500200d0
 80056dc:	40020150 	.word	0x40020150
 80056e0:	50020150 	.word	0x50020150
 80056e4:	400201d0 	.word	0x400201d0
 80056e8:	500201d0 	.word	0x500201d0
 80056ec:	40020250 	.word	0x40020250
 80056f0:	50020250 	.word	0x50020250
 80056f4:	400202d0 	.word	0x400202d0
 80056f8:	500202d0 	.word	0x500202d0
 80056fc:	40020350 	.word	0x40020350
 8005700:	50020350 	.word	0x50020350
 8005704:	400203d0 	.word	0x400203d0
 8005708:	500203d0 	.word	0x500203d0
 800570c:	40020450 	.word	0x40020450
 8005710:	50020450 	.word	0x50020450
 8005714:	400204d0 	.word	0x400204d0
 8005718:	500204d0 	.word	0x500204d0
 800571c:	40020550 	.word	0x40020550
 8005720:	50020550 	.word	0x50020550
 8005724:	400205d0 	.word	0x400205d0
 8005728:	500205d0 	.word	0x500205d0
 800572c:	40020650 	.word	0x40020650
 8005730:	50020650 	.word	0x50020650
 8005734:	400206d0 	.word	0x400206d0
 8005738:	500206d0 	.word	0x500206d0
 800573c:	40020750 	.word	0x40020750
 8005740:	50020750 	.word	0x50020750
 8005744:	400207d0 	.word	0x400207d0
 8005748:	500207d0 	.word	0x500207d0

0800574c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e04f      	b.n	8005804 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_DMA_Start_IT+0x26>
 800576e:	2302      	movs	r3, #2
 8005770:	e048      	b.n	8005804 <HAL_DMA_Start_IT+0xb8>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d136      	bne.n	80057f4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 faa1 	bl	8005ce2 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80057ae:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057de:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e007      	b.n	8005804 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2240      	movs	r2, #64	@ 0x40
 80057f8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005814:	f7fc fff2 	bl	80027fc <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e06b      	b.n	80058fc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d008      	beq.n	8005842 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e05c      	b.n	80058fc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0204 	orr.w	r2, r2, #4
 8005850:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2205      	movs	r2, #5
 8005856:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800585a:	e020      	b.n	800589e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800585c:	f7fc ffce 	bl	80027fc <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b05      	cmp	r3, #5
 8005868:	d919      	bls.n	800589e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800586e:	f043 0210 	orr.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2203      	movs	r2, #3
 800587a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800588e:	2201      	movs	r2, #1
 8005890:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e02e      	b.n	80058fc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0d7      	beq.n	800585c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0202 	orr.w	r2, r2, #2
 80058ba:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2204      	movs	r2, #4
 80058c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80058cc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	2201      	movs	r2, #1
 80058e8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2200      	movs	r2, #0
 80058f0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e019      	b.n	800594a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d004      	beq.n	800592c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e00e      	b.n	800594a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2204      	movs	r2, #4
 8005930:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005942:	f043 0304 	orr.w	r3, r3, #4
 8005946:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b086      	sub	sp, #24
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005966:	f023 030f 	bic.w	r3, r3, #15
 800596a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005974:	3b50      	subs	r3, #80	@ 0x50
 8005976:	09db      	lsrs	r3, r3, #7
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	2201      	movs	r2, #1
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4013      	ands	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8156 	beq.w	8005c42 <HAL_DMA_IRQHandler+0x2ec>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d011      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059ba:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c0:	f043 0201 	orr.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d011      	beq.n	80059fa <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059ec:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f2:	f043 0202 	orr.w	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d011      	beq.n	8005a2c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005a1e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a24:	f043 0204 	orr.w	r2, r3, #4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d011      	beq.n	8005a5e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a50:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a56:	f043 0208 	orr.w	r2, r3, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d013      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00c      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a82:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d05a      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x202>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d053      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x202>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ab8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d13c      	bne.n	8005b40 <HAL_DMA_IRQHandler+0x1ea>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ad4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0202 	orr.w	r2, r2, #2
 8005ae4:	615a      	str	r2, [r3, #20]

        /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
        __NOP();
 8005ae6:	bf00      	nop

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x1aa>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2203      	movs	r2, #3
 8005afa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8005afe:	e003      	b.n	8005b08 <HAL_DMA_IRQHandler+0x1b2>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x1ce>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b18:	2201      	movs	r2, #1
 8005b1a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2200      	movs	r2, #0
 8005b22:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8088 	beq.w	8005c46 <HAL_DMA_IRQHandler+0x2f0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4798      	blx	r3
        }

        return;
 8005b3e:	e082      	b.n	8005c46 <HAL_DMA_IRQHandler+0x2f0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2205      	movs	r2, #5
 8005b44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x202>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d039      	beq.n	8005bda <HAL_DMA_IRQHandler+0x284>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d032      	beq.n	8005bda <HAL_DMA_IRQHandler+0x284>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d012      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x250>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d116      	bne.n	8005bb8 <HAL_DMA_IRQHandler+0x262>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d111      	bne.n	8005bb8 <HAL_DMA_IRQHandler+0x262>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	731a      	strb	r2, [r3, #12]
 8005ba4:	e008      	b.n	8005bb8 <HAL_DMA_IRQHandler+0x262>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <HAL_DMA_IRQHandler+0x262>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005bc0:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_DMA_IRQHandler+0x284>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d032      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x2f2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0202 	orr.w	r2, r2, #2
 8005bf0:	615a      	str	r2, [r3, #20]

    /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
    __NOP();
 8005bf2:	bf00      	nop

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x2b6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2203      	movs	r2, #3
 8005c06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8005c0a:	e003      	b.n	8005c14 <HAL_DMA_IRQHandler+0x2be>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x2d2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c24:	2201      	movs	r2, #1
 8005c26:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x2f2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
 8005c40:	e002      	b.n	8005c48 <HAL_DMA_IRQHandler+0x2f2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005c42:	bf00      	nop
 8005c44:	e000      	b.n	8005c48 <HAL_DMA_IRQHandler+0x2f2>
        return;
 8005c46:	bf00      	nop
    }
  }
}
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005c5c:	b2db      	uxtb	r3, r3
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e02b      	b.n	8005cd6 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005c86:	f023 030f 	bic.w	r3, r3, #15
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c94:	3b50      	subs	r3, #80	@ 0x50
 8005c96:	09db      	lsrs	r3, r3, #7
 8005c98:	f003 031f 	and.w	r3, r3, #31
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d012      	beq.n	8005cd4 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f003 0311 	and.w	r3, r3, #17
 8005cb4:	2b11      	cmp	r3, #17
 8005cb6:	d106      	bne.n	8005cc6 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]
 8005cc4:	e006      	b.n	8005cd4 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	401a      	ands	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf6:	0c1b      	lsrs	r3, r3, #16
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	b291      	uxth	r1, r2
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	430b      	orrs	r3, r1
 8005d04:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005d0e:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695a      	ldr	r2, [r3, #20]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a53      	ldr	r2, [pc, #332]	@ (8005eb8 <DMA_Init+0x18c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	f000 80a0 	beq.w	8005eb2 <DMA_Init+0x186>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a51      	ldr	r2, [pc, #324]	@ (8005ebc <DMA_Init+0x190>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	f000 809a 	beq.w	8005eb2 <DMA_Init+0x186>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4f      	ldr	r2, [pc, #316]	@ (8005ec0 <DMA_Init+0x194>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	f000 8094 	beq.w	8005eb2 <DMA_Init+0x186>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8005ec4 <DMA_Init+0x198>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	f000 808e 	beq.w	8005eb2 <DMA_Init+0x186>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8005ec8 <DMA_Init+0x19c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	f000 8088 	beq.w	8005eb2 <DMA_Init+0x186>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a49      	ldr	r2, [pc, #292]	@ (8005ecc <DMA_Init+0x1a0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f000 8082 	beq.w	8005eb2 <DMA_Init+0x186>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a47      	ldr	r2, [pc, #284]	@ (8005ed0 <DMA_Init+0x1a4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d07c      	beq.n	8005eb2 <DMA_Init+0x186>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a45      	ldr	r2, [pc, #276]	@ (8005ed4 <DMA_Init+0x1a8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d077      	beq.n	8005eb2 <DMA_Init+0x186>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a44      	ldr	r2, [pc, #272]	@ (8005ed8 <DMA_Init+0x1ac>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d072      	beq.n	8005eb2 <DMA_Init+0x186>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a42      	ldr	r2, [pc, #264]	@ (8005edc <DMA_Init+0x1b0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d06d      	beq.n	8005eb2 <DMA_Init+0x186>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a41      	ldr	r2, [pc, #260]	@ (8005ee0 <DMA_Init+0x1b4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d068      	beq.n	8005eb2 <DMA_Init+0x186>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3f      	ldr	r2, [pc, #252]	@ (8005ee4 <DMA_Init+0x1b8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d063      	beq.n	8005eb2 <DMA_Init+0x186>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3e      	ldr	r2, [pc, #248]	@ (8005ee8 <DMA_Init+0x1bc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d05e      	beq.n	8005eb2 <DMA_Init+0x186>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3c      	ldr	r2, [pc, #240]	@ (8005eec <DMA_Init+0x1c0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d059      	beq.n	8005eb2 <DMA_Init+0x186>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a3b      	ldr	r2, [pc, #236]	@ (8005ef0 <DMA_Init+0x1c4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d054      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a39      	ldr	r2, [pc, #228]	@ (8005ef4 <DMA_Init+0x1c8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d04f      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a38      	ldr	r2, [pc, #224]	@ (8005ef8 <DMA_Init+0x1cc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d04a      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a36      	ldr	r2, [pc, #216]	@ (8005efc <DMA_Init+0x1d0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d045      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a35      	ldr	r2, [pc, #212]	@ (8005f00 <DMA_Init+0x1d4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d040      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a33      	ldr	r2, [pc, #204]	@ (8005f04 <DMA_Init+0x1d8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d03b      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a32      	ldr	r2, [pc, #200]	@ (8005f08 <DMA_Init+0x1dc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d036      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a30      	ldr	r2, [pc, #192]	@ (8005f0c <DMA_Init+0x1e0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d031      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2f      	ldr	r2, [pc, #188]	@ (8005f10 <DMA_Init+0x1e4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d02c      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f14 <DMA_Init+0x1e8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d027      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2c      	ldr	r2, [pc, #176]	@ (8005f18 <DMA_Init+0x1ec>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d022      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2a      	ldr	r2, [pc, #168]	@ (8005f1c <DMA_Init+0x1f0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d01d      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a29      	ldr	r2, [pc, #164]	@ (8005f20 <DMA_Init+0x1f4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d018      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a27      	ldr	r2, [pc, #156]	@ (8005f24 <DMA_Init+0x1f8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a26      	ldr	r2, [pc, #152]	@ (8005f28 <DMA_Init+0x1fc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a24      	ldr	r2, [pc, #144]	@ (8005f2c <DMA_Init+0x200>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <DMA_Init+0x186>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a23      	ldr	r2, [pc, #140]	@ (8005f30 <DMA_Init+0x204>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <DMA_Init+0x186>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a21      	ldr	r2, [pc, #132]	@ (8005f34 <DMA_Init+0x208>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d142      	bne.n	8005f38 <DMA_Init+0x20c>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e041      	b.n	8005f3a <DMA_Init+0x20e>
 8005eb6:	bf00      	nop
 8005eb8:	40020050 	.word	0x40020050
 8005ebc:	50020050 	.word	0x50020050
 8005ec0:	400200d0 	.word	0x400200d0
 8005ec4:	500200d0 	.word	0x500200d0
 8005ec8:	40020150 	.word	0x40020150
 8005ecc:	50020150 	.word	0x50020150
 8005ed0:	400201d0 	.word	0x400201d0
 8005ed4:	500201d0 	.word	0x500201d0
 8005ed8:	40020250 	.word	0x40020250
 8005edc:	50020250 	.word	0x50020250
 8005ee0:	400202d0 	.word	0x400202d0
 8005ee4:	500202d0 	.word	0x500202d0
 8005ee8:	40020350 	.word	0x40020350
 8005eec:	50020350 	.word	0x50020350
 8005ef0:	400203d0 	.word	0x400203d0
 8005ef4:	500203d0 	.word	0x500203d0
 8005ef8:	40020450 	.word	0x40020450
 8005efc:	50020450 	.word	0x50020450
 8005f00:	400204d0 	.word	0x400204d0
 8005f04:	500204d0 	.word	0x500204d0
 8005f08:	40020550 	.word	0x40020550
 8005f0c:	50020550 	.word	0x50020550
 8005f10:	400205d0 	.word	0x400205d0
 8005f14:	500205d0 	.word	0x500205d0
 8005f18:	40020650 	.word	0x40020650
 8005f1c:	50020650 	.word	0x50020650
 8005f20:	400206d0 	.word	0x400206d0
 8005f24:	500206d0 	.word	0x500206d0
 8005f28:	40020750 	.word	0x40020750
 8005f2c:	50020750 	.word	0x50020750
 8005f30:	400207d0 	.word	0x400207d0
 8005f34:	500207d0 	.word	0x500207d0
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d012      	beq.n	8005f64 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	3b01      	subs	r3, #1
 8005f48:	051b      	lsls	r3, r3, #20
 8005f4a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005f4e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	3b01      	subs	r3, #1
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005f5c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f96:	f040 80b0 	bne.w	80060fa <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a82      	ldr	r2, [pc, #520]	@ (80061a8 <DMA_Init+0x47c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	f000 80a0 	beq.w	80060e6 <DMA_Init+0x3ba>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a80      	ldr	r2, [pc, #512]	@ (80061ac <DMA_Init+0x480>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	f000 809a 	beq.w	80060e6 <DMA_Init+0x3ba>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80061b0 <DMA_Init+0x484>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	f000 8094 	beq.w	80060e6 <DMA_Init+0x3ba>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80061b4 <DMA_Init+0x488>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	f000 808e 	beq.w	80060e6 <DMA_Init+0x3ba>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7a      	ldr	r2, [pc, #488]	@ (80061b8 <DMA_Init+0x48c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	f000 8088 	beq.w	80060e6 <DMA_Init+0x3ba>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a78      	ldr	r2, [pc, #480]	@ (80061bc <DMA_Init+0x490>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	f000 8082 	beq.w	80060e6 <DMA_Init+0x3ba>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a76      	ldr	r2, [pc, #472]	@ (80061c0 <DMA_Init+0x494>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d07c      	beq.n	80060e6 <DMA_Init+0x3ba>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a74      	ldr	r2, [pc, #464]	@ (80061c4 <DMA_Init+0x498>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d077      	beq.n	80060e6 <DMA_Init+0x3ba>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a73      	ldr	r2, [pc, #460]	@ (80061c8 <DMA_Init+0x49c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d072      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a71      	ldr	r2, [pc, #452]	@ (80061cc <DMA_Init+0x4a0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d06d      	beq.n	80060e6 <DMA_Init+0x3ba>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a70      	ldr	r2, [pc, #448]	@ (80061d0 <DMA_Init+0x4a4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d068      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a6e      	ldr	r2, [pc, #440]	@ (80061d4 <DMA_Init+0x4a8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d063      	beq.n	80060e6 <DMA_Init+0x3ba>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a6d      	ldr	r2, [pc, #436]	@ (80061d8 <DMA_Init+0x4ac>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d05e      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6b      	ldr	r2, [pc, #428]	@ (80061dc <DMA_Init+0x4b0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d059      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a6a      	ldr	r2, [pc, #424]	@ (80061e0 <DMA_Init+0x4b4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d054      	beq.n	80060e6 <DMA_Init+0x3ba>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a68      	ldr	r2, [pc, #416]	@ (80061e4 <DMA_Init+0x4b8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d04f      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a67      	ldr	r2, [pc, #412]	@ (80061e8 <DMA_Init+0x4bc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d04a      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a65      	ldr	r2, [pc, #404]	@ (80061ec <DMA_Init+0x4c0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d045      	beq.n	80060e6 <DMA_Init+0x3ba>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a64      	ldr	r2, [pc, #400]	@ (80061f0 <DMA_Init+0x4c4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d040      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a62      	ldr	r2, [pc, #392]	@ (80061f4 <DMA_Init+0x4c8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d03b      	beq.n	80060e6 <DMA_Init+0x3ba>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a61      	ldr	r2, [pc, #388]	@ (80061f8 <DMA_Init+0x4cc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d036      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5f      	ldr	r2, [pc, #380]	@ (80061fc <DMA_Init+0x4d0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d031      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a5e      	ldr	r2, [pc, #376]	@ (8006200 <DMA_Init+0x4d4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d02c      	beq.n	80060e6 <DMA_Init+0x3ba>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5c      	ldr	r2, [pc, #368]	@ (8006204 <DMA_Init+0x4d8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d027      	beq.n	80060e6 <DMA_Init+0x3ba>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a5b      	ldr	r2, [pc, #364]	@ (8006208 <DMA_Init+0x4dc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d022      	beq.n	80060e6 <DMA_Init+0x3ba>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a59      	ldr	r2, [pc, #356]	@ (800620c <DMA_Init+0x4e0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01d      	beq.n	80060e6 <DMA_Init+0x3ba>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a58      	ldr	r2, [pc, #352]	@ (8006210 <DMA_Init+0x4e4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d018      	beq.n	80060e6 <DMA_Init+0x3ba>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a56      	ldr	r2, [pc, #344]	@ (8006214 <DMA_Init+0x4e8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <DMA_Init+0x3ba>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a55      	ldr	r2, [pc, #340]	@ (8006218 <DMA_Init+0x4ec>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00e      	beq.n	80060e6 <DMA_Init+0x3ba>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a53      	ldr	r2, [pc, #332]	@ (800621c <DMA_Init+0x4f0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d009      	beq.n	80060e6 <DMA_Init+0x3ba>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a52      	ldr	r2, [pc, #328]	@ (8006220 <DMA_Init+0x4f4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d004      	beq.n	80060e6 <DMA_Init+0x3ba>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a50      	ldr	r2, [pc, #320]	@ (8006224 <DMA_Init+0x4f8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d101      	bne.n	80060ea <DMA_Init+0x3be>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <DMA_Init+0x3c0>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e008      	b.n	800610c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006102:	d103      	bne.n	800610c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800610a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006112:	4b45      	ldr	r3, [pc, #276]	@ (8006228 <DMA_Init+0x4fc>)
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	430b      	orrs	r3, r1
 800611e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a36      	ldr	r2, [pc, #216]	@ (8006208 <DMA_Init+0x4dc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d022      	beq.n	8006178 <DMA_Init+0x44c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a35      	ldr	r2, [pc, #212]	@ (800620c <DMA_Init+0x4e0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d01d      	beq.n	8006178 <DMA_Init+0x44c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a33      	ldr	r2, [pc, #204]	@ (8006210 <DMA_Init+0x4e4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d018      	beq.n	8006178 <DMA_Init+0x44c>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a32      	ldr	r2, [pc, #200]	@ (8006214 <DMA_Init+0x4e8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <DMA_Init+0x44c>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a30      	ldr	r2, [pc, #192]	@ (8006218 <DMA_Init+0x4ec>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <DMA_Init+0x44c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2f      	ldr	r2, [pc, #188]	@ (800621c <DMA_Init+0x4f0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <DMA_Init+0x44c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a2d      	ldr	r2, [pc, #180]	@ (8006220 <DMA_Init+0x4f4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <DMA_Init+0x44c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2c      	ldr	r2, [pc, #176]	@ (8006224 <DMA_Init+0x4f8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <DMA_Init+0x450>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <DMA_Init+0x452>
 800617c:	2300      	movs	r3, #0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2200      	movs	r2, #0
 8006190:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2200      	movs	r2, #0
 8006198:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40020050 	.word	0x40020050
 80061ac:	50020050 	.word	0x50020050
 80061b0:	400200d0 	.word	0x400200d0
 80061b4:	500200d0 	.word	0x500200d0
 80061b8:	40020150 	.word	0x40020150
 80061bc:	50020150 	.word	0x50020150
 80061c0:	400201d0 	.word	0x400201d0
 80061c4:	500201d0 	.word	0x500201d0
 80061c8:	40020250 	.word	0x40020250
 80061cc:	50020250 	.word	0x50020250
 80061d0:	400202d0 	.word	0x400202d0
 80061d4:	500202d0 	.word	0x500202d0
 80061d8:	40020350 	.word	0x40020350
 80061dc:	50020350 	.word	0x50020350
 80061e0:	400203d0 	.word	0x400203d0
 80061e4:	500203d0 	.word	0x500203d0
 80061e8:	40020450 	.word	0x40020450
 80061ec:	50020450 	.word	0x50020450
 80061f0:	400204d0 	.word	0x400204d0
 80061f4:	500204d0 	.word	0x500204d0
 80061f8:	40020550 	.word	0x40020550
 80061fc:	50020550 	.word	0x50020550
 8006200:	400205d0 	.word	0x400205d0
 8006204:	500205d0 	.word	0x500205d0
 8006208:	40020650 	.word	0x40020650
 800620c:	50020650 	.word	0x50020650
 8006210:	400206d0 	.word	0x400206d0
 8006214:	500206d0 	.word	0x500206d0
 8006218:	40020750 	.word	0x40020750
 800621c:	50020750 	.word	0x50020750
 8006220:	400207d0 	.word	0x400207d0
 8006224:	500207d0 	.word	0x500207d0
 8006228:	3cc03180 	.word	0x3cc03180

0800622c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_DMAEx_List_Start_IT+0x16>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e082      	b.n	800634c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800624c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006258:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d005      	beq.n	800626c <HAL_DMAEx_List_Start_IT+0x40>
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d16a      	bne.n	800633c <HAL_DMAEx_List_Start_IT+0x110>
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d067      	beq.n	800633c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d157      	bne.n	8006328 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_DMAEx_List_Start_IT+0x5a>
 8006282:	2302      	movs	r3, #2
 8006284:	e062      	b.n	800634c <HAL_DMAEx_List_Start_IT+0x120>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2202      	movs	r2, #2
 8006292:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629a:	2202      	movs	r2, #2
 800629c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a8:	2200      	movs	r2, #0
 80062aa:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80062ba:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062ea:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f107 010c 	add.w	r1, r7, #12
 80062f6:	2200      	movs	r2, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f95b 	bl	80065b4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4619      	mov	r1, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	0c0b      	lsrs	r3, r1, #16
 800630c:	041b      	lsls	r3, r3, #16
 800630e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800631c:	4013      	ands	r3, r2
 800631e:	68f9      	ldr	r1, [r7, #12]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	430b      	orrs	r3, r1
 8006326:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	e007      	b.n	800634c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2240      	movs	r2, #64	@ 0x40
 8006340:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e004      	b.n	8006378 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f815 	bl	80063a0 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	0c1b      	lsrs	r3, r3, #16
 8006390:	b2db      	uxtb	r3, r3
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0208 	and.w	r2, r3, #8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0203 	and.w	r2, r3, #3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063ee:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80063f8:	0d1b      	lsrs	r3, r3, #20
 80063fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063fe:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	4b66      	ldr	r3, [pc, #408]	@ (80065b0 <DMA_List_GetNodeConfig+0x210>)
 8006416:	4013      	ands	r3, r2
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800643a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006442:	60da      	str	r2, [r3, #12]
 8006444:	e013      	b.n	800646e <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	e002      	b.n	800646e <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	0c1b      	lsrs	r3, r3, #16
 80064c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064cc:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80064d2:	e002      	b.n	80064da <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d04a      	beq.n	800658c <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006500:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006502:	89fa      	ldrh	r2, [r7, #14]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	b29b      	uxth	r3, r3
 8006510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006514:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006516:	89fa      	ldrh	r2, [r7, #14]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800652c:	425a      	negs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006542:	425a      	negs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800654e:	89fa      	ldrh	r2, [r7, #14]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 800655c:	89fa      	ldrh	r2, [r7, #14]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d004      	beq.n	8006578 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006572:	425a      	negs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	da11      	bge.n	80065a4 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006584:	425a      	negs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800658a:	e00b      	b.n	80065a4 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	0c002000 	.word	0x0c002000

080065b4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00c      	beq.n	80065e6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4a0d      	ldr	r2, [pc, #52]	@ (800660c <DMA_List_GetCLLRNodeInfo+0x58>)
 80065d6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00f      	beq.n	80065fe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2207      	movs	r2, #7
 80065e2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80065e4:	e00b      	b.n	80065fe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4a08      	ldr	r2, [pc, #32]	@ (8006610 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80065f0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2205      	movs	r2, #5
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	fe010000 	.word	0xfe010000
 8006610:	f8010000 	.word	0xf8010000

08006614 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006614:	b480      	push	{r7}
 8006616:	b089      	sub	sp, #36	@ 0x24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006626:	e1ba      	b.n	800699e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	2101      	movs	r1, #1
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	fa01 f303 	lsl.w	r3, r1, r3
 8006634:	4013      	ands	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 81aa 	beq.w	8006998 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a55      	ldr	r2, [pc, #340]	@ (800679c <HAL_GPIO_Init+0x188>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d15d      	bne.n	8006708 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8006652:	2201      	movs	r2, #1
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	43db      	mvns	r3, r3
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	4013      	ands	r3, r2
 8006660:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f003 0201 	and.w	r2, r3, #1
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	4313      	orrs	r3, r2
 8006674:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800667c:	4a48      	ldr	r2, [pc, #288]	@ (80067a0 <HAL_GPIO_Init+0x18c>)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006684:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8006686:	4a46      	ldr	r2, [pc, #280]	@ (80067a0 <HAL_GPIO_Init+0x18c>)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	4413      	add	r3, r2
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	08da      	lsrs	r2, r3, #3
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	3208      	adds	r2, #8
 800669a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	220f      	movs	r2, #15
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	4013      	ands	r3, r2
 80066b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	220b      	movs	r2, #11
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	08da      	lsrs	r2, r3, #3
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3208      	adds	r2, #8
 80066d2:	69f9      	ldr	r1, [r7, #28]
 80066d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	2203      	movs	r2, #3
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	2202      	movs	r2, #2
 80066f6:	fa02 f303 	lsl.w	r3, r2, r3
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e067      	b.n	80067d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d003      	beq.n	8006718 <HAL_GPIO_Init+0x104>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b12      	cmp	r3, #18
 8006716:	d145      	bne.n	80067a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	08da      	lsrs	r2, r3, #3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3208      	adds	r2, #8
 8006720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006724:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	220f      	movs	r2, #15
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	4013      	ands	r3, r2
 800673a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f003 020f 	and.w	r2, r3, #15
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	4313      	orrs	r3, r2
 8006754:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	08da      	lsrs	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3208      	adds	r2, #8
 800675e:	69f9      	ldr	r1, [r7, #28]
 8006760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	2203      	movs	r2, #3
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	4013      	ands	r3, r2
 800677a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 0203 	and.w	r2, r3, #3
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	4313      	orrs	r3, r2
 8006790:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	e01e      	b.n	80067d8 <HAL_GPIO_Init+0x1c4>
 800679a:	bf00      	nop
 800679c:	46020000 	.word	0x46020000
 80067a0:	08017f4c 	.word	0x08017f4c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	2203      	movs	r2, #3
 80067b0:	fa02 f303 	lsl.w	r3, r2, r3
 80067b4:	43db      	mvns	r3, r3
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	4013      	ands	r3, r2
 80067ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f003 0203 	and.w	r2, r3, #3
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d00b      	beq.n	80067f8 <HAL_GPIO_Init+0x1e4>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d007      	beq.n	80067f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067ec:	2b11      	cmp	r3, #17
 80067ee:	d003      	beq.n	80067f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b12      	cmp	r3, #18
 80067f6:	d130      	bne.n	800685a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	2203      	movs	r2, #3
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	4013      	ands	r3, r2
 800680e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	4313      	orrs	r3, r2
 8006820:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800682e:	2201      	movs	r2, #1
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	43db      	mvns	r3, r3
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	4013      	ands	r3, r2
 800683c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	091b      	lsrs	r3, r3, #4
 8006844:	f003 0201 	and.w	r2, r3, #1
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	4313      	orrs	r3, r2
 8006852:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b03      	cmp	r3, #3
 8006860:	d017      	beq.n	8006892 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	2203      	movs	r2, #3
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43db      	mvns	r3, r3
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	4013      	ands	r3, r2
 8006878:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	4313      	orrs	r3, r2
 800688a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d07c      	beq.n	8006998 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800689e:	4a47      	ldr	r2, [pc, #284]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	089b      	lsrs	r3, r3, #2
 80068a4:	3318      	adds	r3, #24
 80068a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	220f      	movs	r2, #15
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	4013      	ands	r3, r2
 80068c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	0a9a      	lsrs	r2, r3, #10
 80068c6:	4b3e      	ldr	r3, [pc, #248]	@ (80069c0 <HAL_GPIO_Init+0x3ac>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	f002 0203 	and.w	r2, r2, #3
 80068d0:	00d2      	lsls	r2, r2, #3
 80068d2:	4093      	lsls	r3, r2
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80068da:	4938      	ldr	r1, [pc, #224]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	089b      	lsrs	r3, r3, #2
 80068e0:	3318      	adds	r3, #24
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80068e8:	4b34      	ldr	r3, [pc, #208]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	4013      	ands	r3, r2
 80068f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800690c:	4a2b      	ldr	r2, [pc, #172]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006912:	4b2a      	ldr	r3, [pc, #168]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	43db      	mvns	r3, r3
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	4013      	ands	r3, r2
 8006920:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8006936:	4a21      	ldr	r2, [pc, #132]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800693c:	4b1f      	ldr	r3, [pc, #124]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 800693e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006942:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	43db      	mvns	r3, r3
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	4013      	ands	r3, r2
 800694c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8006962:	4a16      	ldr	r2, [pc, #88]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800696a:	4b14      	ldr	r3, [pc, #80]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 800696c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006970:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	43db      	mvns	r3, r3
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	4013      	ands	r3, r2
 800697a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8006990:	4a0a      	ldr	r2, [pc, #40]	@ (80069bc <HAL_GPIO_Init+0x3a8>)
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	3301      	adds	r3, #1
 800699c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f47f ae3d 	bne.w	8006628 <HAL_GPIO_Init+0x14>
  }
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	3724      	adds	r7, #36	@ 0x24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	46022000 	.word	0x46022000
 80069c0:	002f7f7f 	.word	0x002f7f7f

080069c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	887b      	ldrh	r3, [r7, #2]
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
 80069e0:	e001      	b.n	80069e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	807b      	strh	r3, [r7, #2]
 8006a00:	4613      	mov	r3, r2
 8006a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a04:	787b      	ldrb	r3, [r7, #1]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a0a:	887a      	ldrh	r2, [r7, #2]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8006a10:	e002      	b.n	8006a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8006a12:	887a      	ldrh	r2, [r7, #2]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a6c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d006      	beq.n	8006a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8006a6c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f814 	bl	8006a70 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8006a48:	4b08      	ldr	r3, [pc, #32]	@ (8006a6c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d006      	beq.n	8006a62 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006a54:	4a05      	ldr	r2, [pc, #20]	@ (8006a6c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 f812 	bl	8006a86 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	46022000 	.word	0x46022000

08006a70 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e08d      	b.n	8006bca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fa fd7c 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2224      	movs	r2, #36	@ 0x24
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0201 	bic.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006aec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006afc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d107      	bne.n	8006b16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b12:	609a      	str	r2, [r3, #8]
 8006b14:	e006      	b.n	8006b24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d108      	bne.n	8006b3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b3a:	605a      	str	r2, [r3, #4]
 8006b3c:	e007      	b.n	8006b4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6812      	ldr	r2, [r2, #0]
 8006b58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	69d9      	ldr	r1, [r3, #28]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	68f9      	ldr	r1, [r7, #12]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00f      	beq.n	8006c48 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c46:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00f      	beq.n	8006c72 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c60:	f043 0208 	orr.w	r2, r3, #8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00f      	beq.n	8006c9c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c8a:	f043 0202 	orr.w	r2, r3, #2
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c9a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f003 030b 	and.w	r3, r3, #11
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fb8c 	bl	80073cc <I2C_ITError>
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <I2C_Slave_ISR_IT+0x24>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e0e1      	b.n	8006f24 <I2C_Slave_ISR_IT+0x1e8>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006d7c:	6939      	ldr	r1, [r7, #16]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f9b4 	bl	80070ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d04b      	beq.n	8006e26 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d046      	beq.n	8006e26 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d128      	bne.n	8006df4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b28      	cmp	r3, #40	@ 0x28
 8006dac:	d108      	bne.n	8006dc0 <I2C_Slave_ISR_IT+0x84>
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006db4:	d104      	bne.n	8006dc0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006db6:	6939      	ldr	r1, [r7, #16]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fab3 	bl	8007324 <I2C_ITListenCplt>
 8006dbe:	e031      	b.n	8006e24 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b29      	cmp	r3, #41	@ 0x29
 8006dca:	d10e      	bne.n	8006dea <I2C_Slave_ISR_IT+0xae>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006dd2:	d00a      	beq.n	8006dea <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2210      	movs	r2, #16
 8006dda:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fc0c 	bl	80075fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 f926 	bl	8007034 <I2C_ITSlaveSeqCplt>
 8006de8:	e01c      	b.n	8006e24 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2210      	movs	r2, #16
 8006df0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006df2:	e08f      	b.n	8006f14 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2210      	movs	r2, #16
 8006dfa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e00:	f043 0204 	orr.w	r2, r3, #4
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <I2C_Slave_ISR_IT+0xda>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e14:	d17e      	bne.n	8006f14 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fad5 	bl	80073cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006e22:	e077      	b.n	8006f14 <I2C_Slave_ISR_IT+0x1d8>
 8006e24:	e076      	b.n	8006f14 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d02f      	beq.n	8006e90 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d02a      	beq.n	8006e90 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d018      	beq.n	8006e76 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d14b      	bne.n	8006f18 <I2C_Slave_ISR_IT+0x1dc>
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e86:	d047      	beq.n	8006f18 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f8d3 	bl	8007034 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006e8e:	e043      	b.n	8006f18 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d009      	beq.n	8006eae <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006ea4:	6939      	ldr	r1, [r7, #16]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f840 	bl	8006f2c <I2C_ITAddrCplt>
 8006eac:	e035      	b.n	8006f1a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d030      	beq.n	8006f1a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d02b      	beq.n	8006f1a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d018      	beq.n	8006efe <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	781a      	ldrb	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006efc:	e00d      	b.n	8006f1a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f04:	d002      	beq.n	8006f0c <I2C_Slave_ISR_IT+0x1d0>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f891 	bl	8007034 <I2C_ITSlaveSeqCplt>
 8006f12:	e002      	b.n	8006f1a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006f14:	bf00      	nop
 8006f16:	e000      	b.n	8006f1a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006f18:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f42:	2b28      	cmp	r3, #40	@ 0x28
 8006f44:	d16a      	bne.n	800701c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006f64:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f72:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006f80:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d138      	bne.n	8006ffc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f8a:	897b      	ldrh	r3, [r7, #10]
 8006f8c:	09db      	lsrs	r3, r3, #7
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	89bb      	ldrh	r3, [r7, #12]
 8006f92:	4053      	eors	r3, r2
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f003 0306 	and.w	r3, r3, #6
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11c      	bne.n	8006fd8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006f9e:	897b      	ldrh	r3, [r7, #10]
 8006fa0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d13b      	bne.n	800702c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fca:	89ba      	ldrh	r2, [r7, #12]
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff fe87 	bl	8006ce4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006fd6:	e029      	b.n	800702c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006fd8:	893b      	ldrh	r3, [r7, #8]
 8006fda:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fb4c 	bl	800767e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fee:	89ba      	ldrh	r2, [r7, #12]
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fe75 	bl	8006ce4 <HAL_I2C_AddrCallback>
}
 8006ffa:	e017      	b.n	800702c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ffc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fb3c 	bl	800767e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800700e:	89ba      	ldrh	r2, [r7, #12]
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fe65 	bl	8006ce4 <HAL_I2C_AddrCallback>
}
 800701a:	e007      	b.n	800702c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2208      	movs	r2, #8
 8007022:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d008      	beq.n	8007068 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	e00c      	b.n	8007082 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d007      	beq.n	8007082 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007080:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b29      	cmp	r3, #41	@ 0x29
 800708c:	d112      	bne.n	80070b4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2228      	movs	r2, #40	@ 0x28
 8007092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2221      	movs	r2, #33	@ 0x21
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800709c:	2101      	movs	r1, #1
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 faed 	bl	800767e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fe05 	bl	8006cbc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070b2:	e017      	b.n	80070e4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80070be:	d111      	bne.n	80070e4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2228      	movs	r2, #40	@ 0x28
 80070c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2222      	movs	r2, #34	@ 0x22
 80070cc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070ce:	2102      	movs	r1, #2
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fad4 	bl	800767e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff fdf6 	bl	8006cd0 <HAL_I2C_SlaveRxCpltCallback>
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007108:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2220      	movs	r2, #32
 8007110:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	2b21      	cmp	r3, #33	@ 0x21
 8007116:	d005      	beq.n	8007124 <I2C_ITSlaveCplt+0x38>
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b29      	cmp	r3, #41	@ 0x29
 800711c:	d002      	beq.n	8007124 <I2C_ITSlaveCplt+0x38>
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	2b28      	cmp	r3, #40	@ 0x28
 8007122:	d108      	bne.n	8007136 <I2C_ITSlaveCplt+0x4a>
      (tmpstate == HAL_I2C_STATE_LISTEN))
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007124:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 faa8 	bl	800767e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2221      	movs	r2, #33	@ 0x21
 8007132:	631a      	str	r2, [r3, #48]	@ 0x30
 8007134:	e00d      	b.n	8007152 <I2C_ITSlaveCplt+0x66>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b22      	cmp	r3, #34	@ 0x22
 800713a:	d002      	beq.n	8007142 <I2C_ITSlaveCplt+0x56>
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007140:	d107      	bne.n	8007152 <I2C_ITSlaveCplt+0x66>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007142:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa99 	bl	800767e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2222      	movs	r2, #34	@ 0x22
 8007150:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007160:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6859      	ldr	r1, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b6b      	ldr	r3, [pc, #428]	@ (800731c <I2C_ITSlaveCplt+0x230>)
 800716e:	400b      	ands	r3, r1
 8007170:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa41 	bl	80075fa <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d01c      	beq.n	80071bc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007190:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	d031      	beq.n	80071fe <I2C_ITSlaveCplt+0x112>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071a2:	b29c      	uxth	r4, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff f8e9 	bl	8006380 <HAL_DMAEx_GetFifoLevel>
 80071ae:	4603      	mov	r3, r0
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	4423      	add	r3, r4
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071ba:	e020      	b.n	80071fe <I2C_ITSlaveCplt+0x112>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01b      	beq.n	80071fe <I2C_ITSlaveCplt+0x112>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00f      	beq.n	80071fe <I2C_ITSlaveCplt+0x112>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071e6:	b29c      	uxth	r4, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff f8c7 	bl	8006380 <HAL_DMAEx_GetFifoLevel>
 80071f2:	4603      	mov	r3, r0
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	4423      	add	r3, r4
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	d020      	beq.n	800724a <I2C_ITSlaveCplt+0x15e>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0304 	bic.w	r3, r3, #4
 800720e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00c      	beq.n	800724a <I2C_ITSlaveCplt+0x15e>
    {
      hi2c->XferSize--;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007234:	3b01      	subs	r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <I2C_ITSlaveCplt+0x174>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007258:	f043 0204 	orr.w	r2, r3, #4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007272:	2b00      	cmp	r3, #0
 8007274:	d010      	beq.n	8007298 <I2C_ITSlaveCplt+0x1ac>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8a5 	bl	80073cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b28      	cmp	r3, #40	@ 0x28
 800728c:	d141      	bne.n	8007312 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800728e:	6979      	ldr	r1, [r7, #20]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f847 	bl	8007324 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007296:	e03c      	b.n	8007312 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072a0:	d014      	beq.n	80072cc <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff fec6 	bl	8007034 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007320 <I2C_ITSlaveCplt+0x234>)
 80072ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff fd1b 	bl	8006d00 <HAL_I2C_ListenCpltCallback>
}
 80072ca:	e022      	b.n	8007312 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b22      	cmp	r3, #34	@ 0x22
 80072d6:	d10e      	bne.n	80072f6 <I2C_ITSlaveCplt+0x20a>
    hi2c->State = HAL_I2C_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fcee 	bl	8006cd0 <HAL_I2C_SlaveRxCpltCallback>
}
 80072f4:	e00d      	b.n	8007312 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff fcd5 	bl	8006cbc <HAL_I2C_SlaveTxCpltCallback>
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	bd90      	pop	{r4, r7, pc}
 800731a:	bf00      	nop
 800731c:	fe00e800 	.word	0xfe00e800
 8007320:	ffff0000 	.word	0xffff0000

08007324 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a25      	ldr	r2, [pc, #148]	@ (80073c8 <I2C_ITListenCplt+0xa4>)
 8007332:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2220      	movs	r2, #32
 800733e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d022      	beq.n	80073a0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d012      	beq.n	80073a0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007398:	f043 0204 	orr.w	r2, r3, #4
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80073a0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f96a 	bl	800767e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2210      	movs	r2, #16
 80073b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff fca0 	bl	8006d00 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	ffff0000 	.word	0xffff0000

080073cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073dc:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a6d      	ldr	r2, [pc, #436]	@ (80075a0 <I2C_ITError+0x1d4>)
 80073ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	2b28      	cmp	r3, #40	@ 0x28
 8007402:	d005      	beq.n	8007410 <I2C_ITError+0x44>
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b29      	cmp	r3, #41	@ 0x29
 8007408:	d002      	beq.n	8007410 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	2b2a      	cmp	r3, #42	@ 0x2a
 800740e:	d10b      	bne.n	8007428 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007410:	2103      	movs	r1, #3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f933 	bl	800767e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2228      	movs	r2, #40	@ 0x28
 800741c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a60      	ldr	r2, [pc, #384]	@ (80075a4 <I2C_ITError+0x1d8>)
 8007424:	635a      	str	r2, [r3, #52]	@ 0x34
 8007426:	e030      	b.n	800748a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007428:	f248 0103 	movw	r1, #32771	@ 0x8003
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f926 	bl	800767e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8e1 	bl	80075fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b60      	cmp	r3, #96	@ 0x60
 8007442:	d01f      	beq.n	8007484 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b20      	cmp	r3, #32
 8007458:	d114      	bne.n	8007484 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b10      	cmp	r3, #16
 8007466:	d109      	bne.n	800747c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2210      	movs	r2, #16
 800746e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007474:	f043 0204 	orr.w	r2, r3, #4
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2220      	movs	r2, #32
 8007482:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007494:	2b00      	cmp	r3, #0
 8007496:	d039      	beq.n	800750c <I2C_ITError+0x140>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b11      	cmp	r3, #17
 800749c:	d002      	beq.n	80074a4 <I2C_ITError+0xd8>
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b21      	cmp	r3, #33	@ 0x21
 80074a2:	d133      	bne.n	800750c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074b2:	d107      	bne.n	80074c4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80074c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fe fbc0 	bl	8005c4e <HAL_DMA_GetState>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d017      	beq.n	8007504 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d8:	4a33      	ldr	r2, [pc, #204]	@ (80075a8 <I2C_ITError+0x1dc>)
 80074da:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fa0b 	bl	8005904 <HAL_DMA_Abort_IT>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d04d      	beq.n	8007590 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80074fe:	4610      	mov	r0, r2
 8007500:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007502:	e045      	b.n	8007590 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f851 	bl	80075ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800750a:	e041      	b.n	8007590 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d039      	beq.n	8007588 <I2C_ITError+0x1bc>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b12      	cmp	r3, #18
 8007518:	d002      	beq.n	8007520 <I2C_ITError+0x154>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b22      	cmp	r3, #34	@ 0x22
 800751e:	d133      	bne.n	8007588 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800752a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800752e:	d107      	bne.n	8007540 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800753e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fb82 	bl	8005c4e <HAL_DMA_GetState>
 800754a:	4603      	mov	r3, r0
 800754c:	2b01      	cmp	r3, #1
 800754e:	d017      	beq.n	8007580 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007554:	4a14      	ldr	r2, [pc, #80]	@ (80075a8 <I2C_ITError+0x1dc>)
 8007556:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe f9cd 	bl	8005904 <HAL_DMA_Abort_IT>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d011      	beq.n	8007594 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800757a:	4610      	mov	r0, r2
 800757c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800757e:	e009      	b.n	8007594 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f813 	bl	80075ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007586:	e005      	b.n	8007594 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f80f 	bl	80075ac <I2C_TreatErrorCallback>
  }
}
 800758e:	e002      	b.n	8007596 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007590:	bf00      	nop
 8007592:	e000      	b.n	8007596 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007594:	bf00      	nop
}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	ffff0000 	.word	0xffff0000
 80075a4:	08006d3d 	.word	0x08006d3d
 80075a8:	08007643 	.word	0x08007643

080075ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b60      	cmp	r3, #96	@ 0x60
 80075be:	d10e      	bne.n	80075de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fba6 	bl	8006d28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075dc:	e009      	b.n	80075f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff fb91 	bl	8006d14 <HAL_I2C_ErrorCallback>
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b02      	cmp	r3, #2
 800760e:	d103      	bne.n	8007618 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2200      	movs	r2, #0
 8007616:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	d007      	beq.n	8007636 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699a      	ldr	r2, [r3, #24]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f042 0201 	orr.w	r2, r2, #1
 8007634:	619a      	str	r2, [r3, #24]
  }
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765c:	2200      	movs	r2, #0
 800765e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766c:	2200      	movs	r2, #0
 800766e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff ff9b 	bl	80075ac <I2C_TreatErrorCallback>
}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800768e:	887b      	ldrh	r3, [r7, #2]
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00f      	beq.n	80076b8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800769e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076ac:	2b28      	cmp	r3, #40	@ 0x28
 80076ae:	d003      	beq.n	80076b8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076b6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076b8:	887b      	ldrh	r3, [r7, #2]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00f      	beq.n	80076e2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80076c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076d6:	2b28      	cmp	r3, #40	@ 0x28
 80076d8:	d003      	beq.n	80076e2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da03      	bge.n	80076f2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80076f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076f2:	887b      	ldrh	r3, [r7, #2]
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	d103      	bne.n	8007700 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80076fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007700:	887b      	ldrh	r3, [r7, #2]
 8007702:	2b20      	cmp	r3, #32
 8007704:	d103      	bne.n	800770e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f043 0320 	orr.w	r3, r3, #32
 800770c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800770e:	887b      	ldrh	r3, [r7, #2]
 8007710:	2b40      	cmp	r3, #64	@ 0x40
 8007712:	d103      	bne.n	800771c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800771a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	43da      	mvns	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	400a      	ands	r2, r1
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b20      	cmp	r3, #32
 800774e:	d138      	bne.n	80077c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007756:	2b01      	cmp	r3, #1
 8007758:	d101      	bne.n	800775e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800775a:	2302      	movs	r3, #2
 800775c:	e032      	b.n	80077c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2224      	movs	r2, #36	@ 0x24
 800776a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800778c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e000      	b.n	80077c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077c2:	2302      	movs	r3, #2
  }
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d139      	bne.n	800785a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e033      	b.n	800785c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	@ 0x24
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0201 	bic.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007822:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f042 0201 	orr.w	r2, r2, #1
 8007844:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	e000      	b.n	800785c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800785a:	2302      	movs	r3, #2
  }
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8007874:	4b0b      	ldr	r3, [pc, #44]	@ (80078a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	73fb      	strb	r3, [r7, #15]
 8007884:	e007      	b.n	8007896 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8007886:	4b07      	ldr	r3, [pc, #28]	@ (80078a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f023 0204 	bic.w	r2, r3, #4
 800788e:	4905      	ldr	r1, [pc, #20]	@ (80078a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]
  }

  return status;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	40030400 	.word	0x40030400

080078a8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80078ac:	4b05      	ldr	r3, [pc, #20]	@ (80078c4 <HAL_ICACHE_Enable+0x1c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a04      	ldr	r2, [pc, #16]	@ (80078c4 <HAL_ICACHE_Enable+0x1c>)
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	40030400 	.word	0x40030400

080078c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80078c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ca:	b08f      	sub	sp, #60	@ 0x3c
 80078cc:	af0a      	add	r7, sp, #40	@ 0x28
 80078ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e116      	b.n	8007b08 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d106      	bne.n	80078fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fa fe19 	bl	800252c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2203      	movs	r2, #3
 80078fe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f007 ffbe 	bl	800f89a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	687e      	ldr	r6, [r7, #4]
 8007926:	466d      	mov	r5, sp
 8007928:	f106 0410 	add.w	r4, r6, #16
 800792c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800792e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007938:	e885 0003 	stmia.w	r5, {r0, r1}
 800793c:	1d33      	adds	r3, r6, #4
 800793e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007940:	6838      	ldr	r0, [r7, #0]
 8007942:	f007 fecb 	bl	800f6dc <USB_CoreInit>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e0d7      	b.n	8007b08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f007 ffac 	bl	800f8bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
 8007968:	e04a      	b.n	8007a00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800796a:	7bfa      	ldrb	r2, [r7, #15]
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	4613      	mov	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	440b      	add	r3, r1
 8007978:	333d      	adds	r3, #61	@ 0x3d
 800797a:	2201      	movs	r2, #1
 800797c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800797e:	7bfa      	ldrb	r2, [r7, #15]
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	4613      	mov	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	440b      	add	r3, r1
 800798c:	333c      	adds	r3, #60	@ 0x3c
 800798e:	7bfa      	ldrb	r2, [r7, #15]
 8007990:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007992:	7bfa      	ldrb	r2, [r7, #15]
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	b298      	uxth	r0, r3
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	4613      	mov	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	3356      	adds	r3, #86	@ 0x56
 80079a6:	4602      	mov	r2, r0
 80079a8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80079aa:	7bfa      	ldrb	r2, [r7, #15]
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	3340      	adds	r3, #64	@ 0x40
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80079be:	7bfa      	ldrb	r2, [r7, #15]
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	4613      	mov	r3, r2
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	440b      	add	r3, r1
 80079cc:	3344      	adds	r3, #68	@ 0x44
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80079d2:	7bfa      	ldrb	r2, [r7, #15]
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	3348      	adds	r3, #72	@ 0x48
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80079e6:	7bfa      	ldrb	r2, [r7, #15]
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	440b      	add	r3, r1
 80079f4:	334c      	adds	r3, #76	@ 0x4c
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	3301      	adds	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
 8007a00:	7bfa      	ldrb	r2, [r7, #15]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d3af      	bcc.n	800796a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
 8007a0e:	e044      	b.n	8007a9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007a10:	7bfa      	ldrb	r2, [r7, #15]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8007a22:	2200      	movs	r2, #0
 8007a24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007a26:	7bfa      	ldrb	r2, [r7, #15]
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8007a38:	7bfa      	ldrb	r2, [r7, #15]
 8007a3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007a3c:	7bfa      	ldrb	r2, [r7, #15]
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4613      	mov	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007a52:	7bfa      	ldrb	r2, [r7, #15]
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	4613      	mov	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	440b      	add	r3, r1
 8007a60:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007a68:	7bfa      	ldrb	r2, [r7, #15]
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007a7e:	7bfa      	ldrb	r2, [r7, #15]
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	440b      	add	r3, r1
 8007a8c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	3301      	adds	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
 8007a9a:	7bfa      	ldrb	r2, [r7, #15]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d3b5      	bcc.n	8007a10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	603b      	str	r3, [r7, #0]
 8007aaa:	687e      	ldr	r6, [r7, #4]
 8007aac:	466d      	mov	r5, sp
 8007aae:	f106 0410 	add.w	r4, r6, #16
 8007ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ac2:	1d33      	adds	r3, r6, #4
 8007ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ac6:	6838      	ldr	r0, [r7, #0]
 8007ac8:	f007 ff44 	bl	800f954 <USB_DevInit>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e014      	b.n	8007b08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d102      	bne.n	8007afc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 f96a 	bl	8008dd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f008 ff64 	bl	80109ce <USB_DevDisconnect>

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_PCD_Start+0x1c>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e01c      	b.n	8007b66 <HAL_PCD_Start+0x56>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d105      	bne.n	8007b48 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f007 fe93 	bl	800f878 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f008 ff18 	bl	801098c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007b6e:	b590      	push	{r4, r7, lr}
 8007b70:	b08d      	sub	sp, #52	@ 0x34
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f008 ffd6 	bl	8010b36 <USB_GetMode>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 84b7 	bne.w	8008500 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f008 ff3a 	bl	8010a10 <USB_ReadInterrupts>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 84ad 	beq.w	80084fe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	0a1b      	lsrs	r3, r3, #8
 8007bae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f008 ff27 	bl	8010a10 <USB_ReadInterrupts>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d107      	bne.n	8007bdc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695a      	ldr	r2, [r3, #20]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f002 0202 	and.w	r2, r2, #2
 8007bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f008 ff15 	bl	8010a10 <USB_ReadInterrupts>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d161      	bne.n	8007cb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0210 	bic.w	r2, r2, #16
 8007bfe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f003 020f 	and.w	r2, r3, #15
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	0c5b      	lsrs	r3, r3, #17
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d124      	bne.n	8007c76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d035      	beq.n	8007ca4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	091b      	lsrs	r3, r3, #4
 8007c40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6a38      	ldr	r0, [r7, #32]
 8007c4c:	f008 fd4c 	bl	80106e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	091b      	lsrs	r3, r3, #4
 8007c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c5c:	441a      	add	r2, r3
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	695a      	ldr	r2, [r3, #20]
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	091b      	lsrs	r3, r3, #4
 8007c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c6e:	441a      	add	r2, r3
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	615a      	str	r2, [r3, #20]
 8007c74:	e016      	b.n	8007ca4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	0c5b      	lsrs	r3, r3, #17
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	2b06      	cmp	r3, #6
 8007c80:	d110      	bne.n	8007ca4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007c88:	2208      	movs	r2, #8
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6a38      	ldr	r0, [r7, #32]
 8007c8e:	f008 fd2b 	bl	80106e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	695a      	ldr	r2, [r3, #20]
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	091b      	lsrs	r3, r3, #4
 8007c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c9e:	441a      	add	r2, r3
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0210 	orr.w	r2, r2, #16
 8007cb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f008 fea9 	bl	8010a10 <USB_ReadInterrupts>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007cc8:	f040 80a7 	bne.w	8007e1a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f008 feae 	bl	8010a36 <USB_ReadDevAllOutEpInterrupt>
 8007cda:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007cdc:	e099      	b.n	8007e12 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 808e 	beq.w	8007e06 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f008 fed2 	bl	8010a9e <USB_ReadDevOutEPInterrupt>
 8007cfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d12:	461a      	mov	r2, r3
 8007d14:	2301      	movs	r3, #1
 8007d16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fed2 	bl	8008ac4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f003 0308 	and.w	r3, r3, #8
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00c      	beq.n	8007d44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d36:	461a      	mov	r2, r3
 8007d38:	2308      	movs	r3, #8
 8007d3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007d3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 ffa8 	bl	8008c94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f003 0310 	and.w	r3, r3, #16
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d008      	beq.n	8007d60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d030      	beq.n	8007dcc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d72:	2b80      	cmp	r3, #128	@ 0x80
 8007d74:	d109      	bne.n	8007d8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	78db      	ldrb	r3, [r3, #3]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d108      	bne.n	8007dba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2200      	movs	r2, #0
 8007dac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f00f fdb1 	bl	801791c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	2302      	movs	r3, #2
 8007dca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d008      	beq.n	8007de8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de2:	461a      	mov	r2, r3
 8007de4:	2320      	movs	r3, #32
 8007de6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	3301      	adds	r3, #1
 8007e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f47f af62 	bne.w	8007cde <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f008 fdf6 	bl	8010a10 <USB_ReadInterrupts>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e2e:	f040 80db 	bne.w	8007fe8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f008 fe17 	bl	8010a6a <USB_ReadDevAllInEpInterrupt>
 8007e3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007e42:	e0cd      	b.n	8007fe0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 80c2 	beq.w	8007fd4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f008 fe3d 	bl	8010ada <USB_ReadDevInEPInterrupt>
 8007e60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d057      	beq.n	8007f1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	2201      	movs	r2, #1
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	43db      	mvns	r3, r3
 8007e86:	69f9      	ldr	r1, [r7, #28]
 8007e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d132      	bne.n	8007f10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eae:	4613      	mov	r3, r2
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3348      	adds	r3, #72	@ 0x48
 8007eba:	6819      	ldr	r1, [r3, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4403      	add	r3, r0
 8007eca:	3344      	adds	r3, #68	@ 0x44
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4419      	add	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4403      	add	r3, r0
 8007ede:	3348      	adds	r3, #72	@ 0x48
 8007ee0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d113      	bne.n	8007f10 <HAL_PCD_IRQHandler+0x3a2>
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eec:	4613      	mov	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	334c      	adds	r3, #76	@ 0x4c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d108      	bne.n	8007f10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	f008 fe44 	bl	8010b98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f00f fc9e 	bl	8017858 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f32:	461a      	mov	r2, r3
 8007f34:	2308      	movs	r3, #8
 8007f36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f003 0310 	and.w	r3, r3, #16
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d008      	beq.n	8007f54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f4e:	461a      	mov	r2, r3
 8007f50:	2310      	movs	r3, #16
 8007f52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	2340      	movs	r3, #64	@ 0x40
 8007f6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d023      	beq.n	8007fc2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f7c:	6a38      	ldr	r0, [r7, #32]
 8007f7e:	f007 fe2d 	bl	800fbdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f84:	4613      	mov	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	3338      	adds	r3, #56	@ 0x38
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4413      	add	r3, r2
 8007f92:	3304      	adds	r3, #4
 8007f94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	78db      	ldrb	r3, [r3, #3]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d108      	bne.n	8007fb0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f00f fcc8 	bl	8017940 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fcea 	bl	80089a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	085b      	lsrs	r3, r3, #1
 8007fde:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f47f af2e 	bne.w	8007e44 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f008 fd0f 	bl	8010a10 <USB_ReadInterrupts>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ffc:	d122      	bne.n	8008044 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800800c:	f023 0301 	bic.w	r3, r3, #1
 8008010:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8008018:	2b01      	cmp	r3, #1
 800801a:	d108      	bne.n	800802e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fef6 	bl	8008e18 <HAL_PCDEx_LPM_Callback>
 800802c:	e002      	b.n	8008034 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f00f fc66 	bl	8017900 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	695a      	ldr	r2, [r3, #20]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f008 fce1 	bl	8010a10 <USB_ReadInterrupts>
 800804e:	4603      	mov	r3, r0
 8008050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008058:	d112      	bne.n	8008080 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b01      	cmp	r3, #1
 8008068:	d102      	bne.n	8008070 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f00f fc3a 	bl	80178e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800807e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f008 fcc3 	bl	8010a10 <USB_ReadInterrupts>
 800808a:	4603      	mov	r3, r0
 800808c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008094:	d121      	bne.n	80080da <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80080a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d111      	bne.n	80080d4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080be:	089b      	lsrs	r3, r3, #2
 80080c0:	f003 020f 	and.w	r2, r3, #15
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80080ca:	2101      	movs	r1, #1
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fea3 	bl	8008e18 <HAL_PCDEx_LPM_Callback>
 80080d2:	e002      	b.n	80080da <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f00f fc05 	bl	80178e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4618      	mov	r0, r3
 80080e0:	f008 fc96 	bl	8010a10 <USB_ReadInterrupts>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ee:	f040 80b7 	bne.w	8008260 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2110      	movs	r1, #16
 800810c:	4618      	mov	r0, r3
 800810e:	f007 fd65 	bl	800fbdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008112:	2300      	movs	r3, #0
 8008114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008116:	e046      	b.n	80081a6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008124:	461a      	mov	r2, r3
 8008126:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800812a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800812c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	440a      	add	r2, r1
 8008142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008146:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800814a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800814c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008158:	461a      	mov	r2, r3
 800815a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800815e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	440a      	add	r2, r1
 8008176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800817a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800817e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800819a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800819e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a2:	3301      	adds	r3, #1
 80081a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d3b3      	bcc.n	8008118 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081be:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80081c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d016      	beq.n	80081fa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081dc:	f043 030b 	orr.w	r3, r3, #11
 80081e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081f2:	f043 030b 	orr.w	r3, r3, #11
 80081f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80081f8:	e015      	b.n	8008226 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	69fa      	ldr	r2, [r7, #28]
 8008204:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008208:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800820c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008210:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008220:	f043 030b 	orr.w	r3, r3, #11
 8008224:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008234:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008238:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800824a:	461a      	mov	r2, r3
 800824c:	f008 fca4 	bl	8010b98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800825e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4618      	mov	r0, r3
 8008266:	f008 fbd3 	bl	8010a10 <USB_ReadInterrupts>
 800826a:	4603      	mov	r3, r0
 800826c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008274:	d124      	bne.n	80082c0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f008 fc69 	bl	8010b52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f007 fd26 	bl	800fcd6 <USB_GetDevSpeed>
 800828a:	4603      	mov	r3, r0
 800828c:	461a      	mov	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681c      	ldr	r4, [r3, #0]
 8008296:	f002 f847 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 800829a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	461a      	mov	r2, r3
 80082a4:	4620      	mov	r0, r4
 80082a6:	f007 fa45 	bl	800f734 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f00f fafc 	bl	80178a8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695a      	ldr	r2, [r3, #20]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80082be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f008 fba3 	bl	8010a10 <USB_ReadInterrupts>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d10a      	bne.n	80082ea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f00f fad9 	bl	801788c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695a      	ldr	r2, [r3, #20]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f002 0208 	and.w	r2, r2, #8
 80082e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f008 fb8e 	bl	8010a10 <USB_ReadInterrupts>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082fa:	2b80      	cmp	r3, #128	@ 0x80
 80082fc:	d122      	bne.n	8008344 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800830a:	2301      	movs	r3, #1
 800830c:	627b      	str	r3, [r7, #36]	@ 0x24
 800830e:	e014      	b.n	800833a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008314:	4613      	mov	r3, r2
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d105      	bne.n	8008334 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832a:	b2db      	uxtb	r3, r3
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fb09 	bl	8008946 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	3301      	adds	r3, #1
 8008338:	627b      	str	r3, [r7, #36]	@ 0x24
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008340:	429a      	cmp	r2, r3
 8008342:	d3e5      	bcc.n	8008310 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f008 fb61 	bl	8010a10 <USB_ReadInterrupts>
 800834e:	4603      	mov	r3, r0
 8008350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008358:	d13b      	bne.n	80083d2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800835a:	2301      	movs	r3, #1
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
 800835e:	e02b      	b.n	80083b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	3340      	adds	r3, #64	@ 0x40
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d115      	bne.n	80083b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008386:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008388:	2b00      	cmp	r3, #0
 800838a:	da12      	bge.n	80083b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008390:	4613      	mov	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	333f      	adds	r3, #63	@ 0x3f
 800839c:	2201      	movs	r2, #1
 800839e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 faca 	bl	8008946 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	3301      	adds	r3, #1
 80083b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083be:	429a      	cmp	r2, r3
 80083c0:	d3ce      	bcc.n	8008360 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	695a      	ldr	r2, [r3, #20]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80083d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f008 fb1a 	bl	8010a10 <USB_ReadInterrupts>
 80083dc:	4603      	mov	r3, r0
 80083de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083e6:	d155      	bne.n	8008494 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083e8:	2301      	movs	r3, #1
 80083ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ec:	e045      	b.n	800847a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008402:	4613      	mov	r3, r2
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d12e      	bne.n	8008474 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008416:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008418:	2b00      	cmp	r3, #0
 800841a:	da2b      	bge.n	8008474 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8008428:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800842c:	429a      	cmp	r2, r3
 800842e:	d121      	bne.n	8008474 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008434:	4613      	mov	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8008442:	2201      	movs	r2, #1
 8008444:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800846c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008470:	6053      	str	r3, [r2, #4]
            break;
 8008472:	e007      	b.n	8008484 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	3301      	adds	r3, #1
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008480:	429a      	cmp	r2, r3
 8008482:	d3b4      	bcc.n	80083ee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695a      	ldr	r2, [r3, #20]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008492:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f008 fab9 	bl	8010a10 <USB_ReadInterrupts>
 800849e:	4603      	mov	r3, r0
 80084a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80084a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a8:	d10a      	bne.n	80084c0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f00f fa5a 	bl	8017964 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80084be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f008 faa3 	bl	8010a10 <USB_ReadInterrupts>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d115      	bne.n	8008500 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	f003 0304 	and.w	r3, r3, #4
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f00f fa4a 	bl	8017980 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6859      	ldr	r1, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	605a      	str	r2, [r3, #4]
 80084fc:	e000      	b.n	8008500 <HAL_PCD_IRQHandler+0x992>
      return;
 80084fe:	bf00      	nop
    }
  }
}
 8008500:	3734      	adds	r7, #52	@ 0x34
 8008502:	46bd      	mov	sp, r7
 8008504:	bd90      	pop	{r4, r7, pc}

08008506 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	460b      	mov	r3, r1
 8008510:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_PCD_SetAddress+0x1a>
 800851c:	2302      	movs	r3, #2
 800851e:	e013      	b.n	8008548 <HAL_PCD_SetAddress+0x42>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	78fa      	ldrb	r2, [r7, #3]
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f008 fa01 	bl	8010940 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	461a      	mov	r2, r3
 800855e:	4603      	mov	r3, r0
 8008560:	70fb      	strb	r3, [r7, #3]
 8008562:	460b      	mov	r3, r1
 8008564:	803b      	strh	r3, [r7, #0]
 8008566:	4613      	mov	r3, r2
 8008568:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800856e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008572:	2b00      	cmp	r3, #0
 8008574:	da0f      	bge.n	8008596 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	f003 020f 	and.w	r2, r3, #15
 800857c:	4613      	mov	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	3338      	adds	r3, #56	@ 0x38
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	3304      	adds	r3, #4
 800858c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	705a      	strb	r2, [r3, #1]
 8008594:	e00f      	b.n	80085b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	f003 020f 	and.w	r2, r3, #15
 800859c:	4613      	mov	r3, r2
 800859e:	00db      	lsls	r3, r3, #3
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	4413      	add	r3, r2
 80085ac:	3304      	adds	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80085c2:	883a      	ldrh	r2, [r7, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	78ba      	ldrb	r2, [r7, #2]
 80085cc:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80085e0:	78bb      	ldrb	r3, [r7, #2]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d102      	bne.n	80085ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_PCD_EP_Open+0xaa>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e00e      	b.n	8008618 <HAL_PCD_EP_Open+0xc8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	4618      	mov	r0, r3
 800860a:	f007 fb89 	bl	800fd20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8008616:	7afb      	ldrb	r3, [r7, #11]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800862c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008630:	2b00      	cmp	r3, #0
 8008632:	da0f      	bge.n	8008654 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 020f 	and.w	r2, r3, #15
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	3338      	adds	r3, #56	@ 0x38
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	3304      	adds	r3, #4
 800864a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	705a      	strb	r2, [r3, #1]
 8008652:	e00f      	b.n	8008674 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	f003 020f 	and.w	r2, r3, #15
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	3304      	adds	r3, #4
 800866c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	b2da      	uxtb	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <HAL_PCD_EP_Close+0x6e>
 800868a:	2302      	movs	r3, #2
 800868c:	e00e      	b.n	80086ac <HAL_PCD_EP_Close+0x8c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	4618      	mov	r0, r3
 800869e:	f007 fbc7 	bl	800fe30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	607a      	str	r2, [r7, #4]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	460b      	mov	r3, r1
 80086c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	f003 020f 	and.w	r2, r3, #15
 80086ca:	4613      	mov	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4413      	add	r3, r2
 80086da:	3304      	adds	r3, #4
 80086dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2200      	movs	r2, #0
 80086ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2200      	movs	r2, #0
 80086f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d102      	bne.n	8008710 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	6979      	ldr	r1, [r7, #20]
 800871e:	f007 fc63 	bl	800ffe8 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	f003 020f 	and.w	r2, r3, #15
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800874e:	681b      	ldr	r3, [r3, #0]
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	460b      	mov	r3, r1
 800876a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	f003 020f 	and.w	r2, r3, #15
 8008772:	4613      	mov	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	3338      	adds	r3, #56	@ 0x38
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	3304      	adds	r3, #4
 8008782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2200      	movs	r2, #0
 8008794:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2201      	movs	r2, #1
 800879a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800879c:	7afb      	ldrb	r3, [r7, #11]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d102      	bne.n	80087b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6818      	ldr	r0, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	6979      	ldr	r1, [r7, #20]
 80087c4:	f007 fc10 	bl	800ffe8 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	f003 020f 	and.w	r2, r3, #15
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d901      	bls.n	80087f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e050      	b.n	8008892 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80087f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	da0f      	bge.n	8008818 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	f003 020f 	and.w	r2, r3, #15
 80087fe:	4613      	mov	r3, r2
 8008800:	00db      	lsls	r3, r3, #3
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	3338      	adds	r3, #56	@ 0x38
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	3304      	adds	r3, #4
 800880e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2201      	movs	r2, #1
 8008814:	705a      	strb	r2, [r3, #1]
 8008816:	e00d      	b.n	8008834 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	4613      	mov	r3, r2
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	4413      	add	r3, r2
 800882a:	3304      	adds	r3, #4
 800882c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	b2da      	uxtb	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <HAL_PCD_EP_SetStall+0x82>
 8008850:	2302      	movs	r3, #2
 8008852:	e01e      	b.n	8008892 <HAL_PCD_EP_SetStall+0xc0>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68f9      	ldr	r1, [r7, #12]
 8008862:	4618      	mov	r0, r3
 8008864:	f007 ff98 	bl	8010798 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	b2d9      	uxtb	r1, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008882:	461a      	mov	r2, r3
 8008884:	f008 f988 	bl	8010b98 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	f003 020f 	and.w	r2, r3, #15
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d901      	bls.n	80088b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e042      	b.n	800893e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80088b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	da0f      	bge.n	80088e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	f003 020f 	and.w	r2, r3, #15
 80088c6:	4613      	mov	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	3338      	adds	r3, #56	@ 0x38
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	4413      	add	r3, r2
 80088d4:	3304      	adds	r3, #4
 80088d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2201      	movs	r2, #1
 80088dc:	705a      	strb	r2, [r3, #1]
 80088de:	e00f      	b.n	8008900 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	f003 020f 	and.w	r2, r3, #15
 80088e6:	4613      	mov	r3, r2
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	4413      	add	r3, r2
 80088f6:	3304      	adds	r3, #4
 80088f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	f003 030f 	and.w	r3, r3, #15
 800890c:	b2da      	uxtb	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_PCD_EP_ClrStall+0x86>
 800891c:	2302      	movs	r3, #2
 800891e:	e00e      	b.n	800893e <HAL_PCD_EP_ClrStall+0xa4>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68f9      	ldr	r1, [r7, #12]
 800892e:	4618      	mov	r0, r3
 8008930:	f007 ffa0 	bl	8010874 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008956:	2b00      	cmp	r3, #0
 8008958:	da0c      	bge.n	8008974 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	f003 020f 	and.w	r2, r3, #15
 8008960:	4613      	mov	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	3338      	adds	r3, #56	@ 0x38
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	3304      	adds	r3, #4
 8008970:	60fb      	str	r3, [r7, #12]
 8008972:	e00c      	b.n	800898e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008974:	78fb      	ldrb	r3, [r7, #3]
 8008976:	f003 020f 	and.w	r2, r3, #15
 800897a:	4613      	mov	r3, r2
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	4413      	add	r3, r2
 800898a:	3304      	adds	r3, #4
 800898c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68f9      	ldr	r1, [r7, #12]
 8008994:	4618      	mov	r0, r3
 8008996:	f007 fdbf 	bl	8010518 <USB_EPStopXfer>
 800899a:	4603      	mov	r3, r0
 800899c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800899e:	7afb      	ldrb	r3, [r7, #11]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	@ 0x28
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	4613      	mov	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	3338      	adds	r3, #56	@ 0x38
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	4413      	add	r3, r2
 80089cc:	3304      	adds	r3, #4
 80089ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	695a      	ldr	r2, [r3, #20]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d901      	bls.n	80089e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e06c      	b.n	8008aba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d902      	bls.n	80089fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	3303      	adds	r3, #3
 8008a00:	089b      	lsrs	r3, r3, #2
 8008a02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a04:	e02b      	b.n	8008a5e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d902      	bls.n	8008a22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	3303      	adds	r3, #3
 8008a26:	089b      	lsrs	r3, r3, #2
 8008a28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68d9      	ldr	r1, [r3, #12]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	4603      	mov	r3, r0
 8008a40:	6978      	ldr	r0, [r7, #20]
 8008a42:	f007 fe13 	bl	801066c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	441a      	add	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	695a      	ldr	r2, [r3, #20]
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	441a      	add	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d809      	bhi.n	8008a88 <PCD_WriteEmptyTxFifo+0xe0>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	695a      	ldr	r2, [r3, #20]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d203      	bcs.n	8008a88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1be      	bne.n	8008a06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d811      	bhi.n	8008ab8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	f003 030f 	and.w	r3, r3, #15
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	43db      	mvns	r3, r3
 8008aae:	6939      	ldr	r1, [r7, #16]
 8008ab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	333c      	adds	r3, #60	@ 0x3c
 8008adc:	3304      	adds	r3, #4
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d17b      	bne.n	8008bf2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d015      	beq.n	8008b30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	4a61      	ldr	r2, [pc, #388]	@ (8008c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	f240 80b9 	bls.w	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80b3 	beq.w	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b26:	461a      	mov	r2, r3
 8008b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b2c:	6093      	str	r3, [r2, #8]
 8008b2e:	e0a7      	b.n	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d009      	beq.n	8008b4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b46:	461a      	mov	r2, r3
 8008b48:	2320      	movs	r3, #32
 8008b4a:	6093      	str	r3, [r2, #8]
 8008b4c:	e098      	b.n	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f040 8093 	bne.w	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8008c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d90f      	bls.n	8008b82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00a      	beq.n	8008b82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b78:	461a      	mov	r2, r3
 8008b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b7e:	6093      	str	r3, [r2, #8]
 8008b80:	e07e      	b.n	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	4413      	add	r3, r2
 8008b94:	3304      	adds	r3, #4
 8008b96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a1a      	ldr	r2, [r3, #32]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	0159      	lsls	r1, r3, #5
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	440b      	add	r3, r1
 8008ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d114      	bne.n	8008be4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d109      	bne.n	8008bd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2101      	movs	r1, #1
 8008bd0:	f007 ffe2 	bl	8010b98 <USB_EP0_OutStart>
 8008bd4:	e006      	b.n	8008be4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	441a      	add	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f00e fe19 	bl	8017822 <HAL_PCD_DataOutStageCallback>
 8008bf0:	e046      	b.n	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	4a26      	ldr	r2, [pc, #152]	@ (8008c90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d124      	bne.n	8008c44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00a      	beq.n	8008c1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c10:	461a      	mov	r2, r3
 8008c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c16:	6093      	str	r3, [r2, #8]
 8008c18:	e032      	b.n	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d008      	beq.n	8008c36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c30:	461a      	mov	r2, r3
 8008c32:	2320      	movs	r3, #32
 8008c34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f00e fdf0 	bl	8017822 <HAL_PCD_DataOutStageCallback>
 8008c42:	e01d      	b.n	8008c80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d114      	bne.n	8008c74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d108      	bne.n	8008c74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	2100      	movs	r1, #0
 8008c70:	f007 ff92 	bl	8010b98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f00e fdd1 	bl	8017822 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3720      	adds	r7, #32
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	4f54300a 	.word	0x4f54300a
 8008c90:	4f54310a 	.word	0x4f54310a

08008c94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	333c      	adds	r3, #60	@ 0x3c
 8008cac:	3304      	adds	r3, #4
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4a15      	ldr	r2, [pc, #84]	@ (8008d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d90e      	bls.n	8008ce8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d009      	beq.n	8008ce8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ce6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f00e fd88 	bl	80177fe <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d90c      	bls.n	8008d10 <PCD_EP_OutSetupPacket_int+0x7c>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d108      	bne.n	8008d10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008d08:	461a      	mov	r2, r3
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	f007 ff44 	bl	8010b98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	4f54300a 	.word	0x4f54300a

08008d20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d107      	bne.n	8008d4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008d3e:	883b      	ldrh	r3, [r7, #0]
 8008d40:	0419      	lsls	r1, r3, #16
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d4c:	e028      	b.n	8008da0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d54:	0c1b      	lsrs	r3, r3, #16
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	4413      	add	r3, r2
 8008d5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]
 8008d60:	e00d      	b.n	8008d7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	3340      	adds	r3, #64	@ 0x40
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	0c1b      	lsrs	r3, r3, #16
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	4413      	add	r3, r2
 8008d76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	73fb      	strb	r3, [r7, #15]
 8008d7e:	7bfa      	ldrb	r2, [r7, #15]
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d3ec      	bcc.n	8008d62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008d88:	883b      	ldrh	r3, [r7, #0]
 8008d8a:	0418      	lsls	r0, r3, #16
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	4302      	orrs	r2, r0
 8008d98:	3340      	adds	r3, #64	@ 0x40
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	460b      	mov	r3, r1
 8008db8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	887a      	ldrh	r2, [r7, #2]
 8008dc0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e02:	f043 0303 	orr.w	r3, r3, #3
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008e38:	4b39      	ldr	r3, [pc, #228]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008e40:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d10b      	bne.n	8008e62 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e50:	d905      	bls.n	8008e5e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008e52:	4b33      	ldr	r3, [pc, #204]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	4a32      	ldr	r2, [pc, #200]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e5c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e057      	b.n	8008f12 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e68:	d90a      	bls.n	8008e80 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8008e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	4a2a      	ldr	r2, [pc, #168]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e7c:	60d3      	str	r3, [r2, #12]
 8008e7e:	e007      	b.n	8008e90 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008e80:	4b27      	ldr	r3, [pc, #156]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008e88:	4925      	ldr	r1, [pc, #148]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008e90:	4b24      	ldr	r3, [pc, #144]	@ (8008f24 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a24      	ldr	r2, [pc, #144]	@ (8008f28 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008e96:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9a:	099b      	lsrs	r3, r3, #6
 8008e9c:	2232      	movs	r2, #50	@ 0x32
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ea2:	4a21      	ldr	r2, [pc, #132]	@ (8008f28 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea8:	099b      	lsrs	r3, r3, #6
 8008eaa:	3301      	adds	r3, #1
 8008eac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008eae:	e002      	b.n	8008eb6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d102      	bne.n	8008ec8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1f3      	bne.n	8008eb0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d01b      	beq.n	8008f06 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008ece:	4b15      	ldr	r3, [pc, #84]	@ (8008f24 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a15      	ldr	r2, [pc, #84]	@ (8008f28 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed8:	099b      	lsrs	r3, r3, #6
 8008eda:	2232      	movs	r2, #50	@ 0x32
 8008edc:	fb02 f303 	mul.w	r3, r2, r3
 8008ee0:	4a11      	ldr	r2, [pc, #68]	@ (8008f28 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	099b      	lsrs	r3, r3, #6
 8008ee8:	3301      	adds	r3, #1
 8008eea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008eec:	e002      	b.n	8008ef4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d102      	bne.n	8008f06 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1f3      	bne.n	8008eee <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e000      	b.n	8008f12 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	46020800 	.word	0x46020800
 8008f24:	20000050 	.word	0x20000050
 8008f28:	10624dd3 	.word	0x10624dd3

08008f2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008f30:	4b04      	ldr	r3, [pc, #16]	@ (8008f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8008f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	46020800 	.word	0x46020800

08008f48 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8008f4c:	4b05      	ldr	r3, [pc, #20]	@ (8008f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	4a04      	ldr	r2, [pc, #16]	@ (8008f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f56:	6113      	str	r3, [r2, #16]
}
 8008f58:	bf00      	nop
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	46020800 	.word	0x46020800

08008f68 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8008f6c:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <HAL_PWREx_EnableVddA+0x1c>)
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	4a04      	ldr	r2, [pc, #16]	@ (8008f84 <HAL_PWREx_EnableVddA+0x1c>)
 8008f72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f76:	6113      	str	r3, [r2, #16]
}
 8008f78:	bf00      	nop
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	46020800 	.word	0x46020800

08008f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08e      	sub	sp, #56	@ 0x38
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008f90:	2300      	movs	r3, #0
 8008f92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d102      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f000 bec8 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fa2:	4b99      	ldr	r3, [pc, #612]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	f003 030c 	and.w	r3, r3, #12
 8008faa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fac:	4b96      	ldr	r3, [pc, #600]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8008fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0310 	and.w	r3, r3, #16
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 816c 	beq.w	800929c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d007      	beq.n	8008fda <HAL_RCC_OscConfig+0x52>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	2b0c      	cmp	r3, #12
 8008fce:	f040 80de 	bne.w	800918e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 80da 	bne.w	800918e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f000 bea5 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fec:	4b86      	ldr	r3, [pc, #536]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d004      	beq.n	8009002 <HAL_RCC_OscConfig+0x7a>
 8008ff8:	4b83      	ldr	r3, [pc, #524]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009000:	e005      	b.n	800900e <HAL_RCC_OscConfig+0x86>
 8009002:	4b81      	ldr	r3, [pc, #516]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009008:	041b      	lsls	r3, r3, #16
 800900a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800900e:	4293      	cmp	r3, r2
 8009010:	d255      	bcs.n	80090be <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10a      	bne.n	800902e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	4618      	mov	r0, r3
 800901e:	f001 fa11 	bl	800a444 <RCC_SetFlashLatencyFromMSIRange>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	f000 be82 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800902e:	4b76      	ldr	r3, [pc, #472]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	4a75      	ldr	r2, [pc, #468]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009034:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009038:	6093      	str	r3, [r2, #8]
 800903a:	4b73      	ldr	r3, [pc, #460]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009046:	4970      	ldr	r1, [pc, #448]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009048:	4313      	orrs	r3, r2
 800904a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009054:	d309      	bcc.n	800906a <HAL_RCC_OscConfig+0xe2>
 8009056:	4b6c      	ldr	r3, [pc, #432]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f023 021f 	bic.w	r2, r3, #31
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	4969      	ldr	r1, [pc, #420]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009064:	4313      	orrs	r3, r2
 8009066:	60cb      	str	r3, [r1, #12]
 8009068:	e07e      	b.n	8009168 <HAL_RCC_OscConfig+0x1e0>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	da0a      	bge.n	8009088 <HAL_RCC_OscConfig+0x100>
 8009072:	4b65      	ldr	r3, [pc, #404]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	015b      	lsls	r3, r3, #5
 8009080:	4961      	ldr	r1, [pc, #388]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009082:	4313      	orrs	r3, r2
 8009084:	60cb      	str	r3, [r1, #12]
 8009086:	e06f      	b.n	8009168 <HAL_RCC_OscConfig+0x1e0>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009090:	d30a      	bcc.n	80090a8 <HAL_RCC_OscConfig+0x120>
 8009092:	4b5d      	ldr	r3, [pc, #372]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	029b      	lsls	r3, r3, #10
 80090a0:	4959      	ldr	r1, [pc, #356]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60cb      	str	r3, [r1, #12]
 80090a6:	e05f      	b.n	8009168 <HAL_RCC_OscConfig+0x1e0>
 80090a8:	4b57      	ldr	r3, [pc, #348]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	03db      	lsls	r3, r3, #15
 80090b6:	4954      	ldr	r1, [pc, #336]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60cb      	str	r3, [r1, #12]
 80090bc:	e054      	b.n	8009168 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80090be:	4b52      	ldr	r3, [pc, #328]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	4a51      	ldr	r2, [pc, #324]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090c8:	6093      	str	r3, [r2, #8]
 80090ca:	4b4f      	ldr	r3, [pc, #316]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d6:	494c      	ldr	r1, [pc, #304]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80090e4:	d309      	bcc.n	80090fa <HAL_RCC_OscConfig+0x172>
 80090e6:	4b48      	ldr	r3, [pc, #288]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f023 021f 	bic.w	r2, r3, #31
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	4945      	ldr	r1, [pc, #276]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60cb      	str	r3, [r1, #12]
 80090f8:	e028      	b.n	800914c <HAL_RCC_OscConfig+0x1c4>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da0a      	bge.n	8009118 <HAL_RCC_OscConfig+0x190>
 8009102:	4b41      	ldr	r3, [pc, #260]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	015b      	lsls	r3, r3, #5
 8009110:	493d      	ldr	r1, [pc, #244]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009112:	4313      	orrs	r3, r2
 8009114:	60cb      	str	r3, [r1, #12]
 8009116:	e019      	b.n	800914c <HAL_RCC_OscConfig+0x1c4>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800911c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009120:	d30a      	bcc.n	8009138 <HAL_RCC_OscConfig+0x1b0>
 8009122:	4b39      	ldr	r3, [pc, #228]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	029b      	lsls	r3, r3, #10
 8009130:	4935      	ldr	r1, [pc, #212]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009132:	4313      	orrs	r3, r2
 8009134:	60cb      	str	r3, [r1, #12]
 8009136:	e009      	b.n	800914c <HAL_RCC_OscConfig+0x1c4>
 8009138:	4b33      	ldr	r3, [pc, #204]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	03db      	lsls	r3, r3, #15
 8009146:	4930      	ldr	r1, [pc, #192]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009148:	4313      	orrs	r3, r2
 800914a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009156:	4618      	mov	r0, r3
 8009158:	f001 f974 	bl	800a444 <RCC_SetFlashLatencyFromMSIRange>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	f000 bde5 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009168:	f001 f8de 	bl	800a328 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800916c:	4b27      	ldr	r3, [pc, #156]	@ (800920c <HAL_RCC_OscConfig+0x284>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4618      	mov	r0, r3
 8009172:	f7f8 fd5d 	bl	8001c30 <HAL_InitTick>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800917c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 808a 	beq.w	800929a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009186:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800918a:	f000 bdd2 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d066      	beq.n	8009264 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009196:	4b1c      	ldr	r3, [pc, #112]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1b      	ldr	r2, [pc, #108]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 800919c:	f043 0301 	orr.w	r3, r3, #1
 80091a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80091a2:	f7f9 fb2b 	bl	80027fc <HAL_GetTick>
 80091a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80091a8:	e009      	b.n	80091be <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80091aa:	f7f9 fb27 	bl	80027fc <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d902      	bls.n	80091be <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	f000 bdba 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80091be:	4b12      	ldr	r3, [pc, #72]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0ef      	beq.n	80091aa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80091ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	4a0e      	ldr	r2, [pc, #56]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80091d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091d4:	6093      	str	r3, [r2, #8]
 80091d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e2:	4909      	ldr	r1, [pc, #36]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80091f0:	d30e      	bcc.n	8009210 <HAL_RCC_OscConfig+0x288>
 80091f2:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f023 021f 	bic.w	r2, r3, #31
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	4902      	ldr	r1, [pc, #8]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 8009200:	4313      	orrs	r3, r2
 8009202:	60cb      	str	r3, [r1, #12]
 8009204:	e04a      	b.n	800929c <HAL_RCC_OscConfig+0x314>
 8009206:	bf00      	nop
 8009208:	46020c00 	.word	0x46020c00
 800920c:	20000054 	.word	0x20000054
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	da0a      	bge.n	800922e <HAL_RCC_OscConfig+0x2a6>
 8009218:	4b98      	ldr	r3, [pc, #608]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	015b      	lsls	r3, r3, #5
 8009226:	4995      	ldr	r1, [pc, #596]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009228:	4313      	orrs	r3, r2
 800922a:	60cb      	str	r3, [r1, #12]
 800922c:	e036      	b.n	800929c <HAL_RCC_OscConfig+0x314>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009236:	d30a      	bcc.n	800924e <HAL_RCC_OscConfig+0x2c6>
 8009238:	4b90      	ldr	r3, [pc, #576]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	029b      	lsls	r3, r3, #10
 8009246:	498d      	ldr	r1, [pc, #564]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009248:	4313      	orrs	r3, r2
 800924a:	60cb      	str	r3, [r1, #12]
 800924c:	e026      	b.n	800929c <HAL_RCC_OscConfig+0x314>
 800924e:	4b8b      	ldr	r3, [pc, #556]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	03db      	lsls	r3, r3, #15
 800925c:	4987      	ldr	r1, [pc, #540]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800925e:	4313      	orrs	r3, r2
 8009260:	60cb      	str	r3, [r1, #12]
 8009262:	e01b      	b.n	800929c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009264:	4b85      	ldr	r3, [pc, #532]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a84      	ldr	r2, [pc, #528]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800926a:	f023 0301 	bic.w	r3, r3, #1
 800926e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009270:	f7f9 fac4 	bl	80027fc <HAL_GetTick>
 8009274:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009276:	e009      	b.n	800928c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009278:	f7f9 fac0 	bl	80027fc <HAL_GetTick>
 800927c:	4602      	mov	r2, r0
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	2b02      	cmp	r3, #2
 8009284:	d902      	bls.n	800928c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	f000 bd53 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800928c:	4b7b      	ldr	r3, [pc, #492]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1ef      	bne.n	8009278 <HAL_RCC_OscConfig+0x2f0>
 8009298:	e000      	b.n	800929c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800929a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 808b 	beq.w	80093c0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d005      	beq.n	80092bc <HAL_RCC_OscConfig+0x334>
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	2b0c      	cmp	r3, #12
 80092b4:	d109      	bne.n	80092ca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80092b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d106      	bne.n	80092ca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d17d      	bne.n	80093c0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f000 bd34 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092d2:	d106      	bne.n	80092e2 <HAL_RCC_OscConfig+0x35a>
 80092d4:	4b69      	ldr	r3, [pc, #420]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a68      	ldr	r2, [pc, #416]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80092da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	e041      	b.n	8009366 <HAL_RCC_OscConfig+0x3de>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092ea:	d112      	bne.n	8009312 <HAL_RCC_OscConfig+0x38a>
 80092ec:	4b63      	ldr	r3, [pc, #396]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a62      	ldr	r2, [pc, #392]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80092f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	4b60      	ldr	r3, [pc, #384]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a5f      	ldr	r2, [pc, #380]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80092fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	4b5d      	ldr	r3, [pc, #372]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a5c      	ldr	r2, [pc, #368]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800930a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e029      	b.n	8009366 <HAL_RCC_OscConfig+0x3de>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800931a:	d112      	bne.n	8009342 <HAL_RCC_OscConfig+0x3ba>
 800931c:	4b57      	ldr	r3, [pc, #348]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a56      	ldr	r2, [pc, #344]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009322:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	4b54      	ldr	r3, [pc, #336]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a53      	ldr	r2, [pc, #332]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800932e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	4b51      	ldr	r3, [pc, #324]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a50      	ldr	r2, [pc, #320]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800933a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	e011      	b.n	8009366 <HAL_RCC_OscConfig+0x3de>
 8009342:	4b4e      	ldr	r3, [pc, #312]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a4d      	ldr	r2, [pc, #308]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	4b4b      	ldr	r3, [pc, #300]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a4a      	ldr	r2, [pc, #296]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	4b48      	ldr	r3, [pc, #288]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a47      	ldr	r2, [pc, #284]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009360:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009364:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d014      	beq.n	8009398 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800936e:	f7f9 fa45 	bl	80027fc <HAL_GetTick>
 8009372:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009374:	e009      	b.n	800938a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009376:	f7f9 fa41 	bl	80027fc <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b64      	cmp	r3, #100	@ 0x64
 8009382:	d902      	bls.n	800938a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	f000 bcd4 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800938a:	4b3c      	ldr	r3, [pc, #240]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0ef      	beq.n	8009376 <HAL_RCC_OscConfig+0x3ee>
 8009396:	e013      	b.n	80093c0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009398:	f7f9 fa30 	bl	80027fc <HAL_GetTick>
 800939c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800939e:	e009      	b.n	80093b4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093a0:	f7f9 fa2c 	bl	80027fc <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b64      	cmp	r3, #100	@ 0x64
 80093ac:	d902      	bls.n	80093b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	f000 bcbf 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093b4:	4b31      	ldr	r3, [pc, #196]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1ef      	bne.n	80093a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0302 	and.w	r3, r3, #2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d05f      	beq.n	800948c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d005      	beq.n	80093de <HAL_RCC_OscConfig+0x456>
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	2b0c      	cmp	r3, #12
 80093d6:	d114      	bne.n	8009402 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80093d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d111      	bne.n	8009402 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d102      	bne.n	80093ec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	f000 bca3 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80093ec:	4b23      	ldr	r3, [pc, #140]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	041b      	lsls	r3, r3, #16
 80093fa:	4920      	ldr	r1, [pc, #128]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009400:	e044      	b.n	800948c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d024      	beq.n	8009454 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800940a:	4b1c      	ldr	r3, [pc, #112]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a1b      	ldr	r2, [pc, #108]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009414:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009416:	f7f9 f9f1 	bl	80027fc <HAL_GetTick>
 800941a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800941c:	e009      	b.n	8009432 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800941e:	f7f9 f9ed 	bl	80027fc <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	2b02      	cmp	r3, #2
 800942a:	d902      	bls.n	8009432 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	f000 bc80 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009432:	4b12      	ldr	r3, [pc, #72]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ef      	beq.n	800941e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800943e:	4b0f      	ldr	r3, [pc, #60]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	041b      	lsls	r3, r3, #16
 800944c:	490b      	ldr	r1, [pc, #44]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800944e:	4313      	orrs	r3, r2
 8009450:	610b      	str	r3, [r1, #16]
 8009452:	e01b      	b.n	800948c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009454:	4b09      	ldr	r3, [pc, #36]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a08      	ldr	r2, [pc, #32]	@ (800947c <HAL_RCC_OscConfig+0x4f4>)
 800945a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800945e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009460:	f7f9 f9cc 	bl	80027fc <HAL_GetTick>
 8009464:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009466:	e00b      	b.n	8009480 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009468:	f7f9 f9c8 	bl	80027fc <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	2b02      	cmp	r3, #2
 8009474:	d904      	bls.n	8009480 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	f000 bc5b 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
 800947c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009480:	4baf      	ldr	r3, [pc, #700]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1ed      	bne.n	8009468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80c8 	beq.w	800962a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800949a:	2300      	movs	r3, #0
 800949c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094a0:	4ba7      	ldr	r3, [pc, #668]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80094a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d111      	bne.n	80094d2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094ae:	4ba4      	ldr	r3, [pc, #656]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80094b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094b4:	4aa2      	ldr	r2, [pc, #648]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80094b6:	f043 0304 	orr.w	r3, r3, #4
 80094ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80094be:	4ba0      	ldr	r3, [pc, #640]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80094c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80094d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009744 <HAL_RCC_OscConfig+0x7bc>)
 80094d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d119      	bne.n	8009512 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80094de:	4b99      	ldr	r3, [pc, #612]	@ (8009744 <HAL_RCC_OscConfig+0x7bc>)
 80094e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e2:	4a98      	ldr	r2, [pc, #608]	@ (8009744 <HAL_RCC_OscConfig+0x7bc>)
 80094e4:	f043 0301 	orr.w	r3, r3, #1
 80094e8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094ea:	f7f9 f987 	bl	80027fc <HAL_GetTick>
 80094ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80094f0:	e009      	b.n	8009506 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094f2:	f7f9 f983 	bl	80027fc <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d902      	bls.n	8009506 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	f000 bc16 	b.w	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009506:	4b8f      	ldr	r3, [pc, #572]	@ (8009744 <HAL_RCC_OscConfig+0x7bc>)
 8009508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0ef      	beq.n	80094f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d05f      	beq.n	80095da <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800951a:	4b89      	ldr	r3, [pc, #548]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800951c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009520:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800952c:	429a      	cmp	r2, r3
 800952e:	d037      	beq.n	80095a0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d006      	beq.n	8009548 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e3f4      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d01b      	beq.n	800958a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009552:	4b7b      	ldr	r3, [pc, #492]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 8009554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009558:	4a79      	ldr	r2, [pc, #484]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800955a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800955e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009562:	f7f9 f94b 	bl	80027fc <HAL_GetTick>
 8009566:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009568:	e008      	b.n	800957c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800956a:	f7f9 f947 	bl	80027fc <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	2b05      	cmp	r3, #5
 8009576:	d901      	bls.n	800957c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	e3da      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800957c:	4b70      	ldr	r3, [pc, #448]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800957e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1ef      	bne.n	800956a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800958a:	4b6d      	ldr	r3, [pc, #436]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800958c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009590:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	4969      	ldr	r1, [pc, #420]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800959a:	4313      	orrs	r3, r2
 800959c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80095a0:	4b67      	ldr	r3, [pc, #412]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80095a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095a6:	4a66      	ldr	r2, [pc, #408]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80095a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80095b0:	f7f9 f924 	bl	80027fc <HAL_GetTick>
 80095b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80095b6:	e008      	b.n	80095ca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095b8:	f7f9 f920 	bl	80027fc <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e3b3      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80095ca:	4b5d      	ldr	r3, [pc, #372]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80095cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0ef      	beq.n	80095b8 <HAL_RCC_OscConfig+0x630>
 80095d8:	e01b      	b.n	8009612 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80095da:	4b59      	ldr	r3, [pc, #356]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80095dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095e0:	4a57      	ldr	r2, [pc, #348]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80095e2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80095e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80095ea:	f7f9 f907 	bl	80027fc <HAL_GetTick>
 80095ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80095f0:	e008      	b.n	8009604 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095f2:	f7f9 f903 	bl	80027fc <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	2b05      	cmp	r3, #5
 80095fe:	d901      	bls.n	8009604 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e396      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009604:	4b4e      	ldr	r3, [pc, #312]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 8009606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800960a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1ef      	bne.n	80095f2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009612:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009616:	2b01      	cmp	r3, #1
 8009618:	d107      	bne.n	800962a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800961a:	4b49      	ldr	r3, [pc, #292]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800961c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009620:	4a47      	ldr	r2, [pc, #284]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 8009622:	f023 0304 	bic.w	r3, r3, #4
 8009626:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0304 	and.w	r3, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 8111 	beq.w	800985a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009638:	2300      	movs	r3, #0
 800963a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800963e:	4b40      	ldr	r3, [pc, #256]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 8009640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	d111      	bne.n	8009670 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800964c:	4b3c      	ldr	r3, [pc, #240]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800964e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009652:	4a3b      	ldr	r2, [pc, #236]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 8009654:	f043 0304 	orr.w	r3, r3, #4
 8009658:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800965c:	4b38      	ldr	r3, [pc, #224]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800965e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009662:	f003 0304 	and.w	r3, r3, #4
 8009666:	613b      	str	r3, [r7, #16]
 8009668:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009670:	4b34      	ldr	r3, [pc, #208]	@ (8009744 <HAL_RCC_OscConfig+0x7bc>)
 8009672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d118      	bne.n	80096ae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800967c:	4b31      	ldr	r3, [pc, #196]	@ (8009744 <HAL_RCC_OscConfig+0x7bc>)
 800967e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009680:	4a30      	ldr	r2, [pc, #192]	@ (8009744 <HAL_RCC_OscConfig+0x7bc>)
 8009682:	f043 0301 	orr.w	r3, r3, #1
 8009686:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009688:	f7f9 f8b8 	bl	80027fc <HAL_GetTick>
 800968c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800968e:	e008      	b.n	80096a2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009690:	f7f9 f8b4 	bl	80027fc <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	2b02      	cmp	r3, #2
 800969c:	d901      	bls.n	80096a2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e347      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80096a2:	4b28      	ldr	r3, [pc, #160]	@ (8009744 <HAL_RCC_OscConfig+0x7bc>)
 80096a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0f0      	beq.n	8009690 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01f      	beq.n	80096fa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f003 0304 	and.w	r3, r3, #4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d010      	beq.n	80096e8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80096c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80096c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096cc:	4a1c      	ldr	r2, [pc, #112]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80096ce:	f043 0304 	orr.w	r3, r3, #4
 80096d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80096d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80096d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096dc:	4a18      	ldr	r2, [pc, #96]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80096e6:	e018      	b.n	800971a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80096e8:	4b15      	ldr	r3, [pc, #84]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80096ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096ee:	4a14      	ldr	r2, [pc, #80]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80096f0:	f043 0301 	orr.w	r3, r3, #1
 80096f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80096f8:	e00f      	b.n	800971a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80096fa:	4b11      	ldr	r3, [pc, #68]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 80096fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009700:	4a0f      	ldr	r2, [pc, #60]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 8009702:	f023 0301 	bic.w	r3, r3, #1
 8009706:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800970a:	4b0d      	ldr	r3, [pc, #52]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 800970c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009710:	4a0b      	ldr	r2, [pc, #44]	@ (8009740 <HAL_RCC_OscConfig+0x7b8>)
 8009712:	f023 0304 	bic.w	r3, r3, #4
 8009716:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d057      	beq.n	80097d2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8009722:	f7f9 f86b 	bl	80027fc <HAL_GetTick>
 8009726:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009728:	e00e      	b.n	8009748 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800972a:	f7f9 f867 	bl	80027fc <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009738:	4293      	cmp	r3, r2
 800973a:	d905      	bls.n	8009748 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e2f8      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
 8009740:	46020c00 	.word	0x46020c00
 8009744:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009748:	4b9c      	ldr	r3, [pc, #624]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800974a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800974e:	f003 0302 	and.w	r3, r3, #2
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0e9      	beq.n	800972a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800975e:	2b00      	cmp	r3, #0
 8009760:	d01b      	beq.n	800979a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009762:	4b96      	ldr	r3, [pc, #600]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009768:	4a94      	ldr	r2, [pc, #592]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800976a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800976e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009772:	e00a      	b.n	800978a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009774:	f7f9 f842 	bl	80027fc <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009782:	4293      	cmp	r3, r2
 8009784:	d901      	bls.n	800978a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e2d3      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800978a:	4b8c      	ldr	r3, [pc, #560]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800978c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009794:	2b00      	cmp	r3, #0
 8009796:	d0ed      	beq.n	8009774 <HAL_RCC_OscConfig+0x7ec>
 8009798:	e053      	b.n	8009842 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800979a:	4b88      	ldr	r3, [pc, #544]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800979c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097a0:	4a86      	ldr	r2, [pc, #536]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80097a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80097aa:	e00a      	b.n	80097c2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ac:	f7f9 f826 	bl	80027fc <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d901      	bls.n	80097c2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e2b7      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80097c2:	4b7e      	ldr	r3, [pc, #504]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80097c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1ed      	bne.n	80097ac <HAL_RCC_OscConfig+0x824>
 80097d0:	e037      	b.n	8009842 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80097d2:	f7f9 f813 	bl	80027fc <HAL_GetTick>
 80097d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097d8:	e00a      	b.n	80097f0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097da:	f7f9 f80f 	bl	80027fc <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d901      	bls.n	80097f0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e2a0      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097f0:	4b72      	ldr	r3, [pc, #456]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80097f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1ed      	bne.n	80097da <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80097fe:	4b6f      	ldr	r3, [pc, #444]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01a      	beq.n	8009842 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800980c:	4b6b      	ldr	r3, [pc, #428]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800980e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009812:	4a6a      	ldr	r2, [pc, #424]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009818:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800981c:	e00a      	b.n	8009834 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800981e:	f7f8 ffed 	bl	80027fc <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800982c:	4293      	cmp	r3, r2
 800982e:	d901      	bls.n	8009834 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e27e      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009834:	4b61      	ldr	r3, [pc, #388]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800983a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1ed      	bne.n	800981e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009842:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009846:	2b01      	cmp	r3, #1
 8009848:	d107      	bne.n	800985a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800984a:	4b5c      	ldr	r3, [pc, #368]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800984c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009850:	4a5a      	ldr	r2, [pc, #360]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009852:	f023 0304 	bic.w	r3, r3, #4
 8009856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b00      	cmp	r3, #0
 8009864:	d036      	beq.n	80098d4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d019      	beq.n	80098a2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800986e:	4b53      	ldr	r3, [pc, #332]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a52      	ldr	r2, [pc, #328]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009874:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009878:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800987a:	f7f8 ffbf 	bl	80027fc <HAL_GetTick>
 800987e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009880:	e008      	b.n	8009894 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009882:	f7f8 ffbb 	bl	80027fc <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d901      	bls.n	8009894 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e24e      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009894:	4b49      	ldr	r3, [pc, #292]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0f0      	beq.n	8009882 <HAL_RCC_OscConfig+0x8fa>
 80098a0:	e018      	b.n	80098d4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80098a2:	4b46      	ldr	r3, [pc, #280]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a45      	ldr	r2, [pc, #276]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80098a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80098ae:	f7f8 ffa5 	bl	80027fc <HAL_GetTick>
 80098b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80098b4:	e008      	b.n	80098c8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098b6:	f7f8 ffa1 	bl	80027fc <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d901      	bls.n	80098c8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e234      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80098c8:	4b3c      	ldr	r3, [pc, #240]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f0      	bne.n	80098b6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d036      	beq.n	800994e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d019      	beq.n	800991c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80098e8:	4b34      	ldr	r3, [pc, #208]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a33      	ldr	r2, [pc, #204]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80098ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80098f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80098f4:	f7f8 ff82 	bl	80027fc <HAL_GetTick>
 80098f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80098fa:	e008      	b.n	800990e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80098fc:	f7f8 ff7e 	bl	80027fc <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b02      	cmp	r3, #2
 8009908:	d901      	bls.n	800990e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e211      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800990e:	4b2b      	ldr	r3, [pc, #172]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0f0      	beq.n	80098fc <HAL_RCC_OscConfig+0x974>
 800991a:	e018      	b.n	800994e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800991c:	4b27      	ldr	r3, [pc, #156]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a26      	ldr	r2, [pc, #152]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009926:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009928:	f7f8 ff68 	bl	80027fc <HAL_GetTick>
 800992c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800992e:	e008      	b.n	8009942 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009930:	f7f8 ff64 	bl	80027fc <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2b02      	cmp	r3, #2
 800993c:	d901      	bls.n	8009942 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e1f7      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009942:	4b1e      	ldr	r3, [pc, #120]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1f0      	bne.n	8009930 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009956:	2b00      	cmp	r3, #0
 8009958:	d07f      	beq.n	8009a5a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800995e:	2b00      	cmp	r3, #0
 8009960:	d062      	beq.n	8009a28 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009962:	4b16      	ldr	r3, [pc, #88]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	4a15      	ldr	r2, [pc, #84]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009968:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800996c:	6093      	str	r3, [r2, #8]
 800996e:	4b13      	ldr	r3, [pc, #76]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997a:	4910      	ldr	r1, [pc, #64]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800997c:	4313      	orrs	r3, r2
 800997e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009984:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009988:	d309      	bcc.n	800999e <HAL_RCC_OscConfig+0xa16>
 800998a:	4b0c      	ldr	r3, [pc, #48]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	f023 021f 	bic.w	r2, r3, #31
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	4909      	ldr	r1, [pc, #36]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 8009998:	4313      	orrs	r3, r2
 800999a:	60cb      	str	r3, [r1, #12]
 800999c:	e02a      	b.n	80099f4 <HAL_RCC_OscConfig+0xa6c>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	da0c      	bge.n	80099c0 <HAL_RCC_OscConfig+0xa38>
 80099a6:	4b05      	ldr	r3, [pc, #20]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	015b      	lsls	r3, r3, #5
 80099b4:	4901      	ldr	r1, [pc, #4]	@ (80099bc <HAL_RCC_OscConfig+0xa34>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60cb      	str	r3, [r1, #12]
 80099ba:	e01b      	b.n	80099f4 <HAL_RCC_OscConfig+0xa6c>
 80099bc:	46020c00 	.word	0x46020c00
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c8:	d30a      	bcc.n	80099e0 <HAL_RCC_OscConfig+0xa58>
 80099ca:	4ba1      	ldr	r3, [pc, #644]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	029b      	lsls	r3, r3, #10
 80099d8:	499d      	ldr	r1, [pc, #628]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	60cb      	str	r3, [r1, #12]
 80099de:	e009      	b.n	80099f4 <HAL_RCC_OscConfig+0xa6c>
 80099e0:	4b9b      	ldr	r3, [pc, #620]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	03db      	lsls	r3, r3, #15
 80099ee:	4998      	ldr	r1, [pc, #608]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80099f4:	4b96      	ldr	r3, [pc, #600]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a95      	ldr	r2, [pc, #596]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 80099fa:	f043 0310 	orr.w	r3, r3, #16
 80099fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009a00:	f7f8 fefc 	bl	80027fc <HAL_GetTick>
 8009a04:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009a06:	e008      	b.n	8009a1a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009a08:	f7f8 fef8 	bl	80027fc <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d901      	bls.n	8009a1a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e18b      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0320 	and.w	r3, r3, #32
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0f0      	beq.n	8009a08 <HAL_RCC_OscConfig+0xa80>
 8009a26:	e018      	b.n	8009a5a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009a28:	4b89      	ldr	r3, [pc, #548]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a88      	ldr	r2, [pc, #544]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009a2e:	f023 0310 	bic.w	r3, r3, #16
 8009a32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009a34:	f7f8 fee2 	bl	80027fc <HAL_GetTick>
 8009a38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009a3a:	e008      	b.n	8009a4e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009a3c:	f7f8 fede 	bl	80027fc <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e171      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009a4e:	4b80      	ldr	r3, [pc, #512]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f0      	bne.n	8009a3c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 8166 	beq.w	8009d30 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009a64:	2300      	movs	r3, #0
 8009a66:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a6a:	4b79      	ldr	r3, [pc, #484]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	f003 030c 	and.w	r3, r3, #12
 8009a72:	2b0c      	cmp	r3, #12
 8009a74:	f000 80f2 	beq.w	8009c5c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	f040 80c5 	bne.w	8009c0c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009a82:	4b73      	ldr	r3, [pc, #460]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a72      	ldr	r2, [pc, #456]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009a88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009a8e:	f7f8 feb5 	bl	80027fc <HAL_GetTick>
 8009a92:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009a94:	e008      	b.n	8009aa8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a96:	f7f8 feb1 	bl	80027fc <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d901      	bls.n	8009aa8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e144      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009aa8:	4b69      	ldr	r3, [pc, #420]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1f0      	bne.n	8009a96 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ab4:	4b66      	ldr	r3, [pc, #408]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aba:	f003 0304 	and.w	r3, r3, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d111      	bne.n	8009ae6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8009ac2:	4b63      	ldr	r3, [pc, #396]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ac8:	4a61      	ldr	r2, [pc, #388]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009aca:	f043 0304 	orr.w	r3, r3, #4
 8009ace:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	60fb      	str	r3, [r7, #12]
 8009ade:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8009c54 <HAL_RCC_OscConfig+0xccc>)
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009aee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009af2:	d102      	bne.n	8009afa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009afa:	4b56      	ldr	r3, [pc, #344]	@ (8009c54 <HAL_RCC_OscConfig+0xccc>)
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	4a55      	ldr	r2, [pc, #340]	@ (8009c54 <HAL_RCC_OscConfig+0xccc>)
 8009b00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b04:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009b06:	4b52      	ldr	r3, [pc, #328]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b0e:	f023 0303 	bic.w	r3, r3, #3
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009b1a:	3a01      	subs	r2, #1
 8009b1c:	0212      	lsls	r2, r2, #8
 8009b1e:	4311      	orrs	r1, r2
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009b24:	430a      	orrs	r2, r1
 8009b26:	494a      	ldr	r1, [pc, #296]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b2c:	4b48      	ldr	r3, [pc, #288]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b30:	4b49      	ldr	r3, [pc, #292]	@ (8009c58 <HAL_RCC_OscConfig+0xcd0>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009b38:	3a01      	subs	r2, #1
 8009b3a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009b42:	3a01      	subs	r2, #1
 8009b44:	0252      	lsls	r2, r2, #9
 8009b46:	b292      	uxth	r2, r2
 8009b48:	4311      	orrs	r1, r2
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009b4e:	3a01      	subs	r2, #1
 8009b50:	0412      	lsls	r2, r2, #16
 8009b52:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009b56:	4311      	orrs	r1, r2
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009b5c:	3a01      	subs	r2, #1
 8009b5e:	0612      	lsls	r2, r2, #24
 8009b60:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009b64:	430a      	orrs	r2, r1
 8009b66:	493a      	ldr	r1, [pc, #232]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009b6c:	4b38      	ldr	r3, [pc, #224]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	4a37      	ldr	r2, [pc, #220]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b72:	f023 0310 	bic.w	r3, r3, #16
 8009b76:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b7c:	4a34      	ldr	r2, [pc, #208]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009b82:	4b33      	ldr	r3, [pc, #204]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b86:	4a32      	ldr	r2, [pc, #200]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b88:	f043 0310 	orr.w	r3, r3, #16
 8009b8c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009b8e:	4b30      	ldr	r3, [pc, #192]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b92:	f023 020c 	bic.w	r2, r3, #12
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b9a:	492d      	ldr	r1, [pc, #180]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8009ba0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d105      	bne.n	8009bb4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8009c54 <HAL_RCC_OscConfig+0xccc>)
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	4a29      	ldr	r2, [pc, #164]	@ (8009c54 <HAL_RCC_OscConfig+0xccc>)
 8009bae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009bb2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009bb4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d107      	bne.n	8009bcc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8009bbc:	4b24      	ldr	r3, [pc, #144]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bc2:	4a23      	ldr	r2, [pc, #140]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009bc4:	f023 0304 	bic.w	r3, r3, #4
 8009bc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009bcc:	4b20      	ldr	r3, [pc, #128]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009bd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009bd6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009be2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009be4:	f7f8 fe0a 	bl	80027fc <HAL_GetTick>
 8009be8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009bea:	e008      	b.n	8009bfe <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bec:	f7f8 fe06 	bl	80027fc <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e099      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009bfe:	4b14      	ldr	r3, [pc, #80]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0f0      	beq.n	8009bec <HAL_RCC_OscConfig+0xc64>
 8009c0a:	e091      	b.n	8009d30 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009c0c:	4b10      	ldr	r3, [pc, #64]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a0f      	ldr	r2, [pc, #60]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009c18:	f7f8 fdf0 	bl	80027fc <HAL_GetTick>
 8009c1c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009c1e:	e008      	b.n	8009c32 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c20:	f7f8 fdec 	bl	80027fc <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d901      	bls.n	8009c32 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e07f      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009c32:	4b07      	ldr	r3, [pc, #28]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1f0      	bne.n	8009c20 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009c3e:	4b04      	ldr	r3, [pc, #16]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	4a03      	ldr	r2, [pc, #12]	@ (8009c50 <HAL_RCC_OscConfig+0xcc8>)
 8009c44:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009c48:	f023 0303 	bic.w	r3, r3, #3
 8009c4c:	6293      	str	r3, [r2, #40]	@ 0x28
 8009c4e:	e06f      	b.n	8009d30 <HAL_RCC_OscConfig+0xda8>
 8009c50:	46020c00 	.word	0x46020c00
 8009c54:	46020800 	.word	0x46020800
 8009c58:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009c5c:	4b37      	ldr	r3, [pc, #220]	@ (8009d3c <HAL_RCC_OscConfig+0xdb4>)
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c60:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009c62:	4b36      	ldr	r3, [pc, #216]	@ (8009d3c <HAL_RCC_OscConfig+0xdb4>)
 8009c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c66:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d039      	beq.n	8009ce4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	f003 0203 	and.w	r2, r3, #3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d132      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d129      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d122      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ca8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d11a      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	0a5b      	lsrs	r3, r3, #9
 8009cb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d111      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	0c1b      	lsrs	r3, r3, #16
 8009cc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ccc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d108      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	0e1b      	lsrs	r3, r3, #24
 8009cd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cde:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d001      	beq.n	8009ce8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e024      	b.n	8009d32 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009ce8:	4b14      	ldr	r3, [pc, #80]	@ (8009d3c <HAL_RCC_OscConfig+0xdb4>)
 8009cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cec:	08db      	lsrs	r3, r3, #3
 8009cee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d01a      	beq.n	8009d30 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009cfa:	4b10      	ldr	r3, [pc, #64]	@ (8009d3c <HAL_RCC_OscConfig+0xdb4>)
 8009cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8009d3c <HAL_RCC_OscConfig+0xdb4>)
 8009d00:	f023 0310 	bic.w	r3, r3, #16
 8009d04:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d06:	f7f8 fd79 	bl	80027fc <HAL_GetTick>
 8009d0a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8009d0c:	bf00      	nop
 8009d0e:	f7f8 fd75 	bl	80027fc <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d0f9      	beq.n	8009d0e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d1e:	4a07      	ldr	r2, [pc, #28]	@ (8009d3c <HAL_RCC_OscConfig+0xdb4>)
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009d24:	4b05      	ldr	r3, [pc, #20]	@ (8009d3c <HAL_RCC_OscConfig+0xdb4>)
 8009d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d28:	4a04      	ldr	r2, [pc, #16]	@ (8009d3c <HAL_RCC_OscConfig+0xdb4>)
 8009d2a:	f043 0310 	orr.w	r3, r3, #16
 8009d2e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3738      	adds	r7, #56	@ 0x38
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	46020c00 	.word	0x46020c00

08009d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e1d9      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d54:	4b9b      	ldr	r3, [pc, #620]	@ (8009fc4 <HAL_RCC_ClockConfig+0x284>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 030f 	and.w	r3, r3, #15
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d910      	bls.n	8009d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d62:	4b98      	ldr	r3, [pc, #608]	@ (8009fc4 <HAL_RCC_ClockConfig+0x284>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f023 020f 	bic.w	r2, r3, #15
 8009d6a:	4996      	ldr	r1, [pc, #600]	@ (8009fc4 <HAL_RCC_ClockConfig+0x284>)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d72:	4b94      	ldr	r3, [pc, #592]	@ (8009fc4 <HAL_RCC_ClockConfig+0x284>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 030f 	and.w	r3, r3, #15
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d001      	beq.n	8009d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e1c1      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0310 	and.w	r3, r3, #16
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d010      	beq.n	8009db2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	695a      	ldr	r2, [r3, #20]
 8009d94:	4b8c      	ldr	r3, [pc, #560]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d908      	bls.n	8009db2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009da0:	4b89      	ldr	r3, [pc, #548]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	695b      	ldr	r3, [r3, #20]
 8009dac:	4986      	ldr	r1, [pc, #536]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0308 	and.w	r3, r3, #8
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d012      	beq.n	8009de4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691a      	ldr	r2, [r3, #16]
 8009dc2:	4b81      	ldr	r3, [pc, #516]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	091b      	lsrs	r3, r3, #4
 8009dc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d909      	bls.n	8009de4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009dd0:	4b7d      	ldr	r3, [pc, #500]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
 8009dd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	011b      	lsls	r3, r3, #4
 8009dde:	497a      	ldr	r1, [pc, #488]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d010      	beq.n	8009e12 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68da      	ldr	r2, [r3, #12]
 8009df4:	4b74      	ldr	r3, [pc, #464]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d908      	bls.n	8009e12 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009e00:	4b71      	ldr	r3, [pc, #452]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	496e      	ldr	r1, [pc, #440]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d010      	beq.n	8009e40 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689a      	ldr	r2, [r3, #8]
 8009e22:	4b69      	ldr	r3, [pc, #420]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	f003 030f 	and.w	r3, r3, #15
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d908      	bls.n	8009e40 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009e2e:	4b66      	ldr	r3, [pc, #408]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	f023 020f 	bic.w	r2, r3, #15
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	4963      	ldr	r1, [pc, #396]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80d2 	beq.w	8009ff2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d143      	bne.n	8009ee2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d110      	bne.n	8009e8a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009e68:	4b57      	ldr	r3, [pc, #348]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e6e:	4a56      	ldr	r2, [pc, #344]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e70:	f043 0304 	orr.w	r3, r3, #4
 8009e74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009e78:	4b53      	ldr	r3, [pc, #332]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e7e:	f003 0304 	and.w	r3, r3, #4
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009e86:	2301      	movs	r3, #1
 8009e88:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8009e8a:	f7f8 fcb7 	bl	80027fc <HAL_GetTick>
 8009e8e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009e90:	4b4e      	ldr	r3, [pc, #312]	@ (8009fcc <HAL_RCC_ClockConfig+0x28c>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00f      	beq.n	8009ebc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009e9c:	e008      	b.n	8009eb0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009e9e:	f7f8 fcad 	bl	80027fc <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d901      	bls.n	8009eb0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e12b      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009eb0:	4b46      	ldr	r3, [pc, #280]	@ (8009fcc <HAL_RCC_ClockConfig+0x28c>)
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0f0      	beq.n	8009e9e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d107      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009ec2:	4b41      	ldr	r3, [pc, #260]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ec8:	4a3f      	ldr	r2, [pc, #252]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009eca:	f023 0304 	bic.w	r3, r3, #4
 8009ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d121      	bne.n	8009f22 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e112      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d107      	bne.n	8009efa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009eea:	4b37      	ldr	r3, [pc, #220]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d115      	bne.n	8009f22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e106      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d107      	bne.n	8009f12 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009f02:	4b31      	ldr	r3, [pc, #196]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 0304 	and.w	r3, r3, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d109      	bne.n	8009f22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e0fa      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f12:	4b2d      	ldr	r3, [pc, #180]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e0f2      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009f22:	4b29      	ldr	r3, [pc, #164]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f023 0203 	bic.w	r2, r3, #3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	4926      	ldr	r1, [pc, #152]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009f34:	f7f8 fc62 	bl	80027fc <HAL_GetTick>
 8009f38:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d112      	bne.n	8009f68 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f42:	e00a      	b.n	8009f5a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f44:	f7f8 fc5a 	bl	80027fc <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d901      	bls.n	8009f5a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e0d6      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	f003 030c 	and.w	r3, r3, #12
 8009f62:	2b0c      	cmp	r3, #12
 8009f64:	d1ee      	bne.n	8009f44 <HAL_RCC_ClockConfig+0x204>
 8009f66:	e044      	b.n	8009ff2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d112      	bne.n	8009f96 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f70:	e00a      	b.n	8009f88 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f72:	f7f8 fc43 	bl	80027fc <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d901      	bls.n	8009f88 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e0bf      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f88:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	f003 030c 	and.w	r3, r3, #12
 8009f90:	2b08      	cmp	r3, #8
 8009f92:	d1ee      	bne.n	8009f72 <HAL_RCC_ClockConfig+0x232>
 8009f94:	e02d      	b.n	8009ff2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d123      	bne.n	8009fe6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009f9e:	e00a      	b.n	8009fb6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fa0:	f7f8 fc2c 	bl	80027fc <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e0a8      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009fb6:	4b04      	ldr	r3, [pc, #16]	@ (8009fc8 <HAL_RCC_ClockConfig+0x288>)
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	f003 030c 	and.w	r3, r3, #12
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1ee      	bne.n	8009fa0 <HAL_RCC_ClockConfig+0x260>
 8009fc2:	e016      	b.n	8009ff2 <HAL_RCC_ClockConfig+0x2b2>
 8009fc4:	40022000 	.word	0x40022000
 8009fc8:	46020c00 	.word	0x46020c00
 8009fcc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fd0:	f7f8 fc14 	bl	80027fc <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e090      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fe6:	4b4a      	ldr	r3, [pc, #296]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	f003 030c 	and.w	r3, r3, #12
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d1ee      	bne.n	8009fd0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d010      	beq.n	800a020 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	4b43      	ldr	r3, [pc, #268]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f003 030f 	and.w	r3, r3, #15
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d208      	bcs.n	800a020 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a00e:	4b40      	ldr	r3, [pc, #256]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	f023 020f 	bic.w	r2, r3, #15
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	493d      	ldr	r1, [pc, #244]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a020:	4b3c      	ldr	r3, [pc, #240]	@ (800a114 <HAL_RCC_ClockConfig+0x3d4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d210      	bcs.n	800a050 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a02e:	4b39      	ldr	r3, [pc, #228]	@ (800a114 <HAL_RCC_ClockConfig+0x3d4>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f023 020f 	bic.w	r2, r3, #15
 800a036:	4937      	ldr	r1, [pc, #220]	@ (800a114 <HAL_RCC_ClockConfig+0x3d4>)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a03e:	4b35      	ldr	r3, [pc, #212]	@ (800a114 <HAL_RCC_ClockConfig+0x3d4>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d001      	beq.n	800a050 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e05b      	b.n	800a108 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d010      	beq.n	800a07e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	4b2b      	ldr	r3, [pc, #172]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a068:	429a      	cmp	r2, r3
 800a06a:	d208      	bcs.n	800a07e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a06c:	4b28      	ldr	r3, [pc, #160]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	4925      	ldr	r1, [pc, #148]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0308 	and.w	r3, r3, #8
 800a086:	2b00      	cmp	r3, #0
 800a088:	d012      	beq.n	800a0b0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691a      	ldr	r2, [r3, #16]
 800a08e:	4b20      	ldr	r3, [pc, #128]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	091b      	lsrs	r3, r3, #4
 800a094:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a098:	429a      	cmp	r2, r3
 800a09a:	d209      	bcs.n	800a0b0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a09c:	4b1c      	ldr	r3, [pc, #112]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	011b      	lsls	r3, r3, #4
 800a0aa:	4919      	ldr	r1, [pc, #100]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0310 	and.w	r3, r3, #16
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d010      	beq.n	800a0de <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	695a      	ldr	r2, [r3, #20]
 800a0c0:	4b13      	ldr	r3, [pc, #76]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d208      	bcs.n	800a0de <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a0cc:	4b10      	ldr	r3, [pc, #64]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	490d      	ldr	r1, [pc, #52]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a0de:	f000 f821 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <HAL_RCC_ClockConfig+0x3d0>)
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	f003 030f 	and.w	r3, r3, #15
 800a0ec:	490a      	ldr	r1, [pc, #40]	@ (800a118 <HAL_RCC_ClockConfig+0x3d8>)
 800a0ee:	5ccb      	ldrb	r3, [r1, r3]
 800a0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f4:	4a09      	ldr	r2, [pc, #36]	@ (800a11c <HAL_RCC_ClockConfig+0x3dc>)
 800a0f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a0f8:	4b09      	ldr	r3, [pc, #36]	@ (800a120 <HAL_RCC_ClockConfig+0x3e0>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7f7 fd97 	bl	8001c30 <HAL_InitTick>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]

  return status;
 800a106:	7bfb      	ldrb	r3, [r7, #15]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	46020c00 	.word	0x46020c00
 800a114:	40022000 	.word	0x40022000
 800a118:	08017ef4 	.word	0x08017ef4
 800a11c:	20000050 	.word	0x20000050
 800a120:	20000054 	.word	0x20000054

0800a124 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a124:	b480      	push	{r7}
 800a126:	b08b      	sub	sp, #44	@ 0x2c
 800a128:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a132:	4b78      	ldr	r3, [pc, #480]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a134:	69db      	ldr	r3, [r3, #28]
 800a136:	f003 030c 	and.w	r3, r3, #12
 800a13a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a13c:	4b75      	ldr	r3, [pc, #468]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a140:	f003 0303 	and.w	r3, r3, #3
 800a144:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d005      	beq.n	800a158 <HAL_RCC_GetSysClockFreq+0x34>
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	2b0c      	cmp	r3, #12
 800a150:	d121      	bne.n	800a196 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d11e      	bne.n	800a196 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a158:	4b6e      	ldr	r3, [pc, #440]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d107      	bne.n	800a174 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a164:	4b6b      	ldr	r3, [pc, #428]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a16a:	0b1b      	lsrs	r3, r3, #12
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	627b      	str	r3, [r7, #36]	@ 0x24
 800a172:	e005      	b.n	800a180 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a174:	4b67      	ldr	r3, [pc, #412]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	0f1b      	lsrs	r3, r3, #28
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a180:	4a65      	ldr	r2, [pc, #404]	@ (800a318 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a188:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d110      	bne.n	800a1b2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a192:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a194:	e00d      	b.n	800a1b2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a196:	4b5f      	ldr	r3, [pc, #380]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	f003 030c 	and.w	r3, r3, #12
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d102      	bne.n	800a1a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a1a2:	4b5e      	ldr	r3, [pc, #376]	@ (800a31c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a1a4:	623b      	str	r3, [r7, #32]
 800a1a6:	e004      	b.n	800a1b2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	2b08      	cmp	r3, #8
 800a1ac:	d101      	bne.n	800a1b2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a1ae:	4b5b      	ldr	r3, [pc, #364]	@ (800a31c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a1b0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b0c      	cmp	r3, #12
 800a1b6:	f040 80a5 	bne.w	800a304 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a1ba:	4b56      	ldr	r3, [pc, #344]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a1c4:	4b53      	ldr	r3, [pc, #332]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c8:	0a1b      	lsrs	r3, r3, #8
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a1d2:	4b50      	ldr	r3, [pc, #320]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d6:	091b      	lsrs	r3, r3, #4
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a1de:	4b4d      	ldr	r3, [pc, #308]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e2:	08db      	lsrs	r3, r3, #3
 800a1e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	fb02 f303 	mul.w	r3, r2, r3
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d003      	beq.n	800a208 <HAL_RCC_GetSysClockFreq+0xe4>
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2b03      	cmp	r3, #3
 800a204:	d022      	beq.n	800a24c <HAL_RCC_GetSysClockFreq+0x128>
 800a206:	e043      	b.n	800a290 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a212:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800a320 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21a:	4b3e      	ldr	r3, [pc, #248]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a222:	ee07 3a90 	vmov	s15, r3
 800a226:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a22a:	ed97 6a01 	vldr	s12, [r7, #4]
 800a22e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800a324 <HAL_RCC_GetSysClockFreq+0x200>
 800a232:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a236:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a23a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a24a:	e046      	b.n	800a2da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	ee07 3a90 	vmov	s15, r3
 800a252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a256:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800a320 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a25e:	4b2d      	ldr	r3, [pc, #180]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a26e:	ed97 6a01 	vldr	s12, [r7, #4]
 800a272:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a324 <HAL_RCC_GetSysClockFreq+0x200>
 800a276:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a27e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a282:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a28e:	e024      	b.n	800a2da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	ee07 3a90 	vmov	s15, r3
 800a2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b0:	ee07 3a90 	vmov	s15, r3
 800a2b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a2b8:	ed97 6a01 	vldr	s12, [r7, #4]
 800a2bc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800a324 <HAL_RCC_GetSysClockFreq+0x200>
 800a2c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a2c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a2c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2d8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a2da:	4b0e      	ldr	r3, [pc, #56]	@ (800a314 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a2dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2de:	0e1b      	lsrs	r3, r3, #24
 800a2e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	ee07 3a90 	vmov	s15, r3
 800a2ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a2f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2fe:	ee17 3a90 	vmov	r3, s15
 800a302:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a304:	6a3b      	ldr	r3, [r7, #32]
}
 800a306:	4618      	mov	r0, r3
 800a308:	372c      	adds	r7, #44	@ 0x2c
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	46020c00 	.word	0x46020c00
 800a318:	08017f0c 	.word	0x08017f0c
 800a31c:	00f42400 	.word	0x00f42400
 800a320:	4b742400 	.word	0x4b742400
 800a324:	46000000 	.word	0x46000000

0800a328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a32c:	f7ff fefa 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800a330:	4602      	mov	r2, r0
 800a332:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <HAL_RCC_GetHCLKFreq+0x28>)
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	f003 030f 	and.w	r3, r3, #15
 800a33a:	4906      	ldr	r1, [pc, #24]	@ (800a354 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a33c:	5ccb      	ldrb	r3, [r1, r3]
 800a33e:	fa22 f303 	lsr.w	r3, r2, r3
 800a342:	4a05      	ldr	r2, [pc, #20]	@ (800a358 <HAL_RCC_GetHCLKFreq+0x30>)
 800a344:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a346:	4b04      	ldr	r3, [pc, #16]	@ (800a358 <HAL_RCC_GetHCLKFreq+0x30>)
 800a348:	681b      	ldr	r3, [r3, #0]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	46020c00 	.word	0x46020c00
 800a354:	08017ef4 	.word	0x08017ef4
 800a358:	20000050 	.word	0x20000050

0800a35c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a360:	f7ff ffe2 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 800a364:	4602      	mov	r2, r0
 800a366:	4b05      	ldr	r3, [pc, #20]	@ (800a37c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	091b      	lsrs	r3, r3, #4
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	4903      	ldr	r1, [pc, #12]	@ (800a380 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a372:	5ccb      	ldrb	r3, [r1, r3]
 800a374:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a378:	4618      	mov	r0, r3
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	46020c00 	.word	0x46020c00
 800a380:	08017f04 	.word	0x08017f04

0800a384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a388:	f7ff ffce 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 800a38c:	4602      	mov	r2, r0
 800a38e:	4b05      	ldr	r3, [pc, #20]	@ (800a3a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	0a1b      	lsrs	r3, r3, #8
 800a394:	f003 0307 	and.w	r3, r3, #7
 800a398:	4903      	ldr	r1, [pc, #12]	@ (800a3a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a39a:	5ccb      	ldrb	r3, [r1, r3]
 800a39c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	46020c00 	.word	0x46020c00
 800a3a8:	08017f04 	.word	0x08017f04

0800a3ac <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a3b0:	f7ff ffba 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	4b05      	ldr	r3, [pc, #20]	@ (800a3cc <HAL_RCC_GetPCLK3Freq+0x20>)
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ba:	091b      	lsrs	r3, r3, #4
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	4903      	ldr	r1, [pc, #12]	@ (800a3d0 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a3c2:	5ccb      	ldrb	r3, [r1, r3]
 800a3c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	46020c00 	.word	0x46020c00
 800a3d0:	08017f04 	.word	0x08017f04

0800a3d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	221f      	movs	r2, #31
 800a3e2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800a3e4:	4b15      	ldr	r3, [pc, #84]	@ (800a43c <HAL_RCC_GetClockConfig+0x68>)
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	f003 0203 	and.w	r2, r3, #3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800a3f0:	4b12      	ldr	r3, [pc, #72]	@ (800a43c <HAL_RCC_GetClockConfig+0x68>)
 800a3f2:	6a1b      	ldr	r3, [r3, #32]
 800a3f4:	f003 020f 	and.w	r2, r3, #15
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a43c <HAL_RCC_GetClockConfig+0x68>)
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800a408:	4b0c      	ldr	r3, [pc, #48]	@ (800a43c <HAL_RCC_GetClockConfig+0x68>)
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	091b      	lsrs	r3, r3, #4
 800a40e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800a416:	4b09      	ldr	r3, [pc, #36]	@ (800a43c <HAL_RCC_GetClockConfig+0x68>)
 800a418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a422:	4b07      	ldr	r3, [pc, #28]	@ (800a440 <HAL_RCC_GetClockConfig+0x6c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 020f 	and.w	r2, r3, #15
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	601a      	str	r2, [r3, #0]
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	46020c00 	.word	0x46020c00
 800a440:	40022000 	.word	0x40022000

0800a444 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a44c:	4b3e      	ldr	r3, [pc, #248]	@ (800a548 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a44e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a45a:	f7fe fd67 	bl	8008f2c <HAL_PWREx_GetVoltageRange>
 800a45e:	6178      	str	r0, [r7, #20]
 800a460:	e019      	b.n	800a496 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a462:	4b39      	ldr	r3, [pc, #228]	@ (800a548 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a468:	4a37      	ldr	r2, [pc, #220]	@ (800a548 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a46a:	f043 0304 	orr.w	r3, r3, #4
 800a46e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a472:	4b35      	ldr	r3, [pc, #212]	@ (800a548 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a480:	f7fe fd54 	bl	8008f2c <HAL_PWREx_GetVoltageRange>
 800a484:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a486:	4b30      	ldr	r3, [pc, #192]	@ (800a548 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a48c:	4a2e      	ldr	r2, [pc, #184]	@ (800a548 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a48e:	f023 0304 	bic.w	r3, r3, #4
 800a492:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a49c:	d003      	beq.n	800a4a6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4a4:	d109      	bne.n	800a4ba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ac:	d202      	bcs.n	800a4b4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a4b2:	e033      	b.n	800a51c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a4b8:	e030      	b.n	800a51c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4c0:	d208      	bcs.n	800a4d4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4c8:	d102      	bne.n	800a4d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	613b      	str	r3, [r7, #16]
 800a4ce:	e025      	b.n	800a51c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e035      	b.n	800a540 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4da:	d90f      	bls.n	800a4fc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d109      	bne.n	800a4f6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4e8:	d902      	bls.n	800a4f0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	613b      	str	r3, [r7, #16]
 800a4ee:	e015      	b.n	800a51c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	e012      	b.n	800a51c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	613b      	str	r3, [r7, #16]
 800a4fa:	e00f      	b.n	800a51c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a502:	d109      	bne.n	800a518 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a50a:	d102      	bne.n	800a512 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a50c:	2301      	movs	r3, #1
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	e004      	b.n	800a51c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a512:	2302      	movs	r3, #2
 800a514:	613b      	str	r3, [r7, #16]
 800a516:	e001      	b.n	800a51c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a518:	2301      	movs	r3, #1
 800a51a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a51c:	4b0b      	ldr	r3, [pc, #44]	@ (800a54c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f023 020f 	bic.w	r2, r3, #15
 800a524:	4909      	ldr	r1, [pc, #36]	@ (800a54c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	4313      	orrs	r3, r2
 800a52a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a52c:	4b07      	ldr	r3, [pc, #28]	@ (800a54c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 030f 	and.w	r3, r3, #15
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	429a      	cmp	r2, r3
 800a538:	d001      	beq.n	800a53e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e000      	b.n	800a540 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	46020c00 	.word	0x46020c00
 800a54c:	40022000 	.word	0x40022000

0800a550 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a554:	b0b8      	sub	sp, #224	@ 0xe0
 800a556:	af00      	add	r7, sp, #0
 800a558:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a55c:	2300      	movs	r3, #0
 800a55e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a562:	2300      	movs	r3, #0
 800a564:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f002 0401 	and.w	r4, r2, #1
 800a574:	2500      	movs	r5, #0
 800a576:	ea54 0305 	orrs.w	r3, r4, r5
 800a57a:	d00b      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a57c:	4bca      	ldr	r3, [pc, #808]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a57e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a582:	f023 0103 	bic.w	r1, r3, #3
 800a586:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a58c:	4ac6      	ldr	r2, [pc, #792]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a58e:	430b      	orrs	r3, r1
 800a590:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	f002 0802 	and.w	r8, r2, #2
 800a5a0:	f04f 0900 	mov.w	r9, #0
 800a5a4:	ea58 0309 	orrs.w	r3, r8, r9
 800a5a8:	d00b      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a5aa:	4bbf      	ldr	r3, [pc, #764]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a5ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5b0:	f023 010c 	bic.w	r1, r3, #12
 800a5b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ba:	4abb      	ldr	r2, [pc, #748]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a5bc:	430b      	orrs	r3, r1
 800a5be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f002 0a04 	and.w	sl, r2, #4
 800a5ce:	f04f 0b00 	mov.w	fp, #0
 800a5d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800a5d6:	d00b      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a5d8:	4bb3      	ldr	r3, [pc, #716]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a5da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5de:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a5e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5e8:	4aaf      	ldr	r2, [pc, #700]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a5f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f002 0308 	and.w	r3, r2, #8
 800a5fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a600:	2300      	movs	r3, #0
 800a602:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a606:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4313      	orrs	r3, r2
 800a60e:	d00b      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a610:	4ba5      	ldr	r3, [pc, #660]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a616:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a61a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a61e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a620:	4aa1      	ldr	r2, [pc, #644]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a622:	430b      	orrs	r3, r1
 800a624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	f002 0310 	and.w	r3, r2, #16
 800a634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a638:	2300      	movs	r3, #0
 800a63a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a63e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a642:	460b      	mov	r3, r1
 800a644:	4313      	orrs	r3, r2
 800a646:	d00b      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a648:	4b97      	ldr	r3, [pc, #604]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a64a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a64e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a658:	4a93      	ldr	r2, [pc, #588]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a65a:	430b      	orrs	r3, r1
 800a65c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	f002 0320 	and.w	r3, r2, #32
 800a66c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a670:	2300      	movs	r3, #0
 800a672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a676:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4313      	orrs	r3, r2
 800a67e:	d00b      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a680:	4b89      	ldr	r3, [pc, #548]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a686:	f023 0107 	bic.w	r1, r3, #7
 800a68a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a68e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a690:	4a85      	ldr	r2, [pc, #532]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a692:	430b      	orrs	r3, r1
 800a694:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a6a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a6ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	d00b      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a6b8:	4b7b      	ldr	r3, [pc, #492]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a6ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6be:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800a6c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6c8:	4a77      	ldr	r2, [pc, #476]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a6d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a6dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a6e6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	d00b      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a6f0:	4b6d      	ldr	r3, [pc, #436]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a6f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a700:	4a69      	ldr	r2, [pc, #420]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a702:	430b      	orrs	r3, r1
 800a704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800a714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a718:	2300      	movs	r3, #0
 800a71a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a71e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a722:	460b      	mov	r3, r1
 800a724:	4313      	orrs	r3, r2
 800a726:	d00b      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800a728:	4b5f      	ldr	r3, [pc, #380]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a72a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a72e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a738:	4a5b      	ldr	r2, [pc, #364]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a73a:	430b      	orrs	r3, r1
 800a73c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a74c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a750:	2300      	movs	r3, #0
 800a752:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a756:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a75a:	460b      	mov	r3, r1
 800a75c:	4313      	orrs	r3, r2
 800a75e:	d00b      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800a760:	4b51      	ldr	r3, [pc, #324]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a766:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800a76a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a76e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a770:	4a4d      	ldr	r2, [pc, #308]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a772:	430b      	orrs	r3, r1
 800a774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800a784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a788:	2300      	movs	r3, #0
 800a78a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a78e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a792:	460b      	mov	r3, r1
 800a794:	4313      	orrs	r3, r2
 800a796:	d00b      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800a798:	4b43      	ldr	r3, [pc, #268]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a79a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a79e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800a7a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a7a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7a8:	4a3f      	ldr	r2, [pc, #252]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a7b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a7bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	d00b      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800a7d0:	4b35      	ldr	r3, [pc, #212]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a7d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7d6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800a7da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a7de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7e0:	4a31      	ldr	r2, [pc, #196]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a7e2:	430b      	orrs	r3, r1
 800a7e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800a7e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a7f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a7fe:	460b      	mov	r3, r1
 800a800:	4313      	orrs	r3, r2
 800a802:	d00c      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800a804:	4b28      	ldr	r3, [pc, #160]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a80a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a80e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a816:	4a24      	ldr	r2, [pc, #144]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a818:	430b      	orrs	r3, r1
 800a81a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a81e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a82a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a82c:	2300      	movs	r3, #0
 800a82e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a830:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a834:	460b      	mov	r3, r1
 800a836:	4313      	orrs	r3, r2
 800a838:	d04f      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800a83a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a842:	2b80      	cmp	r3, #128	@ 0x80
 800a844:	d02d      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800a846:	2b80      	cmp	r3, #128	@ 0x80
 800a848:	d827      	bhi.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a84a:	2b60      	cmp	r3, #96	@ 0x60
 800a84c:	d02e      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a84e:	2b60      	cmp	r3, #96	@ 0x60
 800a850:	d823      	bhi.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a852:	2b40      	cmp	r3, #64	@ 0x40
 800a854:	d006      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800a856:	2b40      	cmp	r3, #64	@ 0x40
 800a858:	d81f      	bhi.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d009      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800a85e:	2b20      	cmp	r3, #32
 800a860:	d011      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a862:	e01a      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a864:	4b10      	ldr	r3, [pc, #64]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a868:	4a0f      	ldr	r2, [pc, #60]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a86a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a86e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a870:	e01d      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a876:	3308      	adds	r3, #8
 800a878:	4618      	mov	r0, r3
 800a87a:	f002 fa13 	bl	800cca4 <RCCEx_PLL2_Config>
 800a87e:	4603      	mov	r3, r0
 800a880:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a884:	e013      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a88a:	332c      	adds	r3, #44	@ 0x2c
 800a88c:	4618      	mov	r0, r3
 800a88e:	f002 faa1 	bl	800cdd4 <RCCEx_PLL3_Config>
 800a892:	4603      	mov	r3, r0
 800a894:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a898:	e009      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800a8a0:	e005      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800a8a2:	bf00      	nop
 800a8a4:	e003      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800a8a6:	bf00      	nop
 800a8a8:	46020c00 	.word	0x46020c00
        break;
 800a8ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10d      	bne.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800a8b6:	4bb6      	ldr	r3, [pc, #728]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a8b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8bc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800a8c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8c8:	4ab1      	ldr	r2, [pc, #708]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a8ca:	430b      	orrs	r3, r1
 800a8cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a8d0:	e003      	b.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a8d6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a8da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a8e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	d053      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800a8f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a902:	d033      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a908:	d82c      	bhi.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a90a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a90e:	d02f      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a910:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a914:	d826      	bhi.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a91a:	d008      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a91c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a920:	d820      	bhi.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00a      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a92a:	d011      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800a92c:	e01a      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a92e:	4b98      	ldr	r3, [pc, #608]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a932:	4a97      	ldr	r2, [pc, #604]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a938:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a93a:	e01a      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a93c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a940:	3308      	adds	r3, #8
 800a942:	4618      	mov	r0, r3
 800a944:	f002 f9ae 	bl	800cca4 <RCCEx_PLL2_Config>
 800a948:	4603      	mov	r3, r0
 800a94a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a94e:	e010      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a954:	332c      	adds	r3, #44	@ 0x2c
 800a956:	4618      	mov	r0, r3
 800a958:	f002 fa3c 	bl	800cdd4 <RCCEx_PLL3_Config>
 800a95c:	4603      	mov	r3, r0
 800a95e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a962:	e006      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800a96a:	e002      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800a96c:	bf00      	nop
 800a96e:	e000      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800a970:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a972:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10d      	bne.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800a97a:	4b85      	ldr	r3, [pc, #532]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a97c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a980:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800a984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a98c:	4a80      	ldr	r2, [pc, #512]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a98e:	430b      	orrs	r3, r1
 800a990:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a994:	e003      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a996:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a99a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800a99e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a9aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	667b      	str	r3, [r7, #100]	@ 0x64
 800a9b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	d046      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800a9ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a9be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a9c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a9c6:	d028      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a9c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a9cc:	d821      	bhi.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a9ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9d2:	d022      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a9d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9d8:	d81b      	bhi.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a9da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9de:	d01c      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a9e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9e4:	d815      	bhi.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a9e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ea:	d008      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a9ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9f0:	d80f      	bhi.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d011      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a9f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9fa:	d00e      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a9fc:	e009      	b.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a9fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa02:	3308      	adds	r3, #8
 800aa04:	4618      	mov	r0, r3
 800aa06:	f002 f94d 	bl	800cca4 <RCCEx_PLL2_Config>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800aa10:	e004      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800aa18:	e000      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800aa1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa1c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10d      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800aa24:	4b5a      	ldr	r3, [pc, #360]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800aa26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa2a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800aa2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aa36:	4a56      	ldr	r2, [pc, #344]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800aa3e:	e003      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800aa44:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800aa48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800aa54:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa56:	2300      	movs	r3, #0
 800aa58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa5a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800aa5e:	460b      	mov	r3, r1
 800aa60:	4313      	orrs	r3, r2
 800aa62:	d03f      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800aa64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	d81e      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800aa70:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aab7 	.word	0x0800aab7
 800aa7c:	0800aa8d 	.word	0x0800aa8d
 800aa80:	0800aa9b 	.word	0x0800aa9b
 800aa84:	0800aab7 	.word	0x0800aab7
 800aa88:	0800aab7 	.word	0x0800aab7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aa8c:	4b40      	ldr	r3, [pc, #256]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa90:	4a3f      	ldr	r2, [pc, #252]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800aa92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa96:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800aa98:	e00e      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aa9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa9e:	332c      	adds	r3, #44	@ 0x2c
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f002 f997 	bl	800cdd4 <RCCEx_PLL3_Config>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800aaac:	e004      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800aab4:	e000      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800aab6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800aab8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10d      	bne.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800aac0:	4b33      	ldr	r3, [pc, #204]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800aac2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aac6:	f023 0107 	bic.w	r1, r3, #7
 800aaca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aad2:	4a2f      	ldr	r2, [pc, #188]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800aad4:	430b      	orrs	r3, r1
 800aad6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800aada:	e003      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aadc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800aae0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800aae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800aaf0:	653b      	str	r3, [r7, #80]	@ 0x50
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	657b      	str	r3, [r7, #84]	@ 0x54
 800aaf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800aafa:	460b      	mov	r3, r1
 800aafc:	4313      	orrs	r3, r2
 800aafe:	d04d      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800ab00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab0c:	d028      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800ab0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab12:	d821      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ab14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab18:	d024      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800ab1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab1e:	d81b      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ab20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab24:	d00e      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800ab26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab2a:	d815      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d01b      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800ab30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab34:	d110      	bne.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ab36:	4b16      	ldr	r3, [pc, #88]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800ab38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3a:	4a15      	ldr	r2, [pc, #84]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800ab3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab40:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800ab42:	e012      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ab44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab48:	332c      	adds	r3, #44	@ 0x2c
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f002 f942 	bl	800cdd4 <RCCEx_PLL3_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800ab56:	e008      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800ab5e:	e004      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800ab60:	bf00      	nop
 800ab62:	e002      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800ab64:	bf00      	nop
 800ab66:	e000      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800ab68:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ab6a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d110      	bne.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800ab72:	4b07      	ldr	r3, [pc, #28]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800ab74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ab7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab84:	4a02      	ldr	r2, [pc, #8]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800ab86:	430b      	orrs	r3, r1
 800ab88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ab8c:	e006      	b.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ab8e:	bf00      	nop
 800ab90:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab94:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ab98:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800aba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abaa:	2300      	movs	r3, #0
 800abac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800abb2:	460b      	mov	r3, r1
 800abb4:	4313      	orrs	r3, r2
 800abb6:	f000 80b5 	beq.w	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800abba:	2300      	movs	r3, #0
 800abbc:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800abc0:	4b9d      	ldr	r3, [pc, #628]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800abc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d113      	bne.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abce:	4b9a      	ldr	r3, [pc, #616]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800abd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abd4:	4a98      	ldr	r2, [pc, #608]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800abd6:	f043 0304 	orr.w	r3, r3, #4
 800abda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800abde:	4b96      	ldr	r3, [pc, #600]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800abe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800abf0:	2301      	movs	r3, #1
 800abf2:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800abf6:	4b91      	ldr	r3, [pc, #580]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800abf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfa:	4a90      	ldr	r2, [pc, #576]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800abfc:	f043 0301 	orr.w	r3, r3, #1
 800ac00:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac02:	f7f7 fdfb 	bl	80027fc <HAL_GetTick>
 800ac06:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ac0a:	e00b      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac0c:	f7f7 fdf6 	bl	80027fc <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d903      	bls.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800ac22:	e005      	b.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ac24:	4b85      	ldr	r3, [pc, #532]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0ed      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800ac30:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d165      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ac38:	4b7f      	ldr	r3, [pc, #508]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ac3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800ac46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d023      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800ac4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac52:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800ac56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d01b      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ac5e:	4b76      	ldr	r3, [pc, #472]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ac60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac6c:	4b72      	ldr	r3, [pc, #456]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ac6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac72:	4a71      	ldr	r2, [pc, #452]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ac74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac7c:	4b6e      	ldr	r3, [pc, #440]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ac7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac82:	4a6d      	ldr	r2, [pc, #436]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ac84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ac8c:	4a6a      	ldr	r2, [pc, #424]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ac8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ac96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d019      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca2:	f7f7 fdab 	bl	80027fc <HAL_GetTick>
 800aca6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acaa:	e00d      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acac:	f7f7 fda6 	bl	80027fc <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800acb6:	1ad2      	subs	r2, r2, r3
 800acb8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d903      	bls.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800acc6:	e006      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acc8:	4b5b      	ldr	r3, [pc, #364]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800acca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800acce:	f003 0302 	and.w	r3, r3, #2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d0ea      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800acd6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10d      	bne.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800acde:	4b56      	ldr	r3, [pc, #344]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ace0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ace4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ace8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800acf0:	4a51      	ldr	r2, [pc, #324]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800acf2:	430b      	orrs	r3, r1
 800acf4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800acf8:	e008      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800acfa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800acfe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800ad02:	e003      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad04:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ad08:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ad0c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d107      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad14:	4b48      	ldr	r3, [pc, #288]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ad16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad1a:	4a47      	ldr	r2, [pc, #284]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ad1c:	f023 0304 	bic.w	r3, r3, #4
 800ad20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800ad24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ad30:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad32:	2300      	movs	r3, #0
 800ad34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	d042      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800ad40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad48:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ad4c:	d022      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800ad4e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ad52:	d81b      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800ad54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad58:	d011      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800ad5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad5e:	d815      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d019      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800ad64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad68:	d110      	bne.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ad6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad6e:	3308      	adds	r3, #8
 800ad70:	4618      	mov	r0, r3
 800ad72:	f001 ff97 	bl	800cca4 <RCCEx_PLL2_Config>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800ad7c:	e00d      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad7e:	4b2e      	ldr	r3, [pc, #184]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ad80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad82:	4a2d      	ldr	r2, [pc, #180]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ad84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad88:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800ad8a:	e006      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800ad92:	e002      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800ad94:	bf00      	nop
 800ad96:	e000      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800ad98:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ad9a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10d      	bne.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800ada2:	4b25      	ldr	r3, [pc, #148]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ada4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ada8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800adac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800adb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800adb4:	4a20      	ldr	r2, [pc, #128]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800adb6:	430b      	orrs	r3, r1
 800adb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800adbc:	e003      	b.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adbe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800adc2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800adc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800add2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800add4:	2300      	movs	r3, #0
 800add6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800add8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800addc:	460b      	mov	r3, r1
 800adde:	4313      	orrs	r3, r2
 800ade0:	d032      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800ade2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ade6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800adea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adee:	d00b      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800adf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf4:	d804      	bhi.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d008      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800adfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adfe:	d007      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800ae06:	e004      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800ae08:	bf00      	nop
 800ae0a:	e002      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800ae0c:	bf00      	nop
 800ae0e:	e000      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800ae10:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ae12:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d112      	bne.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800ae1a:	4b07      	ldr	r3, [pc, #28]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ae1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae2c:	4a02      	ldr	r2, [pc, #8]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ae2e:	430b      	orrs	r3, r1
 800ae30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ae34:	e008      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800ae36:	bf00      	nop
 800ae38:	46020c00 	.word	0x46020c00
 800ae3c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ae44:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800ae48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ae54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae56:	2300      	movs	r3, #0
 800ae58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ae5e:	460b      	mov	r3, r1
 800ae60:	4313      	orrs	r3, r2
 800ae62:	d019      	beq.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800ae64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ae6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae70:	d105      	bne.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae72:	4b88      	ldr	r3, [pc, #544]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800ae74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae76:	4a87      	ldr	r2, [pc, #540]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800ae78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae7c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800ae7e:	4b85      	ldr	r3, [pc, #532]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800ae80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae84:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ae88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ae90:	4a80      	ldr	r2, [pc, #512]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800ae92:	430b      	orrs	r3, r1
 800ae94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800ae98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800aea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aea6:	2300      	movs	r3, #0
 800aea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aeaa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	d00c      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800aeb4:	4b77      	ldr	r3, [pc, #476]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800aeb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aeba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aebe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aec6:	4973      	ldr	r1, [pc, #460]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800aece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800aeda:	623b      	str	r3, [r7, #32]
 800aedc:	2300      	movs	r3, #0
 800aede:	627b      	str	r3, [r7, #36]	@ 0x24
 800aee0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aee4:	460b      	mov	r3, r1
 800aee6:	4313      	orrs	r3, r2
 800aee8:	d00c      	beq.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800aeea:	4b6a      	ldr	r3, [pc, #424]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800aeec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aef0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aefc:	4965      	ldr	r1, [pc, #404]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800aefe:	4313      	orrs	r3, r2
 800af00:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800af04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800af10:	61bb      	str	r3, [r7, #24]
 800af12:	2300      	movs	r3, #0
 800af14:	61fb      	str	r3, [r7, #28]
 800af16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af1a:	460b      	mov	r3, r1
 800af1c:	4313      	orrs	r3, r2
 800af1e:	d00c      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800af20:	4b5c      	ldr	r3, [pc, #368]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800af22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af26:	f023 0218 	bic.w	r2, r3, #24
 800af2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800af32:	4958      	ldr	r1, [pc, #352]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800af34:	4313      	orrs	r3, r2
 800af36:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800af3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800af46:	613b      	str	r3, [r7, #16]
 800af48:	2300      	movs	r3, #0
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af50:	460b      	mov	r3, r1
 800af52:	4313      	orrs	r3, r2
 800af54:	d032      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800af56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800af5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af62:	d105      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af64:	4b4b      	ldr	r3, [pc, #300]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800af66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af68:	4a4a      	ldr	r2, [pc, #296]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800af6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af6e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800af70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800af78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af7c:	d108      	bne.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800af7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af82:	3308      	adds	r3, #8
 800af84:	4618      	mov	r0, r3
 800af86:	f001 fe8d 	bl	800cca4 <RCCEx_PLL2_Config>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 800af90:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10d      	bne.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800af98:	4b3e      	ldr	r3, [pc, #248]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800af9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800afa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800afa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800afaa:	493a      	ldr	r1, [pc, #232]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800afac:	4313      	orrs	r3, r2
 800afae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800afb2:	e003      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800afb8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800afbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800afc8:	60bb      	str	r3, [r7, #8]
 800afca:	2300      	movs	r3, #0
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800afd2:	460b      	mov	r3, r1
 800afd4:	4313      	orrs	r3, r2
 800afd6:	d03a      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800afd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800afdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afe4:	d00e      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800afe6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afea:	d815      	bhi.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800afec:	2b00      	cmp	r3, #0
 800afee:	d017      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800aff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aff4:	d110      	bne.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aff6:	4b27      	ldr	r3, [pc, #156]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800aff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affa:	4a26      	ldr	r2, [pc, #152]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800affc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b000:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b002:	e00e      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b008:	3308      	adds	r3, #8
 800b00a:	4618      	mov	r0, r3
 800b00c:	f001 fe4a 	bl	800cca4 <RCCEx_PLL2_Config>
 800b010:	4603      	mov	r3, r0
 800b012:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b016:	e004      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800b01e:	e000      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800b020:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b022:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10d      	bne.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b02a:	4b1a      	ldr	r3, [pc, #104]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800b02c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b030:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b03c:	4915      	ldr	r1, [pc, #84]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b044:	e003      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b046:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800b04a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b04e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	2300      	movs	r3, #0
 800b05e:	607b      	str	r3, [r7, #4]
 800b060:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b064:	460b      	mov	r3, r1
 800b066:	4313      	orrs	r3, r2
 800b068:	d00c      	beq.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b06a:	4b0a      	ldr	r3, [pc, #40]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800b06c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b070:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b078:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b07c:	4905      	ldr	r1, [pc, #20]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b084:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 800b088:	4618      	mov	r0, r3
 800b08a:	37e0      	adds	r7, #224	@ 0xe0
 800b08c:	46bd      	mov	sp, r7
 800b08e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b092:	bf00      	nop
 800b094:	46020c00 	.word	0x46020c00

0800b098 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b098:	b480      	push	{r7}
 800b09a:	b089      	sub	sp, #36	@ 0x24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b0a0:	4ba6      	ldr	r3, [pc, #664]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b0a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b0aa:	4ba4      	ldr	r3, [pc, #656]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b0b4:	4ba1      	ldr	r3, [pc, #644]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b8:	0a1b      	lsrs	r3, r3, #8
 800b0ba:	f003 030f 	and.w	r3, r3, #15
 800b0be:	3301      	adds	r3, #1
 800b0c0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b0c2:	4b9e      	ldr	r3, [pc, #632]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c6:	091b      	lsrs	r3, r3, #4
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b0ce:	4b9b      	ldr	r3, [pc, #620]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d2:	08db      	lsrs	r3, r3, #3
 800b0d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	fb02 f303 	mul.w	r3, r2, r3
 800b0de:	ee07 3a90 	vmov	s15, r3
 800b0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d062      	beq.n	800b1b6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	f200 8081 	bhi.w	800b1fa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d024      	beq.n	800b148 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d17a      	bne.n	800b1fa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b116:	4b89      	ldr	r3, [pc, #548]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b126:	ed97 6a02 	vldr	s12, [r7, #8]
 800b12a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b132:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b146:	e08f      	b.n	800b268 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b148:	4b7c      	ldr	r3, [pc, #496]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d005      	beq.n	800b160 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800b154:	4b79      	ldr	r3, [pc, #484]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	0f1b      	lsrs	r3, r3, #28
 800b15a:	f003 030f 	and.w	r3, r3, #15
 800b15e:	e006      	b.n	800b16e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800b160:	4b76      	ldr	r3, [pc, #472]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b166:	041b      	lsls	r3, r3, #16
 800b168:	0f1b      	lsrs	r3, r3, #28
 800b16a:	f003 030f 	and.w	r3, r3, #15
 800b16e:	4a76      	ldr	r2, [pc, #472]	@ (800b348 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b174:	ee07 3a90 	vmov	s15, r3
 800b178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b194:	ed97 6a02 	vldr	s12, [r7, #8]
 800b198:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b19c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b1ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1b4:	e058      	b.n	800b268 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	ee07 3a90 	vmov	s15, r3
 800b1bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b1c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c8:	4b5c      	ldr	r3, [pc, #368]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d0:	ee07 3a90 	vmov	s15, r3
 800b1d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1d8:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1dc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b1e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b1e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b1f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1f8:	e036      	b.n	800b268 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b1fa:	4b50      	ldr	r3, [pc, #320]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800b206:	4b4d      	ldr	r3, [pc, #308]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	0f1b      	lsrs	r3, r3, #28
 800b20c:	f003 030f 	and.w	r3, r3, #15
 800b210:	e006      	b.n	800b220 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800b212:	4b4a      	ldr	r3, [pc, #296]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b218:	041b      	lsls	r3, r3, #16
 800b21a:	0f1b      	lsrs	r3, r3, #28
 800b21c:	f003 030f 	and.w	r3, r3, #15
 800b220:	4a49      	ldr	r2, [pc, #292]	@ (800b348 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	ee07 3a90 	vmov	s15, r3
 800b234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b246:	ed97 6a02 	vldr	s12, [r7, #8]
 800b24a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b266:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b268:	4b34      	ldr	r3, [pc, #208]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d017      	beq.n	800b2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b274:	4b31      	ldr	r3, [pc, #196]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b278:	0a5b      	lsrs	r3, r3, #9
 800b27a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b28a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b28e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b29a:	ee17 2a90 	vmov	r2, s15
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	e002      	b.n	800b2aa <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b2aa:	4b24      	ldr	r3, [pc, #144]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d017      	beq.n	800b2e6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b2b6:	4b21      	ldr	r3, [pc, #132]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b2b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ba:	0c1b      	lsrs	r3, r3, #16
 800b2bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2c0:	ee07 3a90 	vmov	s15, r3
 800b2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b2c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2cc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b2d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2dc:	ee17 2a90 	vmov	r2, s15
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	605a      	str	r2, [r3, #4]
 800b2e4:	e002      	b.n	800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b2ec:	4b13      	ldr	r3, [pc, #76]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d017      	beq.n	800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b2f8:	4b10      	ldr	r3, [pc, #64]	@ (800b33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2fc:	0e1b      	lsrs	r3, r3, #24
 800b2fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b30a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b30e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b312:	edd7 6a07 	vldr	s13, [r7, #28]
 800b316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b31a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b31e:	ee17 2a90 	vmov	r2, s15
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b326:	e002      	b.n	800b32e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	609a      	str	r2, [r3, #8]
}
 800b32e:	bf00      	nop
 800b330:	3724      	adds	r7, #36	@ 0x24
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	46020c00 	.word	0x46020c00
 800b340:	4b742400 	.word	0x4b742400
 800b344:	46000000 	.word	0x46000000
 800b348:	08017f0c 	.word	0x08017f0c

0800b34c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b089      	sub	sp, #36	@ 0x24
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b354:	4ba6      	ldr	r3, [pc, #664]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b35e:	4ba4      	ldr	r3, [pc, #656]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b368:	4ba1      	ldr	r3, [pc, #644]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36c:	0a1b      	lsrs	r3, r3, #8
 800b36e:	f003 030f 	and.w	r3, r3, #15
 800b372:	3301      	adds	r3, #1
 800b374:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800b376:	4b9e      	ldr	r3, [pc, #632]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37a:	091b      	lsrs	r3, r3, #4
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b382:	4b9b      	ldr	r3, [pc, #620]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b386:	08db      	lsrs	r3, r3, #3
 800b388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	fb02 f303 	mul.w	r3, r2, r3
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d062      	beq.n	800b46a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	f200 8081 	bhi.w	800b4ae <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d024      	beq.n	800b3fc <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d17a      	bne.n	800b4ae <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800b3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ca:	4b89      	ldr	r3, [pc, #548]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b3cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d2:	ee07 3a90 	vmov	s15, r3
 800b3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3de:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3fa:	e08f      	b.n	800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b3fc:	4b7c      	ldr	r3, [pc, #496]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d005      	beq.n	800b414 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800b408:	4b79      	ldr	r3, [pc, #484]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	0f1b      	lsrs	r3, r3, #28
 800b40e:	f003 030f 	and.w	r3, r3, #15
 800b412:	e006      	b.n	800b422 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800b414:	4b76      	ldr	r3, [pc, #472]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b41a:	041b      	lsls	r3, r3, #16
 800b41c:	0f1b      	lsrs	r3, r3, #28
 800b41e:	f003 030f 	and.w	r3, r3, #15
 800b422:	4a76      	ldr	r2, [pc, #472]	@ (800b5fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800b424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	ee07 3a90 	vmov	s15, r3
 800b436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	ee07 3a90 	vmov	s15, r3
 800b444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b448:	ed97 6a02 	vldr	s12, [r7, #8]
 800b44c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b45c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b464:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b468:	e058      	b.n	800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b474:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800b478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b47c:	4b5c      	ldr	r3, [pc, #368]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b484:	ee07 3a90 	vmov	s15, r3
 800b488:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b48c:	ed97 6a02 	vldr	s12, [r7, #8]
 800b490:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b494:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b498:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b49c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b4a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4ac:	e036      	b.n	800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b4ae:	4b50      	ldr	r3, [pc, #320]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d005      	beq.n	800b4c6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800b4ba:	4b4d      	ldr	r3, [pc, #308]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	0f1b      	lsrs	r3, r3, #28
 800b4c0:	f003 030f 	and.w	r3, r3, #15
 800b4c4:	e006      	b.n	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800b4c6:	4b4a      	ldr	r3, [pc, #296]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b4c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b4cc:	041b      	lsls	r3, r3, #16
 800b4ce:	0f1b      	lsrs	r3, r3, #28
 800b4d0:	f003 030f 	and.w	r3, r3, #15
 800b4d4:	4a49      	ldr	r2, [pc, #292]	@ (800b5fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800b4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	ee07 3a90 	vmov	s15, r3
 800b4e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	ee07 3a90 	vmov	s15, r3
 800b4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4fe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b50a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b512:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b51a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800b51c:	4b34      	ldr	r3, [pc, #208]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b524:	2b00      	cmp	r3, #0
 800b526:	d017      	beq.n	800b558 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b528:	4b31      	ldr	r3, [pc, #196]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b52a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b52c:	0a5b      	lsrs	r3, r3, #9
 800b52e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b532:	ee07 3a90 	vmov	s15, r3
 800b536:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800b53a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b53e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b542:	edd7 6a07 	vldr	s13, [r7, #28]
 800b546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b54a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b54e:	ee17 2a90 	vmov	r2, s15
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	e002      	b.n	800b55e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800b55e:	4b24      	ldr	r3, [pc, #144]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d017      	beq.n	800b59a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b56a:	4b21      	ldr	r3, [pc, #132]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b56c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b56e:	0c1b      	lsrs	r3, r3, #16
 800b570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b574:	ee07 3a90 	vmov	s15, r3
 800b578:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800b57c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b580:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b584:	edd7 6a07 	vldr	s13, [r7, #28]
 800b588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b58c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b590:	ee17 2a90 	vmov	r2, s15
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	605a      	str	r2, [r3, #4]
 800b598:	e002      	b.n	800b5a0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800b5a0:	4b13      	ldr	r3, [pc, #76]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d017      	beq.n	800b5dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b5ac:	4b10      	ldr	r3, [pc, #64]	@ (800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b5ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5b0:	0e1b      	lsrs	r3, r3, #24
 800b5b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800b5be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b5c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5d2:	ee17 2a90 	vmov	r2, s15
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b5da:	e002      	b.n	800b5e2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	609a      	str	r2, [r3, #8]
}
 800b5e2:	bf00      	nop
 800b5e4:	3724      	adds	r7, #36	@ 0x24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	46020c00 	.word	0x46020c00
 800b5f4:	4b742400 	.word	0x4b742400
 800b5f8:	46000000 	.word	0x46000000
 800b5fc:	08017f0c 	.word	0x08017f0c

0800b600 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b600:	b480      	push	{r7}
 800b602:	b089      	sub	sp, #36	@ 0x24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800b608:	4ba6      	ldr	r3, [pc, #664]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b60a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b610:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800b612:	4ba4      	ldr	r3, [pc, #656]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b616:	f003 0303 	and.w	r3, r3, #3
 800b61a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800b61c:	4ba1      	ldr	r3, [pc, #644]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b620:	0a1b      	lsrs	r3, r3, #8
 800b622:	f003 030f 	and.w	r3, r3, #15
 800b626:	3301      	adds	r3, #1
 800b628:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800b62a:	4b9e      	ldr	r3, [pc, #632]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b62c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b62e:	091b      	lsrs	r3, r3, #4
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800b636:	4b9b      	ldr	r3, [pc, #620]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b63a:	08db      	lsrs	r3, r3, #3
 800b63c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	fb02 f303 	mul.w	r3, r2, r3
 800b646:	ee07 3a90 	vmov	s15, r3
 800b64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b03      	cmp	r3, #3
 800b656:	d062      	beq.n	800b71e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	f200 8081 	bhi.w	800b762 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d024      	beq.n	800b6b0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d17a      	bne.n	800b762 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	ee07 3a90 	vmov	s15, r3
 800b672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b676:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800b67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b67e:	4b89      	ldr	r3, [pc, #548]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b686:	ee07 3a90 	vmov	s15, r3
 800b68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800b68e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b692:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b8ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800b696:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800b69e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6aa:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800b6ae:	e08f      	b.n	800b7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b6b0:	4b7c      	ldr	r3, [pc, #496]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d005      	beq.n	800b6c8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800b6bc:	4b79      	ldr	r3, [pc, #484]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	0f1b      	lsrs	r3, r3, #28
 800b6c2:	f003 030f 	and.w	r3, r3, #15
 800b6c6:	e006      	b.n	800b6d6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800b6c8:	4b76      	ldr	r3, [pc, #472]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b6ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6ce:	041b      	lsls	r3, r3, #16
 800b6d0:	0f1b      	lsrs	r3, r3, #28
 800b6d2:	f003 030f 	and.w	r3, r3, #15
 800b6d6:	4a76      	ldr	r2, [pc, #472]	@ (800b8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800b6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6dc:	ee07 3a90 	vmov	s15, r3
 800b6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	ee07 3a90 	vmov	s15, r3
 800b6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	ee07 3a90 	vmov	s15, r3
 800b6f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6fc:	ed97 6a02 	vldr	s12, [r7, #8]
 800b700:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b8ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800b704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b70c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b710:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b714:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b71c:	e058      	b.n	800b7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	ee07 3a90 	vmov	s15, r3
 800b724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b728:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800b72c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b730:	4b5c      	ldr	r3, [pc, #368]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b738:	ee07 3a90 	vmov	s15, r3
 800b73c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800b740:	ed97 6a02 	vldr	s12, [r7, #8]
 800b744:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b8ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800b748:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b74c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800b750:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b754:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b75c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b760:	e036      	b.n	800b7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b762:	4b50      	ldr	r3, [pc, #320]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d005      	beq.n	800b77a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800b76e:	4b4d      	ldr	r3, [pc, #308]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	0f1b      	lsrs	r3, r3, #28
 800b774:	f003 030f 	and.w	r3, r3, #15
 800b778:	e006      	b.n	800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800b77a:	4b4a      	ldr	r3, [pc, #296]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b77c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b780:	041b      	lsls	r3, r3, #16
 800b782:	0f1b      	lsrs	r3, r3, #28
 800b784:	f003 030f 	and.w	r3, r3, #15
 800b788:	4a49      	ldr	r2, [pc, #292]	@ (800b8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800b78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b78e:	ee07 3a90 	vmov	s15, r3
 800b792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	ee07 3a90 	vmov	s15, r3
 800b79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	ee07 3a90 	vmov	s15, r3
 800b7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7b2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b8ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800b7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7ce:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800b7d0:	4b34      	ldr	r3, [pc, #208]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d017      	beq.n	800b80c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b7dc:	4b31      	ldr	r3, [pc, #196]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b7de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7e0:	0a5b      	lsrs	r3, r3, #9
 800b7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7e6:	ee07 3a90 	vmov	s15, r3
 800b7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800b7ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b802:	ee17 2a90 	vmov	r2, s15
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	e002      	b.n	800b812 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800b812:	4b24      	ldr	r3, [pc, #144]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d017      	beq.n	800b84e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b81e:	4b21      	ldr	r3, [pc, #132]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b822:	0c1b      	lsrs	r3, r3, #16
 800b824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b828:	ee07 3a90 	vmov	s15, r3
 800b82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800b830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b834:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b838:	edd7 6a07 	vldr	s13, [r7, #28]
 800b83c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b844:	ee17 2a90 	vmov	r2, s15
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	605a      	str	r2, [r3, #4]
 800b84c:	e002      	b.n	800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800b854:	4b13      	ldr	r3, [pc, #76]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d017      	beq.n	800b890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b860:	4b10      	ldr	r3, [pc, #64]	@ (800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b864:	0e1b      	lsrs	r3, r3, #24
 800b866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800b872:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b876:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b87a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b87e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b886:	ee17 2a90 	vmov	r2, s15
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b88e:	e002      	b.n	800b896 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	609a      	str	r2, [r3, #8]
}
 800b896:	bf00      	nop
 800b898:	3724      	adds	r7, #36	@ 0x24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	46020c00 	.word	0x46020c00
 800b8a8:	4b742400 	.word	0x4b742400
 800b8ac:	46000000 	.word	0x46000000
 800b8b0:	08017f0c 	.word	0x08017f0c

0800b8b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08e      	sub	sp, #56	@ 0x38
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b8be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800b8c6:	430b      	orrs	r3, r1
 800b8c8:	d145      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b8ca:	4baa      	ldr	r3, [pc, #680]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b8cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8d4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800b8d6:	4ba7      	ldr	r3, [pc, #668]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b8d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8dc:	f003 0302 	and.w	r3, r3, #2
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d108      	bne.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8ea:	d104      	bne.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800b8ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8f2:	f001 b987 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800b8f6:	4b9f      	ldr	r3, [pc, #636]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b8f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b904:	d114      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800b906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b90c:	d110      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b90e:	4b99      	ldr	r3, [pc, #612]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b91c:	d103      	bne.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800b91e:	23fa      	movs	r3, #250	@ 0xfa
 800b920:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b922:	f001 b96f 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800b926:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b92a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b92c:	f001 b96a 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800b930:	4b90      	ldr	r3, [pc, #576]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b93c:	d107      	bne.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b944:	d103      	bne.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800b946:	4b8c      	ldr	r3, [pc, #560]	@ (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b948:	637b      	str	r3, [r7, #52]	@ 0x34
 800b94a:	f001 b95b 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	637b      	str	r3, [r7, #52]	@ 0x34
 800b952:	f001 b957 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b95a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b95e:	430b      	orrs	r3, r1
 800b960:	d151      	bne.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b962:	4b84      	ldr	r3, [pc, #528]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b964:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b968:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b96c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	2b80      	cmp	r3, #128	@ 0x80
 800b972:	d035      	beq.n	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b976:	2b80      	cmp	r3, #128	@ 0x80
 800b978:	d841      	bhi.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	2b60      	cmp	r3, #96	@ 0x60
 800b97e:	d02a      	beq.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800b980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b982:	2b60      	cmp	r3, #96	@ 0x60
 800b984:	d83b      	bhi.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b988:	2b40      	cmp	r3, #64	@ 0x40
 800b98a:	d009      	beq.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98e:	2b40      	cmp	r3, #64	@ 0x40
 800b990:	d835      	bhi.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00c      	beq.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800b998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99a:	2b20      	cmp	r3, #32
 800b99c:	d012      	beq.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b99e:	e02e      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff fb77 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9ae:	f001 b929 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9b2:	f107 0318 	add.w	r3, r7, #24
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff fcc8 	bl	800b34c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9c0:	f001 b920 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9c4:	f107 030c 	add.w	r3, r7, #12
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fe19 	bl	800b600 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9d2:	f001 b917 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b9d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b9da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9dc:	f001 b912 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9e0:	4b64      	ldr	r3, [pc, #400]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9ec:	d103      	bne.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800b9ee:	4b63      	ldr	r3, [pc, #396]	@ (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800b9f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b9f2:	f001 b907 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9fa:	f001 b903 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba02:	f001 b8ff 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ba06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba0a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	d158      	bne.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ba12:	4b58      	ldr	r3, [pc, #352]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ba14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ba1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba24:	d03b      	beq.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ba26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba2c:	d846      	bhi.n	800babc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba34:	d02e      	beq.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba3c:	d83e      	bhi.n	800babc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba44:	d00b      	beq.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ba46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba4c:	d836      	bhi.n	800babc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00d      	beq.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba5a:	d012      	beq.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ba5c:	e02e      	b.n	800babc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff fb18 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba6c:	f001 b8ca 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba70:	f107 0318 	add.w	r3, r7, #24
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff fc69 	bl	800b34c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba7e:	f001 b8c1 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba82:	f107 030c 	add.w	r3, r7, #12
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fdba 	bl	800b600 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba90:	f001 b8b8 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ba94:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ba98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba9a:	f001 b8b3 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba9e:	4b35      	ldr	r3, [pc, #212]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800baa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800baaa:	d103      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800baac:	4b33      	ldr	r3, [pc, #204]	@ (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800baae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bab0:	f001 b8a8 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800bab4:	2300      	movs	r3, #0
 800bab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bab8:	f001 b8a4 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bac0:	f001 b8a0 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800bac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bac8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800bacc:	430b      	orrs	r3, r1
 800bace:	d16e      	bne.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800bad0:	4b28      	ldr	r3, [pc, #160]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bad6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800bada:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800badc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bade:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bae2:	d034      	beq.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800bae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800baea:	d85c      	bhi.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800baec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800baf2:	d00b      	beq.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800baf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bafa:	d854      	bhi.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800bafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d016      	beq.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800bb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb08:	d009      	beq.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800bb0a:	e04c      	b.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7ff fac1 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb1a:	f001 b873 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb1e:	f107 0318 	add.w	r3, r7, #24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff fc12 	bl	800b34c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb2c:	f001 b86a 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800bb30:	4b10      	ldr	r3, [pc, #64]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb3c:	d103      	bne.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800bb3e:	4b10      	ldr	r3, [pc, #64]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bb40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb42:	f001 b85f 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb4a:	f001 b85b 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bb4e:	4b09      	ldr	r3, [pc, #36]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 0320 	and.w	r3, r3, #32
 800bb56:	2b20      	cmp	r3, #32
 800bb58:	d121      	bne.n	800bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb5a:	4b06      	ldr	r3, [pc, #24]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00e      	beq.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800bb66:	4b03      	ldr	r3, [pc, #12]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	0e1b      	lsrs	r3, r3, #24
 800bb6c:	f003 030f 	and.w	r3, r3, #15
 800bb70:	e00f      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800bb72:	bf00      	nop
 800bb74:	46020c00 	.word	0x46020c00
 800bb78:	0007a120 	.word	0x0007a120
 800bb7c:	00f42400 	.word	0x00f42400
 800bb80:	02dc6c00 	.word	0x02dc6c00
 800bb84:	4ba7      	ldr	r3, [pc, #668]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bb86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb8a:	041b      	lsls	r3, r3, #16
 800bb8c:	0e1b      	lsrs	r3, r3, #24
 800bb8e:	f003 030f 	and.w	r3, r3, #15
 800bb92:	4aa5      	ldr	r2, [pc, #660]	@ (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800bb94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb9a:	f001 b833 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bba2:	f001 b82f 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbaa:	f001 b82b 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bbae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb2:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800bbb6:	430b      	orrs	r3, r1
 800bbb8:	d17f      	bne.n	800bcba <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bbba:	4b9a      	ldr	r3, [pc, #616]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bbbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbc4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d165      	bne.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800bbcc:	4b95      	ldr	r3, [pc, #596]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bbce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbd2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800bbd6:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbda:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bbde:	d034      	beq.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bbe6:	d853      	bhi.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbee:	d00b      	beq.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbf6:	d84b      	bhi.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d016      	beq.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc04:	d009      	beq.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bc06:	e043      	b.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff fa43 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc14:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bc16:	f000 bff5 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc1a:	f107 0318 	add.w	r3, r7, #24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff fb94 	bl	800b34c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bc28:	f000 bfec 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800bc2c:	4b7d      	ldr	r3, [pc, #500]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc38:	d103      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800bc3a:	4b7c      	ldr	r3, [pc, #496]	@ (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800bc3c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800bc3e:	f000 bfe1 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800bc42:	2300      	movs	r3, #0
 800bc44:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bc46:	f000 bfdd 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bc4a:	4b76      	ldr	r3, [pc, #472]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 0320 	and.w	r3, r3, #32
 800bc52:	2b20      	cmp	r3, #32
 800bc54:	d118      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc56:	4b73      	ldr	r3, [pc, #460]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d005      	beq.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800bc62:	4b70      	ldr	r3, [pc, #448]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	0e1b      	lsrs	r3, r3, #24
 800bc68:	f003 030f 	and.w	r3, r3, #15
 800bc6c:	e006      	b.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800bc6e:	4b6d      	ldr	r3, [pc, #436]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bc70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bc74:	041b      	lsls	r3, r3, #16
 800bc76:	0e1b      	lsrs	r3, r3, #24
 800bc78:	f003 030f 	and.w	r3, r3, #15
 800bc7c:	4a6a      	ldr	r2, [pc, #424]	@ (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800bc7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc82:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800bc84:	f000 bfbe 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bc8c:	f000 bfba 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 800bc90:	2300      	movs	r3, #0
 800bc92:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bc94:	f000 bfb6 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800bc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc9e:	d108      	bne.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff f9f7 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcac:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcae:	f000 bfa9 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb6:	f000 bfa5 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800bcba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcbe:	1e51      	subs	r1, r2, #1
 800bcc0:	430b      	orrs	r3, r1
 800bcc2:	d136      	bne.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bcc4:	4b57      	ldr	r3, [pc, #348]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bcc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcca:	f003 0303 	and.w	r3, r3, #3
 800bcce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800bcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d104      	bne.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800bcd6:	f7fe fb55 	bl	800a384 <HAL_RCC_GetPCLK2Freq>
 800bcda:	6378      	str	r0, [r7, #52]	@ 0x34
 800bcdc:	f000 bf92 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800bce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d104      	bne.n	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bce6:	f7fe fa1d 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800bcea:	6378      	str	r0, [r7, #52]	@ 0x34
 800bcec:	f000 bf8a 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800bcf0:	4b4c      	ldr	r3, [pc, #304]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcfc:	d106      	bne.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d103      	bne.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 800bd04:	4b4a      	ldr	r3, [pc, #296]	@ (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800bd06:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd08:	f000 bf7c 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800bd0c:	4b45      	ldr	r3, [pc, #276]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bd0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d107      	bne.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d104      	bne.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800bd20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd24:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd26:	f000 bf6d 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd2e:	f000 bf69 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800bd32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd36:	1e91      	subs	r1, r2, #2
 800bd38:	430b      	orrs	r3, r1
 800bd3a:	d136      	bne.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800bd3c:	4b39      	ldr	r3, [pc, #228]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bd3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd42:	f003 030c 	and.w	r3, r3, #12
 800bd46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800bd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d104      	bne.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bd4e:	f7fe fb05 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800bd52:	6378      	str	r0, [r7, #52]	@ 0x34
 800bd54:	f000 bf56 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d104      	bne.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bd5e:	f7fe f9e1 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800bd62:	6378      	str	r0, [r7, #52]	@ 0x34
 800bd64:	f000 bf4e 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800bd68:	4b2e      	ldr	r3, [pc, #184]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd74:	d106      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800bd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd78:	2b08      	cmp	r3, #8
 800bd7a:	d103      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 800bd7c:	4b2c      	ldr	r3, [pc, #176]	@ (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800bd7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd80:	f000 bf40 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800bd84:	4b27      	ldr	r3, [pc, #156]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bd86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d107      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800bd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd94:	2b0c      	cmp	r3, #12
 800bd96:	d104      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800bd98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd9e:	f000 bf31 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bda6:	f000 bf2d 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800bdaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdae:	1f11      	subs	r1, r2, #4
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	d13f      	bne.n	800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800bdb4:	4b1b      	ldr	r3, [pc, #108]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bdb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bdba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bdbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d104      	bne.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bdc6:	f7fe fac9 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800bdca:	6378      	str	r0, [r7, #52]	@ 0x34
 800bdcc:	f000 bf1a 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd2:	2b10      	cmp	r3, #16
 800bdd4:	d104      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bdd6:	f7fe f9a5 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800bdda:	6378      	str	r0, [r7, #52]	@ 0x34
 800bddc:	f000 bf12 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800bde0:	4b10      	ldr	r3, [pc, #64]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bde8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdec:	d106      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800bdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf0:	2b20      	cmp	r3, #32
 800bdf2:	d103      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 800bdf4:	4b0e      	ldr	r3, [pc, #56]	@ (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800bdf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdf8:	f000 bf04 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800bdfc:	4b09      	ldr	r3, [pc, #36]	@ (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bdfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be02:	f003 0302 	and.w	r3, r3, #2
 800be06:	2b02      	cmp	r3, #2
 800be08:	d107      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	2b30      	cmp	r3, #48	@ 0x30
 800be0e:	d104      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800be10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be14:	637b      	str	r3, [r7, #52]	@ 0x34
 800be16:	f000 bef5 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800be1a:	2300      	movs	r3, #0
 800be1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be1e:	f000 bef1 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800be22:	bf00      	nop
 800be24:	46020c00 	.word	0x46020c00
 800be28:	08017f0c 	.word	0x08017f0c
 800be2c:	02dc6c00 	.word	0x02dc6c00
 800be30:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800be34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be38:	f1a2 0108 	sub.w	r1, r2, #8
 800be3c:	430b      	orrs	r3, r1
 800be3e:	d136      	bne.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800be40:	4ba4      	ldr	r3, [pc, #656]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800be42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800be46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800be4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800be4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d104      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800be52:	f7fe fa83 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800be56:	6378      	str	r0, [r7, #52]	@ 0x34
 800be58:	f000 bed4 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800be5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5e:	2b40      	cmp	r3, #64	@ 0x40
 800be60:	d104      	bne.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800be62:	f7fe f95f 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800be66:	6378      	str	r0, [r7, #52]	@ 0x34
 800be68:	f000 becc 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800be6c:	4b99      	ldr	r3, [pc, #612]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be78:	d106      	bne.n	800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800be7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7c:	2b80      	cmp	r3, #128	@ 0x80
 800be7e:	d103      	bne.n	800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800be80:	4b95      	ldr	r3, [pc, #596]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800be82:	637b      	str	r3, [r7, #52]	@ 0x34
 800be84:	f000 bebe 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800be88:	4b92      	ldr	r3, [pc, #584]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800be8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be8e:	f003 0302 	and.w	r3, r3, #2
 800be92:	2b02      	cmp	r3, #2
 800be94:	d107      	bne.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800be96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be98:	2bc0      	cmp	r3, #192	@ 0xc0
 800be9a:	d104      	bne.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 800be9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bea2:	f000 beaf 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	637b      	str	r3, [r7, #52]	@ 0x34
 800beaa:	f000 beab 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800beae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beb2:	f1a2 0110 	sub.w	r1, r2, #16
 800beb6:	430b      	orrs	r3, r1
 800beb8:	d139      	bne.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800beba:	4b86      	ldr	r3, [pc, #536]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bec4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d104      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800becc:	f7fe fa46 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800bed0:	6378      	str	r0, [r7, #52]	@ 0x34
 800bed2:	f000 be97 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800bed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bedc:	d104      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bede:	f7fe f921 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800bee2:	6378      	str	r0, [r7, #52]	@ 0x34
 800bee4:	f000 be8e 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800bee8:	4b7a      	ldr	r3, [pc, #488]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bef4:	d107      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800befc:	d103      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800befe:	4b76      	ldr	r3, [pc, #472]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800bf00:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf02:	f000 be7f 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800bf06:	4b73      	ldr	r3, [pc, #460]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bf08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf0c:	f003 0302 	and.w	r3, r3, #2
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d108      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800bf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf1a:	d104      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800bf1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf20:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf22:	f000 be6f 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf2a:	f000 be6b 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800bf2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf32:	f1a2 0120 	sub.w	r1, r2, #32
 800bf36:	430b      	orrs	r3, r1
 800bf38:	d158      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800bf3a:	4b66      	ldr	r3, [pc, #408]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bf3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bf40:	f003 0307 	and.w	r3, r3, #7
 800bf44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800bf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800bf4c:	f7fe fa2e 	bl	800a3ac <HAL_RCC_GetPCLK3Freq>
 800bf50:	6378      	str	r0, [r7, #52]	@ 0x34
 800bf52:	f000 be57 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800bf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d104      	bne.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bf5c:	f7fe f8e2 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800bf60:	6378      	str	r0, [r7, #52]	@ 0x34
 800bf62:	f000 be4f 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800bf66:	4b5b      	ldr	r3, [pc, #364]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf72:	d106      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800bf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d103      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800bf7a:	4b57      	ldr	r3, [pc, #348]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800bf7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf7e:	f000 be41 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800bf82:	4b54      	ldr	r3, [pc, #336]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bf84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf88:	f003 0302 	and.w	r3, r3, #2
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d107      	bne.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800bf90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf92:	2b03      	cmp	r3, #3
 800bf94:	d104      	bne.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800bf96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf9c:	f000 be32 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800bfa0:	4b4c      	ldr	r3, [pc, #304]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 0320 	and.w	r3, r3, #32
 800bfa8:	2b20      	cmp	r3, #32
 800bfaa:	d11b      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800bfac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d118      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bfb2:	4b48      	ldr	r3, [pc, #288]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d005      	beq.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800bfbe:	4b45      	ldr	r3, [pc, #276]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	0e1b      	lsrs	r3, r3, #24
 800bfc4:	f003 030f 	and.w	r3, r3, #15
 800bfc8:	e006      	b.n	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800bfca:	4b42      	ldr	r3, [pc, #264]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bfcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bfd0:	041b      	lsls	r3, r3, #16
 800bfd2:	0e1b      	lsrs	r3, r3, #24
 800bfd4:	f003 030f 	and.w	r3, r3, #15
 800bfd8:	4a40      	ldr	r2, [pc, #256]	@ (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800bfda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfde:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfe0:	f000 be10 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfe8:	f000 be0c 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800bfec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bff4:	430b      	orrs	r3, r1
 800bff6:	d173      	bne.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800bff8:	4b36      	ldr	r3, [pc, #216]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800bffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bffe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c002:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c00a:	d104      	bne.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c00c:	f7fe f88a 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800c010:	6378      	str	r0, [r7, #52]	@ 0x34
 800c012:	f000 bdf7 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c01c:	d108      	bne.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c01e:	f107 0318 	add.w	r3, r7, #24
 800c022:	4618      	mov	r0, r3
 800c024:	f7ff f992 	bl	800b34c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c02c:	f000 bdea 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c032:	2b00      	cmp	r3, #0
 800c034:	d104      	bne.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800c036:	f7fe f977 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 800c03a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c03c:	f000 bde2 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c042:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c046:	d122      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c048:	4b22      	ldr	r3, [pc, #136]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f003 0320 	and.w	r3, r3, #32
 800c050:	2b20      	cmp	r3, #32
 800c052:	d118      	bne.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c054:	4b1f      	ldr	r3, [pc, #124]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d005      	beq.n	800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800c060:	4b1c      	ldr	r3, [pc, #112]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	0e1b      	lsrs	r3, r3, #24
 800c066:	f003 030f 	and.w	r3, r3, #15
 800c06a:	e006      	b.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800c06c:	4b19      	ldr	r3, [pc, #100]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800c06e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c072:	041b      	lsls	r3, r3, #16
 800c074:	0e1b      	lsrs	r3, r3, #24
 800c076:	f003 030f 	and.w	r3, r3, #15
 800c07a:	4a18      	ldr	r2, [pc, #96]	@ (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800c07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c080:	637b      	str	r3, [r7, #52]	@ 0x34
 800c082:	f000 bdbf 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800c086:	2300      	movs	r3, #0
 800c088:	637b      	str	r3, [r7, #52]	@ 0x34
 800c08a:	f000 bdbb 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c08e:	4b11      	ldr	r3, [pc, #68]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c09a:	d107      	bne.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c0a2:	d103      	bne.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800c0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800c0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a8:	f000 bdac 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c0ac:	4b09      	ldr	r3, [pc, #36]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0b8:	d107      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0c0:	d103      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800c0c2:	4b05      	ldr	r3, [pc, #20]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800c0c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0c6:	f000 bd9d 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0ce:	f000 bd99 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800c0d2:	bf00      	nop
 800c0d4:	46020c00 	.word	0x46020c00
 800c0d8:	00f42400 	.word	0x00f42400
 800c0dc:	08017f0c 	.word	0x08017f0c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800c0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c0e8:	430b      	orrs	r3, r1
 800c0ea:	d158      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800c0ec:	4bad      	ldr	r3, [pc, #692]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c0ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c0f2:	f003 0307 	and.w	r3, r3, #7
 800c0f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fa:	2b04      	cmp	r3, #4
 800c0fc:	d84b      	bhi.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800c100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c104:	0800c13d 	.word	0x0800c13d
 800c108:	0800c119 	.word	0x0800c119
 800c10c:	0800c12b 	.word	0x0800c12b
 800c110:	0800c147 	.word	0x0800c147
 800c114:	0800c151 	.word	0x0800c151
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe ffbb 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c124:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c126:	f000 bd6d 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff fa66 	bl	800b600 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c138:	f000 bd64 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c13c:	f7fe f8f4 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 800c140:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c142:	f000 bd5f 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c146:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c14a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c14c:	f000 bd5a 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c150:	4b94      	ldr	r3, [pc, #592]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 0320 	and.w	r3, r3, #32
 800c158:	2b20      	cmp	r3, #32
 800c15a:	d118      	bne.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c15c:	4b91      	ldr	r3, [pc, #580]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d005      	beq.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 800c168:	4b8e      	ldr	r3, [pc, #568]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	0e1b      	lsrs	r3, r3, #24
 800c16e:	f003 030f 	and.w	r3, r3, #15
 800c172:	e006      	b.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800c174:	4b8b      	ldr	r3, [pc, #556]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c17a:	041b      	lsls	r3, r3, #16
 800c17c:	0e1b      	lsrs	r3, r3, #24
 800c17e:	f003 030f 	and.w	r3, r3, #15
 800c182:	4a89      	ldr	r2, [pc, #548]	@ (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800c184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c188:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c18a:	f000 bd3b 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800c18e:	2300      	movs	r3, #0
 800c190:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c192:	f000 bd37 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c19a:	f000 bd33 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800c19e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800c1a6:	430b      	orrs	r3, r1
 800c1a8:	d167      	bne.n	800c27a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c1aa:	4b7e      	ldr	r3, [pc, #504]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c1ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c1b0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c1b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1bc:	d036      	beq.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800c1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1c4:	d855      	bhi.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c1cc:	d029      	beq.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c1d4:	d84d      	bhi.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1dc:	d013      	beq.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800c1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1e4:	d845      	bhi.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d015      	beq.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1f2:	d13e      	bne.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fe ff4d 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c202:	f000 bcff 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c206:	f107 030c 	add.w	r3, r7, #12
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7ff f9f8 	bl	800b600 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c214:	f000 bcf6 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c218:	f7fe f886 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 800c21c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c21e:	f000 bcf1 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c222:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c226:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c228:	f000 bcec 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c22c:	4b5d      	ldr	r3, [pc, #372]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b20      	cmp	r3, #32
 800c236:	d118      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c238:	4b5a      	ldr	r3, [pc, #360]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800c244:	4b57      	ldr	r3, [pc, #348]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	0e1b      	lsrs	r3, r3, #24
 800c24a:	f003 030f 	and.w	r3, r3, #15
 800c24e:	e006      	b.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800c250:	4b54      	ldr	r3, [pc, #336]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c256:	041b      	lsls	r3, r3, #16
 800c258:	0e1b      	lsrs	r3, r3, #24
 800c25a:	f003 030f 	and.w	r3, r3, #15
 800c25e:	4a52      	ldr	r2, [pc, #328]	@ (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800c260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c264:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c266:	f000 bccd 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800c26a:	2300      	movs	r3, #0
 800c26c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c26e:	f000 bcc9 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800c272:	2300      	movs	r3, #0
 800c274:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c276:	f000 bcc5 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800c27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c27e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800c282:	430b      	orrs	r3, r1
 800c284:	d14c      	bne.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c286:	4b47      	ldr	r3, [pc, #284]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c28c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c290:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c294:	2b00      	cmp	r3, #0
 800c296:	d104      	bne.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c298:	f7fe f860 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800c29c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c29e:	f000 bcb1 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2a8:	d104      	bne.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c2aa:	f7fd ff3b 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800c2ae:	6378      	str	r0, [r7, #52]	@ 0x34
 800c2b0:	f000 bca8 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c2b4:	4b3b      	ldr	r3, [pc, #236]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2c0:	d107      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2c8:	d103      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800c2ca:	4b38      	ldr	r3, [pc, #224]	@ (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c2cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2ce:	f000 bc99 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800c2d2:	4b34      	ldr	r3, [pc, #208]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 0320 	and.w	r3, r3, #32
 800c2da:	2b20      	cmp	r3, #32
 800c2dc:	d11c      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800c2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c2e4:	d118      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c2e6:	4b2f      	ldr	r3, [pc, #188]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d005      	beq.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800c2f2:	4b2c      	ldr	r3, [pc, #176]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	0e1b      	lsrs	r3, r3, #24
 800c2f8:	f003 030f 	and.w	r3, r3, #15
 800c2fc:	e006      	b.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800c2fe:	4b29      	ldr	r3, [pc, #164]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c304:	041b      	lsls	r3, r3, #16
 800c306:	0e1b      	lsrs	r3, r3, #24
 800c308:	f003 030f 	and.w	r3, r3, #15
 800c30c:	4a26      	ldr	r2, [pc, #152]	@ (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800c30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c312:	637b      	str	r3, [r7, #52]	@ 0x34
 800c314:	f000 bc76 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800c318:	2300      	movs	r3, #0
 800c31a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c31c:	f000 bc72 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800c320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c324:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800c328:	430b      	orrs	r3, r1
 800c32a:	d152      	bne.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c32c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c32e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c332:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c336:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d104      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c33e:	f7fe f80d 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800c342:	6378      	str	r0, [r7, #52]	@ 0x34
 800c344:	f000 bc5e 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800c348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c34e:	d104      	bne.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c350:	f7fd fee8 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800c354:	6378      	str	r0, [r7, #52]	@ 0x34
 800c356:	f000 bc55 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c35a:	4b12      	ldr	r3, [pc, #72]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c366:	d107      	bne.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800c368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c36a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c36e:	d103      	bne.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800c370:	4b0e      	ldr	r3, [pc, #56]	@ (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c372:	637b      	str	r3, [r7, #52]	@ 0x34
 800c374:	f000 bc46 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800c378:	4b0a      	ldr	r3, [pc, #40]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 0320 	and.w	r3, r3, #32
 800c380:	2b20      	cmp	r3, #32
 800c382:	d122      	bne.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 800c384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c386:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c38a:	d11e      	bne.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c38c:	4b05      	ldr	r3, [pc, #20]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 800c398:	4b02      	ldr	r3, [pc, #8]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	0e1b      	lsrs	r3, r3, #24
 800c39e:	f003 030f 	and.w	r3, r3, #15
 800c3a2:	e00c      	b.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800c3a4:	46020c00 	.word	0x46020c00
 800c3a8:	08017f0c 	.word	0x08017f0c
 800c3ac:	00f42400 	.word	0x00f42400
 800c3b0:	4ba1      	ldr	r3, [pc, #644]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c3b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3b6:	041b      	lsls	r3, r3, #16
 800c3b8:	0e1b      	lsrs	r3, r3, #24
 800c3ba:	f003 030f 	and.w	r3, r3, #15
 800c3be:	4a9f      	ldr	r2, [pc, #636]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3c6:	f000 bc1d 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ce:	f000 bc19 	b.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800c3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c3da:	430b      	orrs	r3, r1
 800c3dc:	d151      	bne.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c3de:	4b96      	ldr	r3, [pc, #600]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c3e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c3e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c3e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	2bc0      	cmp	r3, #192	@ 0xc0
 800c3ee:	d024      	beq.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c3f4:	d842      	bhi.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	2b80      	cmp	r3, #128	@ 0x80
 800c3fa:	d00d      	beq.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fe:	2b80      	cmp	r3, #128	@ 0x80
 800c400:	d83c      	bhi.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800c402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800c408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40a:	2b40      	cmp	r3, #64	@ 0x40
 800c40c:	d011      	beq.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800c40e:	e035      	b.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800c410:	f7fd ffcc 	bl	800a3ac <HAL_RCC_GetPCLK3Freq>
 800c414:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c416:	e3f5      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c418:	4b87      	ldr	r3, [pc, #540]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c424:	d102      	bne.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800c426:	4b86      	ldr	r3, [pc, #536]	@ (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800c428:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c42a:	e3eb      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800c42c:	2300      	movs	r3, #0
 800c42e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c430:	e3e8      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800c432:	f7fd fe77 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800c436:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c438:	e3e4      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c43a:	4b7f      	ldr	r3, [pc, #508]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0320 	and.w	r3, r3, #32
 800c442:	2b20      	cmp	r3, #32
 800c444:	d117      	bne.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c446:	4b7c      	ldr	r3, [pc, #496]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d005      	beq.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800c452:	4b79      	ldr	r3, [pc, #484]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	0e1b      	lsrs	r3, r3, #24
 800c458:	f003 030f 	and.w	r3, r3, #15
 800c45c:	e006      	b.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800c45e:	4b76      	ldr	r3, [pc, #472]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c464:	041b      	lsls	r3, r3, #16
 800c466:	0e1b      	lsrs	r3, r3, #24
 800c468:	f003 030f 	and.w	r3, r3, #15
 800c46c:	4a73      	ldr	r2, [pc, #460]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c472:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c474:	e3c6      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800c476:	2300      	movs	r3, #0
 800c478:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c47a:	e3c3      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 800c47c:	2300      	movs	r3, #0
 800c47e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c480:	e3c0      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800c482:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c486:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800c48a:	430b      	orrs	r3, r1
 800c48c:	d147      	bne.n	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c48e:	4b6a      	ldr	r3, [pc, #424]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c494:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c498:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800c49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d103      	bne.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c4a0:	f7fd ff5c 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800c4a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c4a6:	e3ad      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4ae:	d103      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c4b0:	f7fd fe38 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800c4b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c4b6:	e3a5      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c4b8:	4b5f      	ldr	r3, [pc, #380]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4c4:	d106      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4cc:	d102      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800c4ce:	4b5c      	ldr	r3, [pc, #368]	@ (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800c4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4d2:	e397      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800c4d4:	4b58      	ldr	r3, [pc, #352]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 0320 	and.w	r3, r3, #32
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	d11b      	bne.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c4e6:	d117      	bne.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c4e8:	4b53      	ldr	r3, [pc, #332]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d005      	beq.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 800c4f4:	4b50      	ldr	r3, [pc, #320]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	0e1b      	lsrs	r3, r3, #24
 800c4fa:	f003 030f 	and.w	r3, r3, #15
 800c4fe:	e006      	b.n	800c50e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800c500:	4b4d      	ldr	r3, [pc, #308]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	0e1b      	lsrs	r3, r3, #24
 800c50a:	f003 030f 	and.w	r3, r3, #15
 800c50e:	4a4b      	ldr	r2, [pc, #300]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c514:	637b      	str	r3, [r7, #52]	@ 0x34
 800c516:	e375      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800c518:	2300      	movs	r3, #0
 800c51a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c51c:	e372      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800c51e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c522:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c526:	430b      	orrs	r3, r1
 800c528:	d164      	bne.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800c52a:	4b43      	ldr	r3, [pc, #268]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c52c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c530:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c534:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800c536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d120      	bne.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c53c:	4b3e      	ldr	r3, [pc, #248]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0320 	and.w	r3, r3, #32
 800c544:	2b20      	cmp	r3, #32
 800c546:	d117      	bne.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c548:	4b3b      	ldr	r3, [pc, #236]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c550:	2b00      	cmp	r3, #0
 800c552:	d005      	beq.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800c554:	4b38      	ldr	r3, [pc, #224]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	0e1b      	lsrs	r3, r3, #24
 800c55a:	f003 030f 	and.w	r3, r3, #15
 800c55e:	e006      	b.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800c560:	4b35      	ldr	r3, [pc, #212]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c566:	041b      	lsls	r3, r3, #16
 800c568:	0e1b      	lsrs	r3, r3, #24
 800c56a:	f003 030f 	and.w	r3, r3, #15
 800c56e:	4a33      	ldr	r2, [pc, #204]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c574:	637b      	str	r3, [r7, #52]	@ 0x34
 800c576:	e345      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800c578:	2300      	movs	r3, #0
 800c57a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c57c:	e342      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800c57e:	4b2e      	ldr	r3, [pc, #184]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c588:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c58c:	d112      	bne.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800c58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c594:	d10e      	bne.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c596:	4b28      	ldr	r3, [pc, #160]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c59c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5a4:	d102      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800c5a6:	23fa      	movs	r3, #250	@ 0xfa
 800c5a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5aa:	e32b      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800c5ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c5b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5b2:	e327      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800c5b4:	4b20      	ldr	r3, [pc, #128]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5c0:	d106      	bne.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5c8:	d102      	bne.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800c5ca:	4b1d      	ldr	r3, [pc, #116]	@ (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800c5cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ce:	e319      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800c5d0:	4b19      	ldr	r3, [pc, #100]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c5d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5d6:	f003 0302 	and.w	r3, r3, #2
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d107      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800c5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5e4:	d103      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800c5e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ec:	e30a      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5f2:	e307      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800c5f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	d16b      	bne.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c600:	4b0d      	ldr	r3, [pc, #52]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c606:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c60a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d127      	bne.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c612:	4b09      	ldr	r3, [pc, #36]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 0320 	and.w	r3, r3, #32
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d11e      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c61e:	4b06      	ldr	r3, [pc, #24]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00c      	beq.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800c62a:	4b03      	ldr	r3, [pc, #12]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	0e1b      	lsrs	r3, r3, #24
 800c630:	f003 030f 	and.w	r3, r3, #15
 800c634:	e00d      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800c636:	bf00      	nop
 800c638:	46020c00 	.word	0x46020c00
 800c63c:	08017f0c 	.word	0x08017f0c
 800c640:	00f42400 	.word	0x00f42400
 800c644:	4b94      	ldr	r3, [pc, #592]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c64a:	041b      	lsls	r3, r3, #16
 800c64c:	0e1b      	lsrs	r3, r3, #24
 800c64e:	f003 030f 	and.w	r3, r3, #15
 800c652:	4a92      	ldr	r2, [pc, #584]	@ (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800c654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c658:	637b      	str	r3, [r7, #52]	@ 0x34
 800c65a:	e2d3      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c660:	e2d0      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800c662:	4b8d      	ldr	r3, [pc, #564]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c66c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c670:	d112      	bne.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800c672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c678:	d10e      	bne.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c67a:	4b87      	ldr	r3, [pc, #540]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c67c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c688:	d102      	bne.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800c68a:	23fa      	movs	r3, #250	@ 0xfa
 800c68c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c68e:	e2b9      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800c690:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c694:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c696:	e2b5      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800c698:	4b7f      	ldr	r3, [pc, #508]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6a4:	d106      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6ac:	d102      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800c6ae:	4b7c      	ldr	r3, [pc, #496]	@ (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c6b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6b2:	e2a7      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800c6b4:	4b78      	ldr	r3, [pc, #480]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c6b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6ba:	f003 0302 	and.w	r3, r3, #2
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d107      	bne.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c6c8:	d103      	bne.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800c6ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6d0:	e298      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6d6:	e295      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800c6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6dc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c6e0:	430b      	orrs	r3, r1
 800c6e2:	d147      	bne.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c6e4:	4b6c      	ldr	r3, [pc, #432]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c6e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6ea:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800c6ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d103      	bne.n	800c6fe <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c6f6:	f7fd fe31 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800c6fa:	6378      	str	r0, [r7, #52]	@ 0x34
 800c6fc:	e282      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800c6fe:	4b66      	ldr	r3, [pc, #408]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c708:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c70c:	d112      	bne.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c710:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c714:	d10e      	bne.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c716:	4b60      	ldr	r3, [pc, #384]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c71c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c724:	d102      	bne.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800c726:	23fa      	movs	r3, #250	@ 0xfa
 800c728:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c72a:	e26b      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800c72c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c730:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c732:	e267      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800c734:	4b58      	ldr	r3, [pc, #352]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c73c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c740:	d106      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800c742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c744:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c748:	d102      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800c74a:	4b55      	ldr	r3, [pc, #340]	@ (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c74c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c74e:	e259      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800c750:	4b51      	ldr	r3, [pc, #324]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c756:	f003 0302 	and.w	r3, r3, #2
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d107      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800c75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c760:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c764:	d103      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800c766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c76a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c76c:	e24a      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800c76e:	2300      	movs	r3, #0
 800c770:	637b      	str	r3, [r7, #52]	@ 0x34
 800c772:	e247      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800c774:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c778:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800c77c:	430b      	orrs	r3, r1
 800c77e:	d12d      	bne.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800c780:	4b45      	ldr	r3, [pc, #276]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c786:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800c78a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800c78c:	4b42      	ldr	r3, [pc, #264]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c798:	d105      	bne.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800c79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d102      	bne.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 800c7a0:	4b3f      	ldr	r3, [pc, #252]	@ (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c7a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7a4:	e22e      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7ac:	d107      	bne.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fc70 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7bc:	e222      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7c4:	d107      	bne.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7c6:	f107 0318 	add.w	r3, r7, #24
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fe fdbe 	bl	800b34c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d4:	e216      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7da:	e213      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c7dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7e0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800c7e4:	430b      	orrs	r3, r1
 800c7e6:	d15d      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c7e8:	4b2b      	ldr	r3, [pc, #172]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c7ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7ee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c7f2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c7fa:	d028      	beq.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c802:	d845      	bhi.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800c804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c80a:	d013      	beq.n	800c834 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800c80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c812:	d83d      	bhi.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800c814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c816:	2b00      	cmp	r3, #0
 800c818:	d004      	beq.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800c81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c820:	d004      	beq.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800c822:	e035      	b.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c824:	f7fd fdae 	bl	800a384 <HAL_RCC_GetPCLK2Freq>
 800c828:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c82a:	e1eb      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c82c:	f7fd fc7a 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800c830:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c832:	e1e7      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c834:	4b18      	ldr	r3, [pc, #96]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c83c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c840:	d102      	bne.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800c842:	4b17      	ldr	r3, [pc, #92]	@ (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c844:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c846:	e1dd      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800c848:	2300      	movs	r3, #0
 800c84a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c84c:	e1da      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c84e:	4b12      	ldr	r3, [pc, #72]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 0320 	and.w	r3, r3, #32
 800c856:	2b20      	cmp	r3, #32
 800c858:	d117      	bne.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c85a:	4b0f      	ldr	r3, [pc, #60]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d005      	beq.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800c866:	4b0c      	ldr	r3, [pc, #48]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	0e1b      	lsrs	r3, r3, #24
 800c86c:	f003 030f 	and.w	r3, r3, #15
 800c870:	e006      	b.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800c872:	4b09      	ldr	r3, [pc, #36]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800c874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c878:	041b      	lsls	r3, r3, #16
 800c87a:	0e1b      	lsrs	r3, r3, #24
 800c87c:	f003 030f 	and.w	r3, r3, #15
 800c880:	4a06      	ldr	r2, [pc, #24]	@ (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800c882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c886:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c888:	e1bc      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800c88a:	2300      	movs	r3, #0
 800c88c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c88e:	e1b9      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800c890:	2300      	movs	r3, #0
 800c892:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c894:	e1b6      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800c896:	bf00      	nop
 800c898:	46020c00 	.word	0x46020c00
 800c89c:	08017f0c 	.word	0x08017f0c
 800c8a0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a8:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800c8ac:	430b      	orrs	r3, r1
 800c8ae:	d156      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c8b0:	4ba5      	ldr	r3, [pc, #660]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800c8b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c8b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c8ba:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c8c2:	d028      	beq.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c8ca:	d845      	bhi.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8d2:	d013      	beq.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8da:	d83d      	bhi.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d004      	beq.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8e8:	d004      	beq.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800c8ea:	e035      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c8ec:	f7fd fd36 	bl	800a35c <HAL_RCC_GetPCLK1Freq>
 800c8f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c8f2:	e187      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c8f4:	f7fd fc16 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800c8f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c8fa:	e183      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8fc:	4b92      	ldr	r3, [pc, #584]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c908:	d102      	bne.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800c90a:	4b90      	ldr	r3, [pc, #576]	@ (800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800c90c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c90e:	e179      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800c910:	2300      	movs	r3, #0
 800c912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c914:	e176      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c916:	4b8c      	ldr	r3, [pc, #560]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f003 0320 	and.w	r3, r3, #32
 800c91e:	2b20      	cmp	r3, #32
 800c920:	d117      	bne.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c922:	4b89      	ldr	r3, [pc, #548]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d005      	beq.n	800c93a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800c92e:	4b86      	ldr	r3, [pc, #536]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	0e1b      	lsrs	r3, r3, #24
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	e006      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800c93a:	4b83      	ldr	r3, [pc, #524]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800c93c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c940:	041b      	lsls	r3, r3, #16
 800c942:	0e1b      	lsrs	r3, r3, #24
 800c944:	f003 030f 	and.w	r3, r3, #15
 800c948:	4a81      	ldr	r2, [pc, #516]	@ (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c94e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c950:	e158      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c956:	e155      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800c958:	2300      	movs	r3, #0
 800c95a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c95c:	e152      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c962:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800c966:	430b      	orrs	r3, r1
 800c968:	d177      	bne.n	800ca5a <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c96a:	4b77      	ldr	r3, [pc, #476]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800c96c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c970:	f003 0318 	and.w	r3, r3, #24
 800c974:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c978:	2b18      	cmp	r3, #24
 800c97a:	d86b      	bhi.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800c97c:	a201      	add	r2, pc, #4	@ (adr r2, 800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800c97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c982:	bf00      	nop
 800c984:	0800c9e9 	.word	0x0800c9e9
 800c988:	0800ca55 	.word	0x0800ca55
 800c98c:	0800ca55 	.word	0x0800ca55
 800c990:	0800ca55 	.word	0x0800ca55
 800c994:	0800ca55 	.word	0x0800ca55
 800c998:	0800ca55 	.word	0x0800ca55
 800c99c:	0800ca55 	.word	0x0800ca55
 800c9a0:	0800ca55 	.word	0x0800ca55
 800c9a4:	0800c9f1 	.word	0x0800c9f1
 800c9a8:	0800ca55 	.word	0x0800ca55
 800c9ac:	0800ca55 	.word	0x0800ca55
 800c9b0:	0800ca55 	.word	0x0800ca55
 800c9b4:	0800ca55 	.word	0x0800ca55
 800c9b8:	0800ca55 	.word	0x0800ca55
 800c9bc:	0800ca55 	.word	0x0800ca55
 800c9c0:	0800ca55 	.word	0x0800ca55
 800c9c4:	0800c9f9 	.word	0x0800c9f9
 800c9c8:	0800ca55 	.word	0x0800ca55
 800c9cc:	0800ca55 	.word	0x0800ca55
 800c9d0:	0800ca55 	.word	0x0800ca55
 800c9d4:	0800ca55 	.word	0x0800ca55
 800c9d8:	0800ca55 	.word	0x0800ca55
 800c9dc:	0800ca55 	.word	0x0800ca55
 800c9e0:	0800ca55 	.word	0x0800ca55
 800c9e4:	0800ca13 	.word	0x0800ca13
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c9e8:	f7fd fce0 	bl	800a3ac <HAL_RCC_GetPCLK3Freq>
 800c9ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c9ee:	e109      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c9f0:	f7fd fb98 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800c9f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c9f6:	e105      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9f8:	4b53      	ldr	r3, [pc, #332]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca04:	d102      	bne.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800ca06:	4b51      	ldr	r3, [pc, #324]	@ (800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800ca08:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ca0a:	e0fb      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca10:	e0f8      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ca12:	4b4d      	ldr	r3, [pc, #308]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 0320 	and.w	r3, r3, #32
 800ca1a:	2b20      	cmp	r3, #32
 800ca1c:	d117      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca1e:	4b4a      	ldr	r3, [pc, #296]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d005      	beq.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800ca2a:	4b47      	ldr	r3, [pc, #284]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	0e1b      	lsrs	r3, r3, #24
 800ca30:	f003 030f 	and.w	r3, r3, #15
 800ca34:	e006      	b.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800ca36:	4b44      	ldr	r3, [pc, #272]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ca38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca3c:	041b      	lsls	r3, r3, #16
 800ca3e:	0e1b      	lsrs	r3, r3, #24
 800ca40:	f003 030f 	and.w	r3, r3, #15
 800ca44:	4a42      	ldr	r2, [pc, #264]	@ (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800ca46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ca4c:	e0da      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca52:	e0d7      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800ca54:	2300      	movs	r3, #0
 800ca56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca58:	e0d4      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800ca5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca5e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800ca62:	430b      	orrs	r3, r1
 800ca64:	d155      	bne.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ca66:	4b38      	ldr	r3, [pc, #224]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ca68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ca6c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ca70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ca78:	d013      	beq.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ca80:	d844      	bhi.n	800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800ca82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ca88:	d013      	beq.n	800cab2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ca90:	d83c      	bhi.n	800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d014      	beq.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800ca98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca9e:	d014      	beq.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800caa0:	e034      	b.n	800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caa2:	f107 0318 	add.w	r3, r7, #24
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fe fc50 	bl	800b34c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cab0:	e0a8      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fe faee 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800cabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cabe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cac0:	e0a0      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800cac2:	f7fd fb2f 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800cac6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cac8:	e09c      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800caca:	4b1f      	ldr	r3, [pc, #124]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f003 0320 	and.w	r3, r3, #32
 800cad2:	2b20      	cmp	r3, #32
 800cad4:	d117      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cad6:	4b1c      	ldr	r3, [pc, #112]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d005      	beq.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800cae2:	4b19      	ldr	r3, [pc, #100]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	0e1b      	lsrs	r3, r3, #24
 800cae8:	f003 030f 	and.w	r3, r3, #15
 800caec:	e006      	b.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800caee:	4b16      	ldr	r3, [pc, #88]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800caf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800caf4:	041b      	lsls	r3, r3, #16
 800caf6:	0e1b      	lsrs	r3, r3, #24
 800caf8:	f003 030f 	and.w	r3, r3, #15
 800cafc:	4a14      	ldr	r2, [pc, #80]	@ (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800cafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb04:	e07e      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb0a:	e07b      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb10:	e078      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800cb12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb16:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800cb1a:	430b      	orrs	r3, r1
 800cb1c:	d138      	bne.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800cb1e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800cb20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cb24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb28:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800cb2a:	4b07      	ldr	r3, [pc, #28]	@ (800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800cb2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb30:	f003 0302 	and.w	r3, r3, #2
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d10d      	bne.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800cb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10a      	bne.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800cb3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb42:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb44:	e05e      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800cb46:	bf00      	nop
 800cb48:	46020c00 	.word	0x46020c00
 800cb4c:	00f42400 	.word	0x00f42400
 800cb50:	08017f0c 	.word	0x08017f0c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800cb54:	4b2e      	ldr	r3, [pc, #184]	@ (800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800cb56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb62:	d112      	bne.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800cb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb6a:	d10e      	bne.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cb6c:	4b28      	ldr	r3, [pc, #160]	@ (800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800cb6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb7a:	d102      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800cb7c:	23fa      	movs	r3, #250	@ 0xfa
 800cb7e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cb80:	e040      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800cb82:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cb88:	e03c      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb8e:	e039      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800cb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb94:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cb98:	430b      	orrs	r3, r1
 800cb9a:	d131      	bne.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800cb9c:	4b1c      	ldr	r3, [pc, #112]	@ (800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800cb9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cba2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cba6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800cba8:	4b19      	ldr	r3, [pc, #100]	@ (800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cbb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbb4:	d105      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d102      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800cbbc:	4b15      	ldr	r3, [pc, #84]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800cbbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbc0:	e020      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800cbc2:	4b13      	ldr	r3, [pc, #76]	@ (800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cbca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbce:	d106      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbd6:	d102      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	@ (800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800cbda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbdc:	e012      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800cbde:	4b0c      	ldr	r3, [pc, #48]	@ (800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbea:	d106      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800cbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbf2:	d102      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800cbf4:	4b09      	ldr	r3, [pc, #36]	@ (800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800cbf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbf8:	e004      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbfe:	e001      	b.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800cc04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3738      	adds	r7, #56	@ 0x38
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	46020c00 	.word	0x46020c00
 800cc14:	02dc6c00 	.word	0x02dc6c00
 800cc18:	016e3600 	.word	0x016e3600
 800cc1c:	00f42400 	.word	0x00f42400

0800cc20 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800cc28:	4b1c      	ldr	r3, [pc, #112]	@ (800cc9c <HAL_RCCEx_CRSConfig+0x7c>)
 800cc2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc2c:	4a1b      	ldr	r2, [pc, #108]	@ (800cc9c <HAL_RCCEx_CRSConfig+0x7c>)
 800cc2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cc32:	6753      	str	r3, [r2, #116]	@ 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 800cc34:	4b19      	ldr	r3, [pc, #100]	@ (800cc9c <HAL_RCCEx_CRSConfig+0x7c>)
 800cc36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc38:	4a18      	ldr	r2, [pc, #96]	@ (800cc9c <HAL_RCCEx_CRSConfig+0x7c>)
 800cc3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cc3e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	431a      	orrs	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	041b      	lsls	r3, r3, #16
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800cc68:	4a0d      	ldr	r2, [pc, #52]	@ (800cca0 <HAL_RCCEx_CRSConfig+0x80>)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800cc6e:	4b0c      	ldr	r3, [pc, #48]	@ (800cca0 <HAL_RCCEx_CRSConfig+0x80>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	695b      	ldr	r3, [r3, #20]
 800cc7a:	021b      	lsls	r3, r3, #8
 800cc7c:	4908      	ldr	r1, [pc, #32]	@ (800cca0 <HAL_RCCEx_CRSConfig+0x80>)
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800cc82:	4b07      	ldr	r3, [pc, #28]	@ (800cca0 <HAL_RCCEx_CRSConfig+0x80>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a06      	ldr	r2, [pc, #24]	@ (800cca0 <HAL_RCCEx_CRSConfig+0x80>)
 800cc88:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cc8c:	6013      	str	r3, [r2, #0]
}
 800cc8e:	bf00      	nop
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	46020c00 	.word	0x46020c00
 800cca0:	40006000 	.word	0x40006000

0800cca4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800ccac:	4b47      	ldr	r3, [pc, #284]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a46      	ldr	r2, [pc, #280]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800ccb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ccb6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ccb8:	f7f5 fda0 	bl	80027fc <HAL_GetTick>
 800ccbc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccbe:	e008      	b.n	800ccd2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ccc0:	f7f5 fd9c 	bl	80027fc <HAL_GetTick>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d901      	bls.n	800ccd2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e077      	b.n	800cdc2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccd2:	4b3e      	ldr	r3, [pc, #248]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1f0      	bne.n	800ccc0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ccde:	4b3b      	ldr	r3, [pc, #236]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800cce6:	f023 0303 	bic.w	r3, r3, #3
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	6811      	ldr	r1, [r2, #0]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	6852      	ldr	r2, [r2, #4]
 800ccf2:	3a01      	subs	r2, #1
 800ccf4:	0212      	lsls	r2, r2, #8
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	4934      	ldr	r1, [pc, #208]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ccfe:	4b33      	ldr	r3, [pc, #204]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd02:	4b33      	ldr	r3, [pc, #204]	@ (800cdd0 <RCCEx_PLL2_Config+0x12c>)
 800cd04:	4013      	ands	r3, r2
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	6892      	ldr	r2, [r2, #8]
 800cd0a:	3a01      	subs	r2, #1
 800cd0c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	68d2      	ldr	r2, [r2, #12]
 800cd14:	3a01      	subs	r2, #1
 800cd16:	0252      	lsls	r2, r2, #9
 800cd18:	b292      	uxth	r2, r2
 800cd1a:	4311      	orrs	r1, r2
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	6912      	ldr	r2, [r2, #16]
 800cd20:	3a01      	subs	r2, #1
 800cd22:	0412      	lsls	r2, r2, #16
 800cd24:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800cd28:	4311      	orrs	r1, r2
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	6952      	ldr	r2, [r2, #20]
 800cd2e:	3a01      	subs	r2, #1
 800cd30:	0612      	lsls	r2, r2, #24
 800cd32:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800cd36:	430a      	orrs	r2, r1
 800cd38:	4924      	ldr	r1, [pc, #144]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800cd3e:	4b23      	ldr	r3, [pc, #140]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd42:	f023 020c 	bic.w	r2, r3, #12
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	4920      	ldr	r1, [pc, #128]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800cd50:	4b1e      	ldr	r3, [pc, #120]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a1b      	ldr	r3, [r3, #32]
 800cd58:	491c      	ldr	r1, [pc, #112]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800cd5e:	4b1b      	ldr	r3, [pc, #108]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd62:	4a1a      	ldr	r2, [pc, #104]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd64:	f023 0310 	bic.w	r3, r3, #16
 800cd68:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd6a:	4b18      	ldr	r3, [pc, #96]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd72:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	69d2      	ldr	r2, [r2, #28]
 800cd7a:	00d2      	lsls	r2, r2, #3
 800cd7c:	4913      	ldr	r1, [pc, #76]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800cd82:	4b12      	ldr	r3, [pc, #72]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd86:	4a11      	ldr	r2, [pc, #68]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd88:	f043 0310 	orr.w	r3, r3, #16
 800cd8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800cd8e:	4b0f      	ldr	r3, [pc, #60]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a0e      	ldr	r2, [pc, #56]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cd94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cd98:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cd9a:	f7f5 fd2f 	bl	80027fc <HAL_GetTick>
 800cd9e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cda0:	e008      	b.n	800cdb4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cda2:	f7f5 fd2b 	bl	80027fc <HAL_GetTick>
 800cda6:	4602      	mov	r2, r0
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d901      	bls.n	800cdb4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e006      	b.n	800cdc2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdb4:	4b05      	ldr	r3, [pc, #20]	@ (800cdcc <RCCEx_PLL2_Config+0x128>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d0f0      	beq.n	800cda2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800cdc0:	2300      	movs	r3, #0

}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	46020c00 	.word	0x46020c00
 800cdd0:	80800000 	.word	0x80800000

0800cdd4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800cddc:	4b47      	ldr	r3, [pc, #284]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a46      	ldr	r2, [pc, #280]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800cde2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cde6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cde8:	f7f5 fd08 	bl	80027fc <HAL_GetTick>
 800cdec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdee:	e008      	b.n	800ce02 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdf0:	f7f5 fd04 	bl	80027fc <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d901      	bls.n	800ce02 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e077      	b.n	800cef2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce02:	4b3e      	ldr	r3, [pc, #248]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f0      	bne.n	800cdf0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ce0e:	4b3b      	ldr	r3, [pc, #236]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ce16:	f023 0303 	bic.w	r3, r3, #3
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6811      	ldr	r1, [r2, #0]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	6852      	ldr	r2, [r2, #4]
 800ce22:	3a01      	subs	r2, #1
 800ce24:	0212      	lsls	r2, r2, #8
 800ce26:	430a      	orrs	r2, r1
 800ce28:	4934      	ldr	r1, [pc, #208]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	630b      	str	r3, [r1, #48]	@ 0x30
 800ce2e:	4b33      	ldr	r3, [pc, #204]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce32:	4b33      	ldr	r3, [pc, #204]	@ (800cf00 <RCCEx_PLL3_Config+0x12c>)
 800ce34:	4013      	ands	r3, r2
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	6892      	ldr	r2, [r2, #8]
 800ce3a:	3a01      	subs	r2, #1
 800ce3c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	68d2      	ldr	r2, [r2, #12]
 800ce44:	3a01      	subs	r2, #1
 800ce46:	0252      	lsls	r2, r2, #9
 800ce48:	b292      	uxth	r2, r2
 800ce4a:	4311      	orrs	r1, r2
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	6912      	ldr	r2, [r2, #16]
 800ce50:	3a01      	subs	r2, #1
 800ce52:	0412      	lsls	r2, r2, #16
 800ce54:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ce58:	4311      	orrs	r1, r2
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	6952      	ldr	r2, [r2, #20]
 800ce5e:	3a01      	subs	r2, #1
 800ce60:	0612      	lsls	r2, r2, #24
 800ce62:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ce66:	430a      	orrs	r2, r1
 800ce68:	4924      	ldr	r1, [pc, #144]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ce6e:	4b23      	ldr	r3, [pc, #140]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce72:	f023 020c 	bic.w	r2, r3, #12
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	699b      	ldr	r3, [r3, #24]
 800ce7a:	4920      	ldr	r1, [pc, #128]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ce80:	4b1e      	ldr	r3, [pc, #120]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	491c      	ldr	r1, [pc, #112]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ce8e:	4b1b      	ldr	r3, [pc, #108]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce92:	4a1a      	ldr	r2, [pc, #104]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce94:	f023 0310 	bic.w	r3, r3, #16
 800ce98:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce9a:	4b18      	ldr	r3, [pc, #96]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ce9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cea2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	69d2      	ldr	r2, [r2, #28]
 800ceaa:	00d2      	lsls	r2, r2, #3
 800ceac:	4913      	ldr	r1, [pc, #76]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ceb2:	4b12      	ldr	r3, [pc, #72]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceb6:	4a11      	ldr	r2, [pc, #68]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800ceb8:	f043 0310 	orr.w	r3, r3, #16
 800cebc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800cebe:	4b0f      	ldr	r3, [pc, #60]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a0e      	ldr	r2, [pc, #56]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800cec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cec8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ceca:	f7f5 fc97 	bl	80027fc <HAL_GetTick>
 800cece:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ced0:	e008      	b.n	800cee4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ced2:	f7f5 fc93 	bl	80027fc <HAL_GetTick>
 800ced6:	4602      	mov	r2, r0
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d901      	bls.n	800cee4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800cee0:	2303      	movs	r3, #3
 800cee2:	e006      	b.n	800cef2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cee4:	4b05      	ldr	r3, [pc, #20]	@ (800cefc <RCCEx_PLL3_Config+0x128>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d0f0      	beq.n	800ced2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	46020c00 	.word	0x46020c00
 800cf00:	80800000 	.word	0x80800000

0800cf04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e0fb      	b.n	800d10e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a7f      	ldr	r2, [pc, #508]	@ (800d118 <HAL_SPI_Init+0x214>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d004      	beq.n	800cf2a <HAL_SPI_Init+0x26>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a7d      	ldr	r2, [pc, #500]	@ (800d11c <HAL_SPI_Init+0x218>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	e000      	b.n	800cf2c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cf2a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a78      	ldr	r2, [pc, #480]	@ (800d118 <HAL_SPI_Init+0x214>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d004      	beq.n	800cf46 <HAL_SPI_Init+0x42>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a76      	ldr	r2, [pc, #472]	@ (800d11c <HAL_SPI_Init+0x218>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d105      	bne.n	800cf52 <HAL_SPI_Init+0x4e>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	2b0f      	cmp	r3, #15
 800cf4c:	d901      	bls.n	800cf52 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e0dd      	b.n	800d10e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fbac 	bl	800d6b0 <SPI_GetPacketSize>
 800cf58:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a6e      	ldr	r2, [pc, #440]	@ (800d118 <HAL_SPI_Init+0x214>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d004      	beq.n	800cf6e <HAL_SPI_Init+0x6a>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a6c      	ldr	r2, [pc, #432]	@ (800d11c <HAL_SPI_Init+0x218>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d102      	bne.n	800cf74 <HAL_SPI_Init+0x70>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2b08      	cmp	r3, #8
 800cf72:	d816      	bhi.n	800cfa2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf78:	4a69      	ldr	r2, [pc, #420]	@ (800d120 <HAL_SPI_Init+0x21c>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d00e      	beq.n	800cf9c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a68      	ldr	r2, [pc, #416]	@ (800d124 <HAL_SPI_Init+0x220>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d009      	beq.n	800cf9c <HAL_SPI_Init+0x98>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a66      	ldr	r2, [pc, #408]	@ (800d128 <HAL_SPI_Init+0x224>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d004      	beq.n	800cf9c <HAL_SPI_Init+0x98>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a65      	ldr	r2, [pc, #404]	@ (800d12c <HAL_SPI_Init+0x228>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d104      	bne.n	800cfa6 <HAL_SPI_Init+0xa2>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b10      	cmp	r3, #16
 800cfa0:	d901      	bls.n	800cfa6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e0b3      	b.n	800d10e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d106      	bne.n	800cfc0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7f4 fd50 	bl	8001a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f022 0201 	bic.w	r2, r2, #1
 800cfd6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cfe2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cfec:	d119      	bne.n	800d022 <HAL_SPI_Init+0x11e>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cff6:	d103      	bne.n	800d000 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d008      	beq.n	800d012 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10c      	bne.n	800d022 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d00c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d010:	d107      	bne.n	800d022 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d020:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00f      	beq.n	800d04e <HAL_SPI_Init+0x14a>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	2b06      	cmp	r3, #6
 800d034:	d90b      	bls.n	800d04e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	430a      	orrs	r2, r1
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	e007      	b.n	800d05e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d05c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	69da      	ldr	r2, [r3, #28]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d066:	431a      	orrs	r2, r3
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	431a      	orrs	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d070:	ea42 0103 	orr.w	r1, r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68da      	ldr	r2, [r3, #12]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	430a      	orrs	r2, r1
 800d07e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d088:	431a      	orrs	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d08e:	431a      	orrs	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	431a      	orrs	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	431a      	orrs	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	695b      	ldr	r3, [r3, #20]
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	431a      	orrs	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0b2:	431a      	orrs	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0ca:	ea42 0103 	orr.w	r1, r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	430a      	orrs	r2, r1
 800d0d8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	430a      	orrs	r2, r1
 800d0fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	46002000 	.word	0x46002000
 800d11c:	56002000 	.word	0x56002000
 800d120:	40013000 	.word	0x40013000
 800d124:	50013000 	.word	0x50013000
 800d128:	40003800 	.word	0x40003800
 800d12c:	50003800 	.word	0x50003800

0800d130 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	@ 0x28
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d148:	6a3a      	ldr	r2, [r7, #32]
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	4013      	ands	r3, r2
 800d14e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d158:	2300      	movs	r3, #0
 800d15a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d162:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3330      	adds	r3, #48	@ 0x30
 800d16a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d172:	2b00      	cmp	r3, #0
 800d174:	d010      	beq.n	800d198 <HAL_SPI_IRQHandler+0x68>
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	f003 0308 	and.w	r3, r3, #8
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00b      	beq.n	800d198 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	699a      	ldr	r2, [r3, #24]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d18e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f9c9 	bl	800d528 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800d196:	e19a      	b.n	800d4ce <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d113      	bne.n	800d1ca <HAL_SPI_IRQHandler+0x9a>
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	f003 0320 	and.w	r3, r3, #32
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10e      	bne.n	800d1ca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d009      	beq.n	800d1ca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	4798      	blx	r3
    handled = 1UL;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10f      	bne.n	800d1f4 <HAL_SPI_IRQHandler+0xc4>
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	f003 0301 	and.w	r3, r3, #1
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00a      	beq.n	800d1f4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d105      	bne.n	800d1f4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	4798      	blx	r3
    handled = 1UL;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	f003 0320 	and.w	r3, r3, #32
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d10f      	bne.n	800d21e <HAL_SPI_IRQHandler+0xee>
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	f003 0302 	and.w	r3, r3, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00a      	beq.n	800d21e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d105      	bne.n	800d21e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	4798      	blx	r3
    handled = 1UL;
 800d21a:	2301      	movs	r3, #1
 800d21c:	627b      	str	r3, [r7, #36]	@ 0x24
  }


  if (handled != 0UL)
 800d21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d220:	2b00      	cmp	r3, #0
 800d222:	f040 814f 	bne.w	800d4c4 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	f003 0308 	and.w	r3, r3, #8
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f000 808b 	beq.w	800d348 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	699a      	ldr	r2, [r3, #24]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f042 0208 	orr.w	r2, r2, #8
 800d240:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	699a      	ldr	r2, [r3, #24]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f042 0210 	orr.w	r2, r2, #16
 800d250:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	699a      	ldr	r2, [r3, #24]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d260:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	691a      	ldr	r2, [r3, #16]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 0208 	bic.w	r2, r2, #8
 800d270:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d13d      	bne.n	800d2fc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800d280:	e036      	b.n	800d2f0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	2b0f      	cmp	r3, #15
 800d288:	d90b      	bls.n	800d2a2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d292:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d294:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d29a:	1d1a      	adds	r2, r3, #4
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d2a0:	e01d      	b.n	800d2de <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	2b07      	cmp	r3, #7
 800d2a8:	d90b      	bls.n	800d2c2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	8812      	ldrh	r2, [r2, #0]
 800d2b2:	b292      	uxth	r2, r2
 800d2b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2ba:	1c9a      	adds	r2, r3, #2
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d2c0:	e00d      	b.n	800d2de <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2ce:	7812      	ldrb	r2, [r2, #0]
 800d2d0:	b2d2      	uxtb	r2, r2
 800d2d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2d8:	1c5a      	adds	r2, r3, #1
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1c2      	bne.n	800d282 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f937 	bl	800d570 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2201      	movs	r2, #1
 800d306:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d310:	2b00      	cmp	r3, #0
 800d312:	d003      	beq.n	800d31c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f8fd 	bl	800d514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d31a:	e0d8      	b.n	800d4ce <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d31c:	7cfb      	ldrb	r3, [r7, #19]
 800d31e:	2b05      	cmp	r3, #5
 800d320:	d103      	bne.n	800d32a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 f8ec 	bl	800d500 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d328:	e0ce      	b.n	800d4c8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d32a:	7cfb      	ldrb	r3, [r7, #19]
 800d32c:	2b04      	cmp	r3, #4
 800d32e:	d103      	bne.n	800d338 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f8db 	bl	800d4ec <HAL_SPI_RxCpltCallback>
    return;
 800d336:	e0c7      	b.n	800d4c8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d338:	7cfb      	ldrb	r3, [r7, #19]
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	f040 80c4 	bne.w	800d4c8 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f8c9 	bl	800d4d8 <HAL_SPI_TxCpltCallback>
    return;
 800d346:	e0bf      	b.n	800d4c8 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 80bd 	beq.w	800d4ce <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00f      	beq.n	800d37e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d364:	f043 0204 	orr.w	r2, r3, #4
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	699a      	ldr	r2, [r3, #24]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d37c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00f      	beq.n	800d3a8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d38e:	f043 0201 	orr.w	r2, r3, #1
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00f      	beq.n	800d3d2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3b8:	f043 0208 	orr.w	r2, r3, #8
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	699a      	ldr	r2, [r3, #24]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d3d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	f003 0320 	and.w	r3, r3, #32
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00f      	beq.n	800d3fc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	699a      	ldr	r2, [r3, #24]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f042 0220 	orr.w	r2, r2, #32
 800d3fa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d402:	2b00      	cmp	r3, #0
 800d404:	d062      	beq.n	800d4cc <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f022 0201 	bic.w	r2, r2, #1
 800d414:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	6812      	ldr	r2, [r2, #0]
 800d420:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800d424:	f023 0303 	bic.w	r3, r3, #3
 800d428:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d430:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d434:	d13e      	bne.n	800d4b4 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	689a      	ldr	r2, [r3, #8]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d444:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d015      	beq.n	800d47c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d456:	4a1f      	ldr	r2, [pc, #124]	@ (800d4d4 <HAL_SPI_IRQHandler+0x3a4>)
 800d458:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d460:	4618      	mov	r0, r3
 800d462:	f7f8 fa4f 	bl	8005904 <HAL_DMA_Abort_IT>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d007      	beq.n	800d47c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d482:	2b00      	cmp	r3, #0
 800d484:	d022      	beq.n	800d4cc <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d48c:	4a11      	ldr	r2, [pc, #68]	@ (800d4d4 <HAL_SPI_IRQHandler+0x3a4>)
 800d48e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d496:	4618      	mov	r0, r3
 800d498:	f7f8 fa34 	bl	8005904 <HAL_DMA_Abort_IT>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d014      	beq.n	800d4cc <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d4a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d4b2:	e00b      	b.n	800d4cc <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f829 	bl	800d514 <HAL_SPI_ErrorCallback>
    return;
 800d4c2:	e003      	b.n	800d4cc <HAL_SPI_IRQHandler+0x39c>
    return;
 800d4c4:	bf00      	nop
 800d4c6:	e002      	b.n	800d4ce <HAL_SPI_IRQHandler+0x39e>
    return;
 800d4c8:	bf00      	nop
 800d4ca:	e000      	b.n	800d4ce <HAL_SPI_IRQHandler+0x39e>
    return;
 800d4cc:	bf00      	nop
  }
}
 800d4ce:	3728      	adds	r7, #40	@ 0x28
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	0800d53d 	.word	0x0800d53d

0800d4d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d548:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2201      	movs	r2, #1
 800d55e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f7ff ffd6 	bl	800d514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d568:	bf00      	nop
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	695b      	ldr	r3, [r3, #20]
 800d57e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	699a      	ldr	r2, [r3, #24]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f042 0208 	orr.w	r2, r2, #8
 800d58e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	699a      	ldr	r2, [r3, #24]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f042 0210 	orr.w	r2, r2, #16
 800d59e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f022 0201 	bic.w	r2, r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	6812      	ldr	r2, [r2, #0]
 800d5ba:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800d5be:	f023 0303 	bic.w	r3, r3, #3
 800d5c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	689a      	ldr	r2, [r3, #8]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d5d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b04      	cmp	r3, #4
 800d5de:	d014      	beq.n	800d60a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f003 0320 	and.w	r3, r3, #32
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00f      	beq.n	800d60a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	699a      	ldr	r2, [r3, #24]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f042 0220 	orr.w	r2, r2, #32
 800d608:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d610:	b2db      	uxtb	r3, r3
 800d612:	2b03      	cmp	r3, #3
 800d614:	d014      	beq.n	800d640 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00f      	beq.n	800d640 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d626:	f043 0204 	orr.w	r2, r3, #4
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	699a      	ldr	r2, [r3, #24]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d63e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00f      	beq.n	800d66a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d650:	f043 0201 	orr.w	r2, r3, #1
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	699a      	ldr	r2, [r3, #24]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d668:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00f      	beq.n	800d694 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d67a:	f043 0208 	orr.w	r2, r3, #8
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	699a      	ldr	r2, [r3, #24]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d692:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800d6a4:	bf00      	nop
 800d6a6:	3714      	adds	r7, #20
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6bc:	095b      	lsrs	r3, r3, #5
 800d6be:	3301      	adds	r3, #1
 800d6c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	3307      	adds	r3, #7
 800d6ce:	08db      	lsrs	r3, r3, #3
 800d6d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b083      	sub	sp, #12
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d12e      	bne.n	800d75a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800d702:	2b01      	cmp	r3, #1
 800d704:	d101      	bne.n	800d70a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800d706:	2302      	movs	r3, #2
 800d708:	e028      	b.n	800d75c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2202      	movs	r2, #2
 800d716:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f022 0201 	bic.w	r2, r2, #1
 800d728:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800d736:	ea42 0103 	orr.w	r1, r2, r3
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	689a      	ldr	r2, [r3, #8]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	430a      	orrs	r2, r1
 800d744:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2201      	movs	r2, #1
 800d74a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	e000      	b.n	800d75c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
  }
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d101      	bne.n	800d77a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	e049      	b.n	800d80e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d780:	b2db      	uxtb	r3, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	d106      	bne.n	800d794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7f4 fbb6 	bl	8001f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2202      	movs	r2, #2
 800d798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	4610      	mov	r0, r2
 800d7a8:	f000 fc10 	bl	800dfcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
	...

0800d818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d826:	b2db      	uxtb	r3, r3
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d001      	beq.n	800d830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e06a      	b.n	800d906 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2202      	movs	r2, #2
 800d834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a35      	ldr	r2, [pc, #212]	@ (800d914 <HAL_TIM_Base_Start+0xfc>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d040      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a34      	ldr	r2, [pc, #208]	@ (800d918 <HAL_TIM_Base_Start+0x100>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d03b      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d854:	d036      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d85e:	d031      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a2d      	ldr	r2, [pc, #180]	@ (800d91c <HAL_TIM_Base_Start+0x104>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d02c      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a2c      	ldr	r2, [pc, #176]	@ (800d920 <HAL_TIM_Base_Start+0x108>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d027      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a2a      	ldr	r2, [pc, #168]	@ (800d924 <HAL_TIM_Base_Start+0x10c>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d022      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a29      	ldr	r2, [pc, #164]	@ (800d928 <HAL_TIM_Base_Start+0x110>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d01d      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a27      	ldr	r2, [pc, #156]	@ (800d92c <HAL_TIM_Base_Start+0x114>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d018      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a26      	ldr	r2, [pc, #152]	@ (800d930 <HAL_TIM_Base_Start+0x118>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d013      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a24      	ldr	r2, [pc, #144]	@ (800d934 <HAL_TIM_Base_Start+0x11c>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d00e      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a23      	ldr	r2, [pc, #140]	@ (800d938 <HAL_TIM_Base_Start+0x120>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d009      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a21      	ldr	r2, [pc, #132]	@ (800d93c <HAL_TIM_Base_Start+0x124>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d004      	beq.n	800d8c4 <HAL_TIM_Base_Start+0xac>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a20      	ldr	r2, [pc, #128]	@ (800d940 <HAL_TIM_Base_Start+0x128>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d115      	bne.n	800d8f0 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	689a      	ldr	r2, [r3, #8]
 800d8ca:	4b1e      	ldr	r3, [pc, #120]	@ (800d944 <HAL_TIM_Base_Start+0x12c>)
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2b06      	cmp	r3, #6
 800d8d4:	d015      	beq.n	800d902 <HAL_TIM_Base_Start+0xea>
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8dc:	d011      	beq.n	800d902 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f042 0201 	orr.w	r2, r2, #1
 800d8ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8ee:	e008      	b.n	800d902 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f042 0201 	orr.w	r2, r2, #1
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	e000      	b.n	800d904 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3714      	adds	r7, #20
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	40012c00 	.word	0x40012c00
 800d918:	50012c00 	.word	0x50012c00
 800d91c:	40000400 	.word	0x40000400
 800d920:	50000400 	.word	0x50000400
 800d924:	40000800 	.word	0x40000800
 800d928:	50000800 	.word	0x50000800
 800d92c:	40000c00 	.word	0x40000c00
 800d930:	50000c00 	.word	0x50000c00
 800d934:	40013400 	.word	0x40013400
 800d938:	50013400 	.word	0x50013400
 800d93c:	40014000 	.word	0x40014000
 800d940:	50014000 	.word	0x50014000
 800d944:	00010007 	.word	0x00010007

0800d948 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6a1a      	ldr	r2, [r3, #32]
 800d956:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d95a:	4013      	ands	r3, r2
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10f      	bne.n	800d980 <HAL_TIM_Base_Stop+0x38>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6a1a      	ldr	r2, [r3, #32]
 800d966:	f244 4344 	movw	r3, #17476	@ 0x4444
 800d96a:	4013      	ands	r3, r2
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d107      	bne.n	800d980 <HAL_TIM_Base_Stop+0x38>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f022 0201 	bic.w	r2, r2, #1
 800d97e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
	...

0800d998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d001      	beq.n	800d9b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e072      	b.n	800da96 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68da      	ldr	r2, [r3, #12]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f042 0201 	orr.w	r2, r2, #1
 800d9c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a35      	ldr	r2, [pc, #212]	@ (800daa4 <HAL_TIM_Base_Start_IT+0x10c>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d040      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a34      	ldr	r2, [pc, #208]	@ (800daa8 <HAL_TIM_Base_Start_IT+0x110>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d03b      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9e4:	d036      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9ee:	d031      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a2d      	ldr	r2, [pc, #180]	@ (800daac <HAL_TIM_Base_Start_IT+0x114>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d02c      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a2c      	ldr	r2, [pc, #176]	@ (800dab0 <HAL_TIM_Base_Start_IT+0x118>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d027      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a2a      	ldr	r2, [pc, #168]	@ (800dab4 <HAL_TIM_Base_Start_IT+0x11c>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d022      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a29      	ldr	r2, [pc, #164]	@ (800dab8 <HAL_TIM_Base_Start_IT+0x120>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d01d      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a27      	ldr	r2, [pc, #156]	@ (800dabc <HAL_TIM_Base_Start_IT+0x124>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d018      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a26      	ldr	r2, [pc, #152]	@ (800dac0 <HAL_TIM_Base_Start_IT+0x128>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d013      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a24      	ldr	r2, [pc, #144]	@ (800dac4 <HAL_TIM_Base_Start_IT+0x12c>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d00e      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a23      	ldr	r2, [pc, #140]	@ (800dac8 <HAL_TIM_Base_Start_IT+0x130>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d009      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a21      	ldr	r2, [pc, #132]	@ (800dacc <HAL_TIM_Base_Start_IT+0x134>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d004      	beq.n	800da54 <HAL_TIM_Base_Start_IT+0xbc>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a20      	ldr	r2, [pc, #128]	@ (800dad0 <HAL_TIM_Base_Start_IT+0x138>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d115      	bne.n	800da80 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	689a      	ldr	r2, [r3, #8]
 800da5a:	4b1e      	ldr	r3, [pc, #120]	@ (800dad4 <HAL_TIM_Base_Start_IT+0x13c>)
 800da5c:	4013      	ands	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b06      	cmp	r3, #6
 800da64:	d015      	beq.n	800da92 <HAL_TIM_Base_Start_IT+0xfa>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da6c:	d011      	beq.n	800da92 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f042 0201 	orr.w	r2, r2, #1
 800da7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da7e:	e008      	b.n	800da92 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f042 0201 	orr.w	r2, r2, #1
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	e000      	b.n	800da94 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	40012c00 	.word	0x40012c00
 800daa8:	50012c00 	.word	0x50012c00
 800daac:	40000400 	.word	0x40000400
 800dab0:	50000400 	.word	0x50000400
 800dab4:	40000800 	.word	0x40000800
 800dab8:	50000800 	.word	0x50000800
 800dabc:	40000c00 	.word	0x40000c00
 800dac0:	50000c00 	.word	0x50000c00
 800dac4:	40013400 	.word	0x40013400
 800dac8:	50013400 	.word	0x50013400
 800dacc:	40014000 	.word	0x40014000
 800dad0:	50014000 	.word	0x50014000
 800dad4:	00010007 	.word	0x00010007

0800dad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	f003 0302 	and.w	r3, r3, #2
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d020      	beq.n	800db3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f003 0302 	and.w	r3, r3, #2
 800db00:	2b00      	cmp	r3, #0
 800db02:	d01b      	beq.n	800db3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f06f 0202 	mvn.w	r2, #2
 800db0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	f003 0303 	and.w	r3, r3, #3
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d003      	beq.n	800db2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 fa34 	bl	800df90 <HAL_TIM_IC_CaptureCallback>
 800db28:	e005      	b.n	800db36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fa26 	bl	800df7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 fa37 	bl	800dfa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	f003 0304 	and.w	r3, r3, #4
 800db42:	2b00      	cmp	r3, #0
 800db44:	d020      	beq.n	800db88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01b      	beq.n	800db88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f06f 0204 	mvn.w	r2, #4
 800db58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2202      	movs	r2, #2
 800db5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d003      	beq.n	800db76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fa0e 	bl	800df90 <HAL_TIM_IC_CaptureCallback>
 800db74:	e005      	b.n	800db82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 fa00 	bl	800df7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fa11 	bl	800dfa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	f003 0308 	and.w	r3, r3, #8
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d020      	beq.n	800dbd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f003 0308 	and.w	r3, r3, #8
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d01b      	beq.n	800dbd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f06f 0208 	mvn.w	r2, #8
 800dba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2204      	movs	r2, #4
 800dbaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	69db      	ldr	r3, [r3, #28]
 800dbb2:	f003 0303 	and.w	r3, r3, #3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d003      	beq.n	800dbc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 f9e8 	bl	800df90 <HAL_TIM_IC_CaptureCallback>
 800dbc0:	e005      	b.n	800dbce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f9da 	bl	800df7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f9eb 	bl	800dfa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	f003 0310 	and.w	r3, r3, #16
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d020      	beq.n	800dc20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f003 0310 	and.w	r3, r3, #16
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d01b      	beq.n	800dc20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f06f 0210 	mvn.w	r2, #16
 800dbf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2208      	movs	r2, #8
 800dbf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	69db      	ldr	r3, [r3, #28]
 800dbfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d003      	beq.n	800dc0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 f9c2 	bl	800df90 <HAL_TIM_IC_CaptureCallback>
 800dc0c:	e005      	b.n	800dc1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f9b4 	bl	800df7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f9c5 	bl	800dfa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00c      	beq.n	800dc44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f003 0301 	and.w	r3, r3, #1
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d007      	beq.n	800dc44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f06f 0201 	mvn.w	r2, #1
 800dc3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7f3 fe18 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d104      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00c      	beq.n	800dc72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d007      	beq.n	800dc72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dc6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fc0f 	bl	800e490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00c      	beq.n	800dc96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dc8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fc07 	bl	800e4a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00c      	beq.n	800dcba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d007      	beq.n	800dcba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dcb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 f97f 	bl	800dfb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	f003 0320 	and.w	r3, r3, #32
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00c      	beq.n	800dcde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f003 0320 	and.w	r3, r3, #32
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d007      	beq.n	800dcde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f06f 0220 	mvn.w	r2, #32
 800dcd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fbcf 	bl	800e47c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00c      	beq.n	800dd02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d007      	beq.n	800dd02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800dcfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fbdb 	bl	800e4b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00c      	beq.n	800dd26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d007      	beq.n	800dd26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800dd1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 fbd3 	bl	800e4cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00c      	beq.n	800dd4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d007      	beq.n	800dd4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800dd42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 fbcb 	bl	800e4e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00c      	beq.n	800dd6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d007      	beq.n	800dd6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800dd66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fbc3 	bl	800e4f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd6e:	bf00      	nop
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d101      	bne.n	800dd94 <HAL_TIM_ConfigClockSource+0x1c>
 800dd90:	2302      	movs	r3, #2
 800dd92:	e0e6      	b.n	800df62 <HAL_TIM_ConfigClockSource+0x1ea>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2202      	movs	r2, #2
 800dda0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ddb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ddb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ddbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a67      	ldr	r2, [pc, #412]	@ (800df6c <HAL_TIM_ConfigClockSource+0x1f4>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	f000 80b1 	beq.w	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800ddd4:	4a65      	ldr	r2, [pc, #404]	@ (800df6c <HAL_TIM_ConfigClockSource+0x1f4>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	f200 80b6 	bhi.w	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800dddc:	4a64      	ldr	r2, [pc, #400]	@ (800df70 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	f000 80a9 	beq.w	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800dde4:	4a62      	ldr	r2, [pc, #392]	@ (800df70 <HAL_TIM_ConfigClockSource+0x1f8>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	f200 80ae 	bhi.w	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800ddec:	4a61      	ldr	r2, [pc, #388]	@ (800df74 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	f000 80a1 	beq.w	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800ddf4:	4a5f      	ldr	r2, [pc, #380]	@ (800df74 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	f200 80a6 	bhi.w	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800ddfc:	4a5e      	ldr	r2, [pc, #376]	@ (800df78 <HAL_TIM_ConfigClockSource+0x200>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	f000 8099 	beq.w	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800de04:	4a5c      	ldr	r2, [pc, #368]	@ (800df78 <HAL_TIM_ConfigClockSource+0x200>)
 800de06:	4293      	cmp	r3, r2
 800de08:	f200 809e 	bhi.w	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800de10:	f000 8091 	beq.w	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800de14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800de18:	f200 8096 	bhi.w	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de20:	f000 8089 	beq.w	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800de24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de28:	f200 808e 	bhi.w	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de30:	d03e      	beq.n	800deb0 <HAL_TIM_ConfigClockSource+0x138>
 800de32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de36:	f200 8087 	bhi.w	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de3e:	f000 8086 	beq.w	800df4e <HAL_TIM_ConfigClockSource+0x1d6>
 800de42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de46:	d87f      	bhi.n	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de48:	2b70      	cmp	r3, #112	@ 0x70
 800de4a:	d01a      	beq.n	800de82 <HAL_TIM_ConfigClockSource+0x10a>
 800de4c:	2b70      	cmp	r3, #112	@ 0x70
 800de4e:	d87b      	bhi.n	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de50:	2b60      	cmp	r3, #96	@ 0x60
 800de52:	d050      	beq.n	800def6 <HAL_TIM_ConfigClockSource+0x17e>
 800de54:	2b60      	cmp	r3, #96	@ 0x60
 800de56:	d877      	bhi.n	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de58:	2b50      	cmp	r3, #80	@ 0x50
 800de5a:	d03c      	beq.n	800ded6 <HAL_TIM_ConfigClockSource+0x15e>
 800de5c:	2b50      	cmp	r3, #80	@ 0x50
 800de5e:	d873      	bhi.n	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de60:	2b40      	cmp	r3, #64	@ 0x40
 800de62:	d058      	beq.n	800df16 <HAL_TIM_ConfigClockSource+0x19e>
 800de64:	2b40      	cmp	r3, #64	@ 0x40
 800de66:	d86f      	bhi.n	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de68:	2b30      	cmp	r3, #48	@ 0x30
 800de6a:	d064      	beq.n	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800de6c:	2b30      	cmp	r3, #48	@ 0x30
 800de6e:	d86b      	bhi.n	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de70:	2b20      	cmp	r3, #32
 800de72:	d060      	beq.n	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800de74:	2b20      	cmp	r3, #32
 800de76:	d867      	bhi.n	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d05c      	beq.n	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800de7c:	2b10      	cmp	r3, #16
 800de7e:	d05a      	beq.n	800df36 <HAL_TIM_ConfigClockSource+0x1be>
 800de80:	e062      	b.n	800df48 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de92:	f000 fa11 	bl	800e2b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	609a      	str	r2, [r3, #8]
      break;
 800deae:	e04f      	b.n	800df50 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dec0:	f000 f9fa 	bl	800e2b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	689a      	ldr	r2, [r3, #8]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ded2:	609a      	str	r2, [r3, #8]
      break;
 800ded4:	e03c      	b.n	800df50 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dee2:	461a      	mov	r2, r3
 800dee4:	f000 f96c 	bl	800e1c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2150      	movs	r1, #80	@ 0x50
 800deee:	4618      	mov	r0, r3
 800def0:	f000 f9c5 	bl	800e27e <TIM_ITRx_SetConfig>
      break;
 800def4:	e02c      	b.n	800df50 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800df02:	461a      	mov	r2, r3
 800df04:	f000 f98b 	bl	800e21e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2160      	movs	r1, #96	@ 0x60
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 f9b5 	bl	800e27e <TIM_ITRx_SetConfig>
      break;
 800df14:	e01c      	b.n	800df50 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800df22:	461a      	mov	r2, r3
 800df24:	f000 f94c 	bl	800e1c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2140      	movs	r1, #64	@ 0x40
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 f9a5 	bl	800e27e <TIM_ITRx_SetConfig>
      break;
 800df34:	e00c      	b.n	800df50 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4619      	mov	r1, r3
 800df40:	4610      	mov	r0, r2
 800df42:	f000 f99c 	bl	800e27e <TIM_ITRx_SetConfig>
      break;
 800df46:	e003      	b.n	800df50 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	73fb      	strb	r3, [r7, #15]
      break;
 800df4c:	e000      	b.n	800df50 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800df4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df60:	7bfb      	ldrb	r3, [r7, #15]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	00100070 	.word	0x00100070
 800df70:	00100040 	.word	0x00100040
 800df74:	00100030 	.word	0x00100030
 800df78:	00100020 	.word	0x00100020

0800df7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df84:	bf00      	nop
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dfac:	bf00      	nop
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a68      	ldr	r2, [pc, #416]	@ (800e180 <TIM_Base_SetConfig+0x1b4>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d02b      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a67      	ldr	r2, [pc, #412]	@ (800e184 <TIM_Base_SetConfig+0x1b8>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d027      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dff2:	d023      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dffa:	d01f      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a62      	ldr	r2, [pc, #392]	@ (800e188 <TIM_Base_SetConfig+0x1bc>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d01b      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a61      	ldr	r2, [pc, #388]	@ (800e18c <TIM_Base_SetConfig+0x1c0>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d017      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a60      	ldr	r2, [pc, #384]	@ (800e190 <TIM_Base_SetConfig+0x1c4>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d013      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4a5f      	ldr	r2, [pc, #380]	@ (800e194 <TIM_Base_SetConfig+0x1c8>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d00f      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4a5e      	ldr	r2, [pc, #376]	@ (800e198 <TIM_Base_SetConfig+0x1cc>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d00b      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	4a5d      	ldr	r2, [pc, #372]	@ (800e19c <TIM_Base_SetConfig+0x1d0>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d007      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4a5c      	ldr	r2, [pc, #368]	@ (800e1a0 <TIM_Base_SetConfig+0x1d4>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d003      	beq.n	800e03c <TIM_Base_SetConfig+0x70>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a5b      	ldr	r2, [pc, #364]	@ (800e1a4 <TIM_Base_SetConfig+0x1d8>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d108      	bne.n	800e04e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a4b      	ldr	r2, [pc, #300]	@ (800e180 <TIM_Base_SetConfig+0x1b4>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d043      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a4a      	ldr	r2, [pc, #296]	@ (800e184 <TIM_Base_SetConfig+0x1b8>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d03f      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e064:	d03b      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e06c:	d037      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4a45      	ldr	r2, [pc, #276]	@ (800e188 <TIM_Base_SetConfig+0x1bc>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d033      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a44      	ldr	r2, [pc, #272]	@ (800e18c <TIM_Base_SetConfig+0x1c0>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d02f      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a43      	ldr	r2, [pc, #268]	@ (800e190 <TIM_Base_SetConfig+0x1c4>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d02b      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a42      	ldr	r2, [pc, #264]	@ (800e194 <TIM_Base_SetConfig+0x1c8>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d027      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a41      	ldr	r2, [pc, #260]	@ (800e198 <TIM_Base_SetConfig+0x1cc>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d023      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a40      	ldr	r2, [pc, #256]	@ (800e19c <TIM_Base_SetConfig+0x1d0>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d01f      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4a3f      	ldr	r2, [pc, #252]	@ (800e1a0 <TIM_Base_SetConfig+0x1d4>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d01b      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a3e      	ldr	r2, [pc, #248]	@ (800e1a4 <TIM_Base_SetConfig+0x1d8>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d017      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a3d      	ldr	r2, [pc, #244]	@ (800e1a8 <TIM_Base_SetConfig+0x1dc>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d013      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a3c      	ldr	r2, [pc, #240]	@ (800e1ac <TIM_Base_SetConfig+0x1e0>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d00f      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4a3b      	ldr	r2, [pc, #236]	@ (800e1b0 <TIM_Base_SetConfig+0x1e4>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d00b      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	4a3a      	ldr	r2, [pc, #232]	@ (800e1b4 <TIM_Base_SetConfig+0x1e8>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d007      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4a39      	ldr	r2, [pc, #228]	@ (800e1b8 <TIM_Base_SetConfig+0x1ec>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d003      	beq.n	800e0de <TIM_Base_SetConfig+0x112>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a38      	ldr	r2, [pc, #224]	@ (800e1bc <TIM_Base_SetConfig+0x1f0>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d108      	bne.n	800e0f0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e0e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	695b      	ldr	r3, [r3, #20]
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	689a      	ldr	r2, [r3, #8]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a1a      	ldr	r2, [pc, #104]	@ (800e180 <TIM_Base_SetConfig+0x1b4>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d023      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a19      	ldr	r2, [pc, #100]	@ (800e184 <TIM_Base_SetConfig+0x1b8>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d01f      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a1e      	ldr	r2, [pc, #120]	@ (800e1a0 <TIM_Base_SetConfig+0x1d4>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d01b      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a1d      	ldr	r2, [pc, #116]	@ (800e1a4 <TIM_Base_SetConfig+0x1d8>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d017      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a1c      	ldr	r2, [pc, #112]	@ (800e1a8 <TIM_Base_SetConfig+0x1dc>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d013      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a1b      	ldr	r2, [pc, #108]	@ (800e1ac <TIM_Base_SetConfig+0x1e0>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d00f      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a1a      	ldr	r2, [pc, #104]	@ (800e1b0 <TIM_Base_SetConfig+0x1e4>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d00b      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a19      	ldr	r2, [pc, #100]	@ (800e1b4 <TIM_Base_SetConfig+0x1e8>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d007      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4a18      	ldr	r2, [pc, #96]	@ (800e1b8 <TIM_Base_SetConfig+0x1ec>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d003      	beq.n	800e164 <TIM_Base_SetConfig+0x198>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a17      	ldr	r2, [pc, #92]	@ (800e1bc <TIM_Base_SetConfig+0x1f0>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d103      	bne.n	800e16c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	691a      	ldr	r2, [r3, #16]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	615a      	str	r2, [r3, #20]
}
 800e172:	bf00      	nop
 800e174:	3714      	adds	r7, #20
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	40012c00 	.word	0x40012c00
 800e184:	50012c00 	.word	0x50012c00
 800e188:	40000400 	.word	0x40000400
 800e18c:	50000400 	.word	0x50000400
 800e190:	40000800 	.word	0x40000800
 800e194:	50000800 	.word	0x50000800
 800e198:	40000c00 	.word	0x40000c00
 800e19c:	50000c00 	.word	0x50000c00
 800e1a0:	40013400 	.word	0x40013400
 800e1a4:	50013400 	.word	0x50013400
 800e1a8:	40014000 	.word	0x40014000
 800e1ac:	50014000 	.word	0x50014000
 800e1b0:	40014400 	.word	0x40014400
 800e1b4:	50014400 	.word	0x50014400
 800e1b8:	40014800 	.word	0x40014800
 800e1bc:	50014800 	.word	0x50014800

0800e1c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b087      	sub	sp, #28
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6a1b      	ldr	r3, [r3, #32]
 800e1d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6a1b      	ldr	r3, [r3, #32]
 800e1d6:	f023 0201 	bic.w	r2, r3, #1
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e1ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	011b      	lsls	r3, r3, #4
 800e1f0:	693a      	ldr	r2, [r7, #16]
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	f023 030a 	bic.w	r3, r3, #10
 800e1fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e1fe:	697a      	ldr	r2, [r7, #20]
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	4313      	orrs	r3, r2
 800e204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	621a      	str	r2, [r3, #32]
}
 800e212:	bf00      	nop
 800e214:	371c      	adds	r7, #28
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e21e:	b480      	push	{r7}
 800e220:	b087      	sub	sp, #28
 800e222:	af00      	add	r7, sp, #0
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	60b9      	str	r1, [r7, #8]
 800e228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6a1b      	ldr	r3, [r3, #32]
 800e234:	f023 0210 	bic.w	r2, r3, #16
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	031b      	lsls	r3, r3, #12
 800e24e:	693a      	ldr	r2, [r7, #16]
 800e250:	4313      	orrs	r3, r2
 800e252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e25a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	011b      	lsls	r3, r3, #4
 800e260:	697a      	ldr	r2, [r7, #20]
 800e262:	4313      	orrs	r3, r2
 800e264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	621a      	str	r2, [r3, #32]
}
 800e272:	bf00      	nop
 800e274:	371c      	adds	r7, #28
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e27e:	b480      	push	{r7}
 800e280:	b085      	sub	sp, #20
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
 800e286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	f043 0307 	orr.w	r3, r3, #7
 800e2a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	609a      	str	r2, [r3, #8]
}
 800e2ac:	bf00      	nop
 800e2ae:	3714      	adds	r7, #20
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e2d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	021a      	lsls	r2, r3, #8
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	431a      	orrs	r2, r3
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	697a      	ldr	r2, [r7, #20]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	609a      	str	r2, [r3, #8]
}
 800e2ec:	bf00      	nop
 800e2ee:	371c      	adds	r7, #28
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d101      	bne.n	800e310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e30c:	2302      	movs	r3, #2
 800e30e:	e097      	b.n	800e440 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2202      	movs	r2, #2
 800e31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a45      	ldr	r2, [pc, #276]	@ (800e44c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d00e      	beq.n	800e358 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4a44      	ldr	r2, [pc, #272]	@ (800e450 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d009      	beq.n	800e358 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a42      	ldr	r2, [pc, #264]	@ (800e454 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d004      	beq.n	800e358 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a41      	ldr	r2, [pc, #260]	@ (800e458 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d108      	bne.n	800e36a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e35e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	4313      	orrs	r3, r2
 800e368:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800e370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e374:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a2f      	ldr	r2, [pc, #188]	@ (800e44c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d040      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a2e      	ldr	r2, [pc, #184]	@ (800e450 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d03b      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3a4:	d036      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e3ae:	d031      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a29      	ldr	r2, [pc, #164]	@ (800e45c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d02c      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a28      	ldr	r2, [pc, #160]	@ (800e460 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d027      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a26      	ldr	r2, [pc, #152]	@ (800e464 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d022      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a25      	ldr	r2, [pc, #148]	@ (800e468 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d01d      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a23      	ldr	r2, [pc, #140]	@ (800e46c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d018      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a22      	ldr	r2, [pc, #136]	@ (800e470 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d013      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a18      	ldr	r2, [pc, #96]	@ (800e454 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d00e      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a17      	ldr	r2, [pc, #92]	@ (800e458 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d009      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a1b      	ldr	r2, [pc, #108]	@ (800e474 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d004      	beq.n	800e414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a1a      	ldr	r2, [pc, #104]	@ (800e478 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d10c      	bne.n	800e42e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e41a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	4313      	orrs	r3, r2
 800e424:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68ba      	ldr	r2, [r7, #8]
 800e42c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2201      	movs	r2, #1
 800e432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	40012c00 	.word	0x40012c00
 800e450:	50012c00 	.word	0x50012c00
 800e454:	40013400 	.word	0x40013400
 800e458:	50013400 	.word	0x50013400
 800e45c:	40000400 	.word	0x40000400
 800e460:	50000400 	.word	0x50000400
 800e464:	40000800 	.word	0x40000800
 800e468:	50000800 	.word	0x50000800
 800e46c:	40000c00 	.word	0x40000c00
 800e470:	50000c00 	.word	0x50000c00
 800e474:	40014000 	.word	0x40014000
 800e478:	50014000 	.word	0x50014000

0800e47c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e484:	bf00      	nop
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e498:	bf00      	nop
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e4ac:	bf00      	nop
 800e4ae:	370c      	adds	r7, #12
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e4c0:	bf00      	nop
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e4d4:	bf00      	nop
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e4e8:	bf00      	nop
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e4fc:	bf00      	nop
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800e508:	b590      	push	{r4, r7, lr}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	e072      	b.n	800e600 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d106      	bne.n	800e534 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7f3 fd5c 	bl	8001fec <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2202      	movs	r2, #2
 800e538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2201      	movs	r2, #1
 800e542:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6819      	ldr	r1, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800e552:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	691b      	ldr	r3, [r3, #16]
 800e558:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800e55a:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800e560:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800e566:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800e56c:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 800e572:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 800e578:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	430a      	orrs	r2, r1
 800e580:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	7b1b      	ldrb	r3, [r3, #12]
 800e586:	2b01      	cmp	r3, #1
 800e588:	d107      	bne.n	800e59a <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e598:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5a2:	431a      	orrs	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5a8:	431a      	orrs	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	43d2      	mvns	r2, r2
 800e5b0:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	430a      	orrs	r2, r1
 800e5c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e5ca:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681c      	ldr	r4, [r3, #0]
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f000 f817 	bl	800e608 <TSC_extract_groups>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f022 0203 	bic.w	r2, r2, #3
 800e5ec:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2203      	movs	r2, #3
 800e5f4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	bd90      	pop	{r4, r7, pc}

0800e608 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800e610:	2300      	movs	r3, #0
 800e612:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800e614:	2300      	movs	r3, #0
 800e616:	60bb      	str	r3, [r7, #8]
 800e618:	e011      	b.n	800e63e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	220f      	movs	r2, #15
 800e620:	409a      	lsls	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4013      	ands	r3, r2
 800e626:	2b00      	cmp	r3, #0
 800e628:	d006      	beq.n	800e638 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800e62a:	2201      	movs	r2, #1
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	fa02 f303 	lsl.w	r3, r2, r3
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	4313      	orrs	r3, r2
 800e636:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	3301      	adds	r3, #1
 800e63c:	60bb      	str	r3, [r7, #8]
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	2b07      	cmp	r3, #7
 800e642:	d9ea      	bls.n	800e61a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800e644:	68fb      	ldr	r3, [r7, #12]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr

0800e652 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b082      	sub	sp, #8
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d101      	bne.n	800e664 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	e042      	b.n	800e6ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d106      	bne.n	800e67c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7f3 fdde 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2224      	movs	r2, #36	@ 0x24
 800e680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f022 0201 	bic.w	r2, r2, #1
 800e692:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 fcab 	bl	800eff8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 fb06 	bl	800ecb4 <UART_SetConfig>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d101      	bne.n	800e6b2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e01b      	b.n	800e6ea <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	685a      	ldr	r2, [r3, #4]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e6c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	689a      	ldr	r2, [r3, #8]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e6d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f042 0201 	orr.w	r2, r2, #1
 800e6e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fd2a 	bl	800f13c <UART_CheckIdleState>
 800e6e8:	4603      	mov	r3, r0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3708      	adds	r7, #8
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
	...

0800e6f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b0ae      	sub	sp, #184	@ 0xb8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	69db      	ldr	r3, [r3, #28]
 800e702:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e71a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e71e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e722:	4013      	ands	r3, r2
 800e724:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800e728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d11b      	bne.n	800e768 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e730:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e734:	f003 0320 	and.w	r3, r3, #32
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d015      	beq.n	800e768 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e73c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e740:	f003 0320 	and.w	r3, r3, #32
 800e744:	2b00      	cmp	r3, #0
 800e746:	d105      	bne.n	800e754 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e74c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d009      	beq.n	800e768 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 827e 	beq.w	800ec5a <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	4798      	blx	r3
      }
      return;
 800e766:	e278      	b.n	800ec5a <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	f000 80fd 	beq.w	800e96c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e772:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e776:	4b7a      	ldr	r3, [pc, #488]	@ (800e960 <HAL_UART_IRQHandler+0x26c>)
 800e778:	4013      	ands	r3, r2
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d106      	bne.n	800e78c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e77e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e782:	4b78      	ldr	r3, [pc, #480]	@ (800e964 <HAL_UART_IRQHandler+0x270>)
 800e784:	4013      	ands	r3, r2
 800e786:	2b00      	cmp	r3, #0
 800e788:	f000 80f0 	beq.w	800e96c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e78c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	2b00      	cmp	r3, #0
 800e796:	d011      	beq.n	800e7bc <HAL_UART_IRQHandler+0xc8>
 800e798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e79c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00b      	beq.n	800e7bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7b2:	f043 0201 	orr.w	r2, r3, #1
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e7c0:	f003 0302 	and.w	r3, r3, #2
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d011      	beq.n	800e7ec <HAL_UART_IRQHandler+0xf8>
 800e7c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d00b      	beq.n	800e7ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2202      	movs	r2, #2
 800e7da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7e2:	f043 0204 	orr.w	r2, r3, #4
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e7f0:	f003 0304 	and.w	r3, r3, #4
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d011      	beq.n	800e81c <HAL_UART_IRQHandler+0x128>
 800e7f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7fc:	f003 0301 	and.w	r3, r3, #1
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00b      	beq.n	800e81c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2204      	movs	r2, #4
 800e80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e812:	f043 0202 	orr.w	r2, r3, #2
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e81c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e820:	f003 0308 	and.w	r3, r3, #8
 800e824:	2b00      	cmp	r3, #0
 800e826:	d017      	beq.n	800e858 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e82c:	f003 0320 	and.w	r3, r3, #32
 800e830:	2b00      	cmp	r3, #0
 800e832:	d105      	bne.n	800e840 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e834:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e838:	4b49      	ldr	r3, [pc, #292]	@ (800e960 <HAL_UART_IRQHandler+0x26c>)
 800e83a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00b      	beq.n	800e858 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2208      	movs	r2, #8
 800e846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e84e:	f043 0208 	orr.w	r2, r3, #8
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e85c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e860:	2b00      	cmp	r3, #0
 800e862:	d012      	beq.n	800e88a <HAL_UART_IRQHandler+0x196>
 800e864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e868:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00c      	beq.n	800e88a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e880:	f043 0220 	orr.w	r2, r3, #32
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e890:	2b00      	cmp	r3, #0
 800e892:	f000 81e4 	beq.w	800ec5e <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e89a:	f003 0320 	and.w	r3, r3, #32
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d013      	beq.n	800e8ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e8a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e8a6:	f003 0320 	and.w	r3, r3, #32
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d105      	bne.n	800e8ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e8ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e8b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d007      	beq.n	800e8ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d003      	beq.n	800e8ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8de:	2b40      	cmp	r3, #64	@ 0x40
 800e8e0:	d005      	beq.n	800e8ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e8e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d02e      	beq.n	800e94c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fd35 	bl	800f35e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8fe:	2b40      	cmp	r3, #64	@ 0x40
 800e900:	d120      	bne.n	800e944 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d017      	beq.n	800e93c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e912:	4a15      	ldr	r2, [pc, #84]	@ (800e968 <HAL_UART_IRQHandler+0x274>)
 800e914:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7f6 fff1 	bl	8005904 <HAL_DMA_Abort_IT>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d019      	beq.n	800e95c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e936:	4610      	mov	r0, r2
 800e938:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e93a:	e00f      	b.n	800e95c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f9a3 	bl	800ec88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e942:	e00b      	b.n	800e95c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f99f 	bl	800ec88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e94a:	e007      	b.n	800e95c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 f99b 	bl	800ec88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2200      	movs	r2, #0
 800e956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e95a:	e180      	b.n	800ec5e <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e95c:	bf00      	nop
    return;
 800e95e:	e17e      	b.n	800ec5e <HAL_UART_IRQHandler+0x56a>
 800e960:	10000001 	.word	0x10000001
 800e964:	04000120 	.word	0x04000120
 800e968:	0800f42b 	.word	0x0800f42b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e970:	2b01      	cmp	r3, #1
 800e972:	f040 8129 	bne.w	800ebc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e97a:	f003 0310 	and.w	r3, r3, #16
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 8122 	beq.w	800ebc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e988:	f003 0310 	and.w	r3, r3, #16
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 811b 	beq.w	800ebc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2210      	movs	r2, #16
 800e998:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9a4:	2b40      	cmp	r3, #64	@ 0x40
 800e9a6:	f040 8091 	bne.w	800eacc <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9b4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800e9b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 8150 	beq.w	800ec62 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e9c8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	f080 8148 	bcs.w	800ec62 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800e9d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9e4:	2b81      	cmp	r3, #129	@ 0x81
 800e9e6:	d060      	beq.n	800eaaa <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e9f0:	e853 3f00 	ldrex	r3, [r3]
 800e9f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e9f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e9f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e9fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	461a      	mov	r2, r3
 800ea06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ea0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ea12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ea16:	e841 2300 	strex	r3, r2, [r1]
 800ea1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ea1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1e2      	bne.n	800e9e8 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	3308      	adds	r3, #8
 800ea28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea2c:	e853 3f00 	ldrex	r3, [r3]
 800ea30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ea32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea34:	f023 0301 	bic.w	r3, r3, #1
 800ea38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	3308      	adds	r3, #8
 800ea42:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ea46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ea48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ea4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ea4e:	e841 2300 	strex	r3, r2, [r1]
 800ea52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ea54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d1e3      	bne.n	800ea22 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2220      	movs	r2, #32
 800ea5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea70:	e853 3f00 	ldrex	r3, [r3]
 800ea74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ea76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea78:	f023 0310 	bic.w	r3, r3, #16
 800ea7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	461a      	mov	r2, r3
 800ea86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ea8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea92:	e841 2300 	strex	r3, r2, [r1]
 800ea96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1e4      	bne.n	800ea68 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7f6 feb1 	bl	800580c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2202      	movs	r2, #2
 800eaae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 f8e9 	bl	800ec9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eaca:	e0ca      	b.n	800ec62 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ead8:	b29b      	uxth	r3, r3
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f000 80bc 	beq.w	800ec66 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 800eaee:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 80b7 	beq.w	800ec66 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb00:	e853 3f00 	ldrex	r3, [r3]
 800eb04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	461a      	mov	r2, r3
 800eb16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800eb1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e4      	bne.n	800eaf8 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	3308      	adds	r3, #8
 800eb34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb38:	e853 3f00 	ldrex	r3, [r3]
 800eb3c:	623b      	str	r3, [r7, #32]
   return(result);
 800eb3e:	6a3b      	ldr	r3, [r7, #32]
 800eb40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb44:	f023 0301 	bic.w	r3, r3, #1
 800eb48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	3308      	adds	r3, #8
 800eb52:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800eb56:	633a      	str	r2, [r7, #48]	@ 0x30
 800eb58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb5e:	e841 2300 	strex	r3, r2, [r1]
 800eb62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1e1      	bne.n	800eb2e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	e853 3f00 	ldrex	r3, [r3]
 800eb8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f023 0310 	bic.w	r3, r3, #16
 800eb92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800eba0:	61fb      	str	r3, [r7, #28]
 800eba2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba4:	69b9      	ldr	r1, [r7, #24]
 800eba6:	69fa      	ldr	r2, [r7, #28]
 800eba8:	e841 2300 	strex	r3, r2, [r1]
 800ebac:	617b      	str	r3, [r7, #20]
   return(result);
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1e4      	bne.n	800eb7e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2202      	movs	r2, #2
 800ebb8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ebba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 f86b 	bl	800ec9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ebc6:	e04e      	b.n	800ec66 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ebc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ebcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d014      	beq.n	800ebfe <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ebd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ebd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d105      	bne.n	800ebec <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ebe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d008      	beq.n	800ebfe <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d03a      	beq.n	800ec6a <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	4798      	blx	r3
    }
    return;
 800ebfc:	e035      	b.n	800ec6a <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ebfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d009      	beq.n	800ec1e <HAL_UART_IRQHandler+0x52a>
 800ec0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ec0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 fc1d 	bl	800f456 <UART_EndTransmit_IT>
    return;
 800ec1c:	e026      	b.n	800ec6c <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d009      	beq.n	800ec3e <HAL_UART_IRQHandler+0x54a>
 800ec2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ec2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fc42 	bl	800f4c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec3c:	e016      	b.n	800ec6c <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d010      	beq.n	800ec6c <HAL_UART_IRQHandler+0x578>
 800ec4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	da0c      	bge.n	800ec6c <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 fc2a 	bl	800f4ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec58:	e008      	b.n	800ec6c <HAL_UART_IRQHandler+0x578>
      return;
 800ec5a:	bf00      	nop
 800ec5c:	e006      	b.n	800ec6c <HAL_UART_IRQHandler+0x578>
    return;
 800ec5e:	bf00      	nop
 800ec60:	e004      	b.n	800ec6c <HAL_UART_IRQHandler+0x578>
      return;
 800ec62:	bf00      	nop
 800ec64:	e002      	b.n	800ec6c <HAL_UART_IRQHandler+0x578>
      return;
 800ec66:	bf00      	nop
 800ec68:	e000      	b.n	800ec6c <HAL_UART_IRQHandler+0x578>
    return;
 800ec6a:	bf00      	nop
  }
}
 800ec6c:	37b8      	adds	r7, #184	@ 0xb8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop

0800ec74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	460b      	mov	r3, r1
 800eca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecb8:	b094      	sub	sp, #80	@ 0x50
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	4b7e      	ldr	r3, [pc, #504]	@ (800eec4 <UART_SetConfig+0x210>)
 800ecca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecce:	689a      	ldr	r2, [r3, #8]
 800ecd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd2:	691b      	ldr	r3, [r3, #16]
 800ecd4:	431a      	orrs	r2, r3
 800ecd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	431a      	orrs	r2, r3
 800ecdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecde:	69db      	ldr	r3, [r3, #28]
 800ece0:	4313      	orrs	r3, r2
 800ece2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ece4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4977      	ldr	r1, [pc, #476]	@ (800eec8 <UART_SetConfig+0x214>)
 800ecec:	4019      	ands	r1, r3
 800ecee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecf4:	430b      	orrs	r3, r1
 800ecf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ecf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ed02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed04:	68d9      	ldr	r1, [r3, #12]
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	ea40 0301 	orr.w	r3, r0, r1
 800ed0e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	4b6a      	ldr	r3, [pc, #424]	@ (800eec4 <UART_SetConfig+0x210>)
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d009      	beq.n	800ed34 <UART_SetConfig+0x80>
 800ed20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	4b69      	ldr	r3, [pc, #420]	@ (800eecc <UART_SetConfig+0x218>)
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d004      	beq.n	800ed34 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed2c:	6a1a      	ldr	r2, [r3, #32]
 800ed2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed30:	4313      	orrs	r3, r2
 800ed32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ed3e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ed42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed48:	430b      	orrs	r3, r1
 800ed4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed52:	f023 000f 	bic.w	r0, r3, #15
 800ed56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed58:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ed5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	ea40 0301 	orr.w	r3, r0, r1
 800ed62:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	4b59      	ldr	r3, [pc, #356]	@ (800eed0 <UART_SetConfig+0x21c>)
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d102      	bne.n	800ed74 <UART_SetConfig+0xc0>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed72:	e029      	b.n	800edc8 <UART_SetConfig+0x114>
 800ed74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	4b56      	ldr	r3, [pc, #344]	@ (800eed4 <UART_SetConfig+0x220>)
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d102      	bne.n	800ed84 <UART_SetConfig+0xd0>
 800ed7e:	2302      	movs	r3, #2
 800ed80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed82:	e021      	b.n	800edc8 <UART_SetConfig+0x114>
 800ed84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	4b53      	ldr	r3, [pc, #332]	@ (800eed8 <UART_SetConfig+0x224>)
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d102      	bne.n	800ed94 <UART_SetConfig+0xe0>
 800ed8e:	2304      	movs	r3, #4
 800ed90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed92:	e019      	b.n	800edc8 <UART_SetConfig+0x114>
 800ed94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	4b50      	ldr	r3, [pc, #320]	@ (800eedc <UART_SetConfig+0x228>)
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d102      	bne.n	800eda4 <UART_SetConfig+0xf0>
 800ed9e:	2308      	movs	r3, #8
 800eda0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eda2:	e011      	b.n	800edc8 <UART_SetConfig+0x114>
 800eda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	4b4d      	ldr	r3, [pc, #308]	@ (800eee0 <UART_SetConfig+0x22c>)
 800edaa:	429a      	cmp	r2, r3
 800edac:	d102      	bne.n	800edb4 <UART_SetConfig+0x100>
 800edae:	2310      	movs	r3, #16
 800edb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800edb2:	e009      	b.n	800edc8 <UART_SetConfig+0x114>
 800edb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	4b42      	ldr	r3, [pc, #264]	@ (800eec4 <UART_SetConfig+0x210>)
 800edba:	429a      	cmp	r2, r3
 800edbc:	d102      	bne.n	800edc4 <UART_SetConfig+0x110>
 800edbe:	2320      	movs	r3, #32
 800edc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800edc2:	e001      	b.n	800edc8 <UART_SetConfig+0x114>
 800edc4:	2300      	movs	r3, #0
 800edc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800edc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	4b3d      	ldr	r3, [pc, #244]	@ (800eec4 <UART_SetConfig+0x210>)
 800edce:	429a      	cmp	r2, r3
 800edd0:	d005      	beq.n	800edde <UART_SetConfig+0x12a>
 800edd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	4b3d      	ldr	r3, [pc, #244]	@ (800eecc <UART_SetConfig+0x218>)
 800edd8:	429a      	cmp	r2, r3
 800edda:	f040 8085 	bne.w	800eee8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800edde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ede0:	2200      	movs	r2, #0
 800ede2:	623b      	str	r3, [r7, #32]
 800ede4:	627a      	str	r2, [r7, #36]	@ 0x24
 800ede6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800edea:	f7fc fd63 	bl	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800edee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800edf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f000 80e8 	beq.w	800efc8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800edf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edfc:	4a39      	ldr	r2, [pc, #228]	@ (800eee4 <UART_SetConfig+0x230>)
 800edfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee02:	461a      	mov	r2, r3
 800ee04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee0a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee0e:	685a      	ldr	r2, [r3, #4]
 800ee10:	4613      	mov	r3, r2
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	4413      	add	r3, r2
 800ee16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d305      	bcc.n	800ee28 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d903      	bls.n	800ee30 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ee2e:	e048      	b.n	800eec2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee32:	2200      	movs	r2, #0
 800ee34:	61bb      	str	r3, [r7, #24]
 800ee36:	61fa      	str	r2, [r7, #28]
 800ee38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee3c:	4a29      	ldr	r2, [pc, #164]	@ (800eee4 <UART_SetConfig+0x230>)
 800ee3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	2200      	movs	r2, #0
 800ee46:	613b      	str	r3, [r7, #16]
 800ee48:	617a      	str	r2, [r7, #20]
 800ee4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ee4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ee52:	f7f1 fa15 	bl	8000280 <__aeabi_uldivmod>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4610      	mov	r0, r2
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	f04f 0200 	mov.w	r2, #0
 800ee62:	f04f 0300 	mov.w	r3, #0
 800ee66:	020b      	lsls	r3, r1, #8
 800ee68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee6c:	0202      	lsls	r2, r0, #8
 800ee6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee70:	6849      	ldr	r1, [r1, #4]
 800ee72:	0849      	lsrs	r1, r1, #1
 800ee74:	2000      	movs	r0, #0
 800ee76:	460c      	mov	r4, r1
 800ee78:	4605      	mov	r5, r0
 800ee7a:	eb12 0804 	adds.w	r8, r2, r4
 800ee7e:	eb43 0905 	adc.w	r9, r3, r5
 800ee82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	60bb      	str	r3, [r7, #8]
 800ee8a:	60fa      	str	r2, [r7, #12]
 800ee8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee90:	4640      	mov	r0, r8
 800ee92:	4649      	mov	r1, r9
 800ee94:	f7f1 f9f4 	bl	8000280 <__aeabi_uldivmod>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eea6:	d308      	bcc.n	800eeba <UART_SetConfig+0x206>
 800eea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eeaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eeae:	d204      	bcs.n	800eeba <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800eeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eeb6:	60da      	str	r2, [r3, #12]
 800eeb8:	e003      	b.n	800eec2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800eeba:	2301      	movs	r3, #1
 800eebc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800eec0:	e082      	b.n	800efc8 <UART_SetConfig+0x314>
 800eec2:	e081      	b.n	800efc8 <UART_SetConfig+0x314>
 800eec4:	46002400 	.word	0x46002400
 800eec8:	cfff69f3 	.word	0xcfff69f3
 800eecc:	56002400 	.word	0x56002400
 800eed0:	40013800 	.word	0x40013800
 800eed4:	40004400 	.word	0x40004400
 800eed8:	40004800 	.word	0x40004800
 800eedc:	40004c00 	.word	0x40004c00
 800eee0:	40005000 	.word	0x40005000
 800eee4:	08017fcc 	.word	0x08017fcc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeea:	69db      	ldr	r3, [r3, #28]
 800eeec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eef0:	d13c      	bne.n	800ef6c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800eef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eef4:	2200      	movs	r2, #0
 800eef6:	603b      	str	r3, [r7, #0]
 800eef8:	607a      	str	r2, [r7, #4]
 800eefa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eefe:	f7fc fcd9 	bl	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800ef02:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d05e      	beq.n	800efc8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef0e:	4a39      	ldr	r2, [pc, #228]	@ (800eff4 <UART_SetConfig+0x340>)
 800ef10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef14:	461a      	mov	r2, r3
 800ef16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef1c:	005a      	lsls	r2, r3, #1
 800ef1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	085b      	lsrs	r3, r3, #1
 800ef24:	441a      	add	r2, r3
 800ef26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef32:	2b0f      	cmp	r3, #15
 800ef34:	d916      	bls.n	800ef64 <UART_SetConfig+0x2b0>
 800ef36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef3c:	d212      	bcs.n	800ef64 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	f023 030f 	bic.w	r3, r3, #15
 800ef46:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef4a:	085b      	lsrs	r3, r3, #1
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	f003 0307 	and.w	r3, r3, #7
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ef56:	4313      	orrs	r3, r2
 800ef58:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ef5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ef60:	60da      	str	r2, [r3, #12]
 800ef62:	e031      	b.n	800efc8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ef64:	2301      	movs	r3, #1
 800ef66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ef6a:	e02d      	b.n	800efc8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ef6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef6e:	2200      	movs	r2, #0
 800ef70:	469a      	mov	sl, r3
 800ef72:	4693      	mov	fp, r2
 800ef74:	4650      	mov	r0, sl
 800ef76:	4659      	mov	r1, fp
 800ef78:	f7fc fc9c 	bl	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800ef7c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ef7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d021      	beq.n	800efc8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef88:	4a1a      	ldr	r2, [pc, #104]	@ (800eff4 <UART_SetConfig+0x340>)
 800ef8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef92:	fbb3 f2f2 	udiv	r2, r3, r2
 800ef96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	085b      	lsrs	r3, r3, #1
 800ef9c:	441a      	add	r2, r3
 800ef9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800efa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efaa:	2b0f      	cmp	r3, #15
 800efac:	d909      	bls.n	800efc2 <UART_SetConfig+0x30e>
 800efae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efb4:	d205      	bcs.n	800efc2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800efb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efb8:	b29a      	uxth	r2, r3
 800efba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	60da      	str	r2, [r3, #12]
 800efc0:	e002      	b.n	800efc8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800efc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efca:	2201      	movs	r2, #1
 800efcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800efd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd2:	2201      	movs	r2, #1
 800efd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800efd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efda:	2200      	movs	r2, #0
 800efdc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800efde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efe0:	2200      	movs	r2, #0
 800efe2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800efe4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3750      	adds	r7, #80	@ 0x50
 800efec:	46bd      	mov	sp, r7
 800efee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eff2:	bf00      	nop
 800eff4:	08017fcc 	.word	0x08017fcc

0800eff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f004:	f003 0308 	and.w	r3, r3, #8
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d00a      	beq.n	800f022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	430a      	orrs	r2, r1
 800f020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00a      	beq.n	800f044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	430a      	orrs	r2, r1
 800f042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f048:	f003 0302 	and.w	r3, r3, #2
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00a      	beq.n	800f066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	430a      	orrs	r2, r1
 800f064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f06a:	f003 0304 	and.w	r3, r3, #4
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00a      	beq.n	800f088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	430a      	orrs	r2, r1
 800f086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f08c:	f003 0310 	and.w	r3, r3, #16
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00a      	beq.n	800f0aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	689b      	ldr	r3, [r3, #8]
 800f09a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	430a      	orrs	r2, r1
 800f0a8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0ae:	f003 0320 	and.w	r3, r3, #32
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00a      	beq.n	800f0cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	689b      	ldr	r3, [r3, #8]
 800f0bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	430a      	orrs	r2, r1
 800f0ca:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d01a      	beq.n	800f10e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	430a      	orrs	r2, r1
 800f0ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0f6:	d10a      	bne.n	800f10e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	430a      	orrs	r2, r1
 800f10c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00a      	beq.n	800f130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	430a      	orrs	r2, r1
 800f12e:	605a      	str	r2, [r3, #4]
  }
}
 800f130:	bf00      	nop
 800f132:	370c      	adds	r7, #12
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr

0800f13c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b098      	sub	sp, #96	@ 0x60
 800f140:	af02      	add	r7, sp, #8
 800f142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f14c:	f7f3 fb56 	bl	80027fc <HAL_GetTick>
 800f150:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 0308 	and.w	r3, r3, #8
 800f15c:	2b08      	cmp	r3, #8
 800f15e:	d12f      	bne.n	800f1c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f160:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f168:	2200      	movs	r2, #0
 800f16a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 f88e 	bl	800f290 <UART_WaitOnFlagUntilTimeout>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d022      	beq.n	800f1c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f182:	e853 3f00 	ldrex	r3, [r3]
 800f186:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f18a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f18e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	461a      	mov	r2, r3
 800f196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f198:	647b      	str	r3, [r7, #68]	@ 0x44
 800f19a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f19c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f19e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f1a0:	e841 2300 	strex	r3, r2, [r1]
 800f1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1e6      	bne.n	800f17a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2220      	movs	r2, #32
 800f1b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1bc:	2303      	movs	r3, #3
 800f1be:	e063      	b.n	800f288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f003 0304 	and.w	r3, r3, #4
 800f1ca:	2b04      	cmp	r3, #4
 800f1cc:	d149      	bne.n	800f262 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f857 	bl	800f290 <UART_WaitOnFlagUntilTimeout>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d03c      	beq.n	800f262 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f0:	e853 3f00 	ldrex	r3, [r3]
 800f1f4:	623b      	str	r3, [r7, #32]
   return(result);
 800f1f6:	6a3b      	ldr	r3, [r7, #32]
 800f1f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f1fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	461a      	mov	r2, r3
 800f204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f206:	633b      	str	r3, [r7, #48]	@ 0x30
 800f208:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f20a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f20c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f20e:	e841 2300 	strex	r3, r2, [r1]
 800f212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f216:	2b00      	cmp	r3, #0
 800f218:	d1e6      	bne.n	800f1e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	3308      	adds	r3, #8
 800f220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	e853 3f00 	ldrex	r3, [r3]
 800f228:	60fb      	str	r3, [r7, #12]
   return(result);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f023 0301 	bic.w	r3, r3, #1
 800f230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3308      	adds	r3, #8
 800f238:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f23a:	61fa      	str	r2, [r7, #28]
 800f23c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f23e:	69b9      	ldr	r1, [r7, #24]
 800f240:	69fa      	ldr	r2, [r7, #28]
 800f242:	e841 2300 	strex	r3, r2, [r1]
 800f246:	617b      	str	r3, [r7, #20]
   return(result);
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1e5      	bne.n	800f21a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2220      	movs	r2, #32
 800f252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f25e:	2303      	movs	r3, #3
 800f260:	e012      	b.n	800f288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2220      	movs	r2, #32
 800f266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2220      	movs	r2, #32
 800f26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3758      	adds	r7, #88	@ 0x58
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	603b      	str	r3, [r7, #0]
 800f29c:	4613      	mov	r3, r2
 800f29e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2a0:	e049      	b.n	800f336 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a8:	d045      	beq.n	800f336 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2aa:	f7f3 faa7 	bl	80027fc <HAL_GetTick>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	69ba      	ldr	r2, [r7, #24]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d302      	bcc.n	800f2c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d101      	bne.n	800f2c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	e048      	b.n	800f356 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f003 0304 	and.w	r3, r3, #4
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d031      	beq.n	800f336 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	69db      	ldr	r3, [r3, #28]
 800f2d8:	f003 0308 	and.w	r3, r3, #8
 800f2dc:	2b08      	cmp	r3, #8
 800f2de:	d110      	bne.n	800f302 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2208      	movs	r2, #8
 800f2e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f000 f838 	bl	800f35e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2208      	movs	r2, #8
 800f2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	e029      	b.n	800f356 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	69db      	ldr	r3, [r3, #28]
 800f308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f30c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f310:	d111      	bne.n	800f336 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f31a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f000 f81e 	bl	800f35e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2220      	movs	r2, #32
 800f326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2200      	movs	r2, #0
 800f32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f332:	2303      	movs	r3, #3
 800f334:	e00f      	b.n	800f356 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	69da      	ldr	r2, [r3, #28]
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	4013      	ands	r3, r2
 800f340:	68ba      	ldr	r2, [r7, #8]
 800f342:	429a      	cmp	r2, r3
 800f344:	bf0c      	ite	eq
 800f346:	2301      	moveq	r3, #1
 800f348:	2300      	movne	r3, #0
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	461a      	mov	r2, r3
 800f34e:	79fb      	ldrb	r3, [r7, #7]
 800f350:	429a      	cmp	r2, r3
 800f352:	d0a6      	beq.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f35e:	b480      	push	{r7}
 800f360:	b095      	sub	sp, #84	@ 0x54
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f36e:	e853 3f00 	ldrex	r3, [r3]
 800f372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	461a      	mov	r2, r3
 800f382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f384:	643b      	str	r3, [r7, #64]	@ 0x40
 800f386:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f38a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f38c:	e841 2300 	strex	r3, r2, [r1]
 800f390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1e6      	bne.n	800f366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	3308      	adds	r3, #8
 800f39e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a0:	6a3b      	ldr	r3, [r7, #32]
 800f3a2:	e853 3f00 	ldrex	r3, [r3]
 800f3a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f3ae:	f023 0301 	bic.w	r3, r3, #1
 800f3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	3308      	adds	r3, #8
 800f3ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f3be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f3c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3c4:	e841 2300 	strex	r3, r2, [r1]
 800f3c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1e3      	bne.n	800f398 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d118      	bne.n	800f40a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	e853 3f00 	ldrex	r3, [r3]
 800f3e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	f023 0310 	bic.w	r3, r3, #16
 800f3ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3f6:	61bb      	str	r3, [r7, #24]
 800f3f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fa:	6979      	ldr	r1, [r7, #20]
 800f3fc:	69ba      	ldr	r2, [r7, #24]
 800f3fe:	e841 2300 	strex	r3, r2, [r1]
 800f402:	613b      	str	r3, [r7, #16]
   return(result);
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1e6      	bne.n	800f3d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2220      	movs	r2, #32
 800f40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f41e:	bf00      	nop
 800f420:	3754      	adds	r7, #84	@ 0x54
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b084      	sub	sp, #16
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2200      	movs	r2, #0
 800f444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f7ff fc1d 	bl	800ec88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f44e:	bf00      	nop
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}

0800f456 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f456:	b580      	push	{r7, lr}
 800f458:	b088      	sub	sp, #32
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	e853 3f00 	ldrex	r3, [r3]
 800f46a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f472:	61fb      	str	r3, [r7, #28]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	461a      	mov	r2, r3
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	61bb      	str	r3, [r7, #24]
 800f47e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f480:	6979      	ldr	r1, [r7, #20]
 800f482:	69ba      	ldr	r2, [r7, #24]
 800f484:	e841 2300 	strex	r3, r2, [r1]
 800f488:	613b      	str	r3, [r7, #16]
   return(result);
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d1e6      	bne.n	800f45e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2220      	movs	r2, #32
 800f494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7ff fbe8 	bl	800ec74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4a4:	bf00      	nop
 800f4a6:	3720      	adds	r7, #32
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f4b4:	bf00      	nop
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f4c8:	bf00      	nop
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d101      	bne.n	800f4ea <HAL_UARTEx_DisableFifoMode+0x16>
 800f4e6:	2302      	movs	r3, #2
 800f4e8:	e027      	b.n	800f53a <HAL_UARTEx_DisableFifoMode+0x66>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2224      	movs	r2, #36	@ 0x24
 800f4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f022 0201 	bic.w	r2, r2, #1
 800f510:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2220      	movs	r2, #32
 800f52c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3714      	adds	r7, #20
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f546:	b580      	push	{r7, lr}
 800f548:	b084      	sub	sp, #16
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
 800f54e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f556:	2b01      	cmp	r3, #1
 800f558:	d101      	bne.n	800f55e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f55a:	2302      	movs	r3, #2
 800f55c:	e02d      	b.n	800f5ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2201      	movs	r2, #1
 800f562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2224      	movs	r2, #36	@ 0x24
 800f56a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f022 0201 	bic.w	r2, r2, #1
 800f584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	683a      	ldr	r2, [r7, #0]
 800f596:	430a      	orrs	r2, r1
 800f598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 f850 	bl	800f640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2220      	movs	r2, #32
 800f5ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b084      	sub	sp, #16
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d101      	bne.n	800f5da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f5d6:	2302      	movs	r3, #2
 800f5d8:	e02d      	b.n	800f636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2201      	movs	r2, #1
 800f5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2224      	movs	r2, #36	@ 0x24
 800f5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f022 0201 	bic.w	r2, r2, #1
 800f600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	689b      	ldr	r3, [r3, #8]
 800f608:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	683a      	ldr	r2, [r7, #0]
 800f612:	430a      	orrs	r2, r1
 800f614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 f812 	bl	800f640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2220      	movs	r2, #32
 800f628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3710      	adds	r7, #16
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
	...

0800f640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d108      	bne.n	800f662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2201      	movs	r2, #1
 800f65c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f660:	e031      	b.n	800f6c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f662:	2308      	movs	r3, #8
 800f664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f666:	2308      	movs	r3, #8
 800f668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	0e5b      	lsrs	r3, r3, #25
 800f672:	b2db      	uxtb	r3, r3
 800f674:	f003 0307 	and.w	r3, r3, #7
 800f678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	0f5b      	lsrs	r3, r3, #29
 800f682:	b2db      	uxtb	r3, r3
 800f684:	f003 0307 	and.w	r3, r3, #7
 800f688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f68a:	7bbb      	ldrb	r3, [r7, #14]
 800f68c:	7b3a      	ldrb	r2, [r7, #12]
 800f68e:	4911      	ldr	r1, [pc, #68]	@ (800f6d4 <UARTEx_SetNbDataToProcess+0x94>)
 800f690:	5c8a      	ldrb	r2, [r1, r2]
 800f692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f696:	7b3a      	ldrb	r2, [r7, #12]
 800f698:	490f      	ldr	r1, [pc, #60]	@ (800f6d8 <UARTEx_SetNbDataToProcess+0x98>)
 800f69a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f69c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
 800f6aa:	7b7a      	ldrb	r2, [r7, #13]
 800f6ac:	4909      	ldr	r1, [pc, #36]	@ (800f6d4 <UARTEx_SetNbDataToProcess+0x94>)
 800f6ae:	5c8a      	ldrb	r2, [r1, r2]
 800f6b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f6b4:	7b7a      	ldrb	r2, [r7, #13]
 800f6b6:	4908      	ldr	r1, [pc, #32]	@ (800f6d8 <UARTEx_SetNbDataToProcess+0x98>)
 800f6b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f6ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f6c6:	bf00      	nop
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	08017fe4 	.word	0x08017fe4
 800f6d8:	08017fec 	.word	0x08017fec

0800f6dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f6dc:	b084      	sub	sp, #16
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b084      	sub	sp, #16
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	f107 001c 	add.w	r0, r7, #28
 800f6ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f001 faaa 	bl	8010c54 <USB_CoreReset>
 800f700:	4603      	mov	r3, r0
 800f702:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800f704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f706:	2b00      	cmp	r3, #0
 800f708:	d106      	bne.n	800f718 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	639a      	str	r2, [r3, #56]	@ 0x38
 800f716:	e005      	b.n	800f724 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f71c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800f724:	7bfb      	ldrb	r3, [r7, #15]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f730:	b004      	add	sp, #16
 800f732:	4770      	bx	lr

0800f734 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f734:	b480      	push	{r7}
 800f736:	b087      	sub	sp, #28
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	4613      	mov	r3, r2
 800f740:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f742:	79fb      	ldrb	r3, [r7, #7]
 800f744:	2b02      	cmp	r3, #2
 800f746:	d165      	bne.n	800f814 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	4a41      	ldr	r2, [pc, #260]	@ (800f850 <USB_SetTurnaroundTime+0x11c>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d906      	bls.n	800f75e <USB_SetTurnaroundTime+0x2a>
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	4a40      	ldr	r2, [pc, #256]	@ (800f854 <USB_SetTurnaroundTime+0x120>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d202      	bcs.n	800f75e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f758:	230f      	movs	r3, #15
 800f75a:	617b      	str	r3, [r7, #20]
 800f75c:	e062      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	4a3c      	ldr	r2, [pc, #240]	@ (800f854 <USB_SetTurnaroundTime+0x120>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d306      	bcc.n	800f774 <USB_SetTurnaroundTime+0x40>
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	4a3b      	ldr	r2, [pc, #236]	@ (800f858 <USB_SetTurnaroundTime+0x124>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d202      	bcs.n	800f774 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f76e:	230e      	movs	r3, #14
 800f770:	617b      	str	r3, [r7, #20]
 800f772:	e057      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	4a38      	ldr	r2, [pc, #224]	@ (800f858 <USB_SetTurnaroundTime+0x124>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d306      	bcc.n	800f78a <USB_SetTurnaroundTime+0x56>
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	4a37      	ldr	r2, [pc, #220]	@ (800f85c <USB_SetTurnaroundTime+0x128>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d202      	bcs.n	800f78a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f784:	230d      	movs	r3, #13
 800f786:	617b      	str	r3, [r7, #20]
 800f788:	e04c      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	4a33      	ldr	r2, [pc, #204]	@ (800f85c <USB_SetTurnaroundTime+0x128>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d306      	bcc.n	800f7a0 <USB_SetTurnaroundTime+0x6c>
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	4a32      	ldr	r2, [pc, #200]	@ (800f860 <USB_SetTurnaroundTime+0x12c>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d802      	bhi.n	800f7a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f79a:	230c      	movs	r3, #12
 800f79c:	617b      	str	r3, [r7, #20]
 800f79e:	e041      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	4a2f      	ldr	r2, [pc, #188]	@ (800f860 <USB_SetTurnaroundTime+0x12c>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d906      	bls.n	800f7b6 <USB_SetTurnaroundTime+0x82>
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	4a2e      	ldr	r2, [pc, #184]	@ (800f864 <USB_SetTurnaroundTime+0x130>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d802      	bhi.n	800f7b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f7b0:	230b      	movs	r3, #11
 800f7b2:	617b      	str	r3, [r7, #20]
 800f7b4:	e036      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	4a2a      	ldr	r2, [pc, #168]	@ (800f864 <USB_SetTurnaroundTime+0x130>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d906      	bls.n	800f7cc <USB_SetTurnaroundTime+0x98>
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	4a29      	ldr	r2, [pc, #164]	@ (800f868 <USB_SetTurnaroundTime+0x134>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d802      	bhi.n	800f7cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f7c6:	230a      	movs	r3, #10
 800f7c8:	617b      	str	r3, [r7, #20]
 800f7ca:	e02b      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	4a26      	ldr	r2, [pc, #152]	@ (800f868 <USB_SetTurnaroundTime+0x134>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d906      	bls.n	800f7e2 <USB_SetTurnaroundTime+0xae>
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	4a25      	ldr	r2, [pc, #148]	@ (800f86c <USB_SetTurnaroundTime+0x138>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d202      	bcs.n	800f7e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f7dc:	2309      	movs	r3, #9
 800f7de:	617b      	str	r3, [r7, #20]
 800f7e0:	e020      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	4a21      	ldr	r2, [pc, #132]	@ (800f86c <USB_SetTurnaroundTime+0x138>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d306      	bcc.n	800f7f8 <USB_SetTurnaroundTime+0xc4>
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	4a20      	ldr	r2, [pc, #128]	@ (800f870 <USB_SetTurnaroundTime+0x13c>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d802      	bhi.n	800f7f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f7f2:	2308      	movs	r3, #8
 800f7f4:	617b      	str	r3, [r7, #20]
 800f7f6:	e015      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	4a1d      	ldr	r2, [pc, #116]	@ (800f870 <USB_SetTurnaroundTime+0x13c>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d906      	bls.n	800f80e <USB_SetTurnaroundTime+0xda>
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	4a1c      	ldr	r2, [pc, #112]	@ (800f874 <USB_SetTurnaroundTime+0x140>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d202      	bcs.n	800f80e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f808:	2307      	movs	r3, #7
 800f80a:	617b      	str	r3, [r7, #20]
 800f80c:	e00a      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f80e:	2306      	movs	r3, #6
 800f810:	617b      	str	r3, [r7, #20]
 800f812:	e007      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f814:	79fb      	ldrb	r3, [r7, #7]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d102      	bne.n	800f820 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f81a:	2309      	movs	r3, #9
 800f81c:	617b      	str	r3, [r7, #20]
 800f81e:	e001      	b.n	800f824 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f820:	2309      	movs	r3, #9
 800f822:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	68da      	ldr	r2, [r3, #12]
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	029b      	lsls	r3, r3, #10
 800f838:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f83c:	431a      	orrs	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	371c      	adds	r7, #28
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	00d8acbf 	.word	0x00d8acbf
 800f854:	00e4e1c0 	.word	0x00e4e1c0
 800f858:	00f42400 	.word	0x00f42400
 800f85c:	01067380 	.word	0x01067380
 800f860:	011a499f 	.word	0x011a499f
 800f864:	01312cff 	.word	0x01312cff
 800f868:	014ca43f 	.word	0x014ca43f
 800f86c:	016e3600 	.word	0x016e3600
 800f870:	01a6ab1f 	.word	0x01a6ab1f
 800f874:	01e84800 	.word	0x01e84800

0800f878 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f878:	b480      	push	{r7}
 800f87a:	b083      	sub	sp, #12
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	f043 0201 	orr.w	r2, r3, #1
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	370c      	adds	r7, #12
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f89a:	b480      	push	{r7}
 800f89c:	b083      	sub	sp, #12
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	f023 0201 	bic.w	r2, r3, #1
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f8ae:	2300      	movs	r3, #0
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f8d8:	78fb      	ldrb	r3, [r7, #3]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d115      	bne.n	800f90a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f8ea:	2001      	movs	r0, #1
 800f8ec:	f7f2 ff92 	bl	8002814 <HAL_Delay>
      ms++;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f001 f91d 	bl	8010b36 <USB_GetMode>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d01e      	beq.n	800f940 <USB_SetCurrentMode+0x84>
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2b31      	cmp	r3, #49	@ 0x31
 800f906:	d9f0      	bls.n	800f8ea <USB_SetCurrentMode+0x2e>
 800f908:	e01a      	b.n	800f940 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f90a:	78fb      	ldrb	r3, [r7, #3]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d115      	bne.n	800f93c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f91c:	2001      	movs	r0, #1
 800f91e:	f7f2 ff79 	bl	8002814 <HAL_Delay>
      ms++;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	3301      	adds	r3, #1
 800f926:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f001 f904 	bl	8010b36 <USB_GetMode>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d005      	beq.n	800f940 <USB_SetCurrentMode+0x84>
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b31      	cmp	r3, #49	@ 0x31
 800f938:	d9f0      	bls.n	800f91c <USB_SetCurrentMode+0x60>
 800f93a:	e001      	b.n	800f940 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f93c:	2301      	movs	r3, #1
 800f93e:	e005      	b.n	800f94c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2b32      	cmp	r3, #50	@ 0x32
 800f944:	d101      	bne.n	800f94a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f946:	2301      	movs	r3, #1
 800f948:	e000      	b.n	800f94c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3710      	adds	r7, #16
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f954:	b084      	sub	sp, #16
 800f956:	b580      	push	{r7, lr}
 800f958:	b086      	sub	sp, #24
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
 800f95e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f966:	2300      	movs	r3, #0
 800f968:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f96e:	2300      	movs	r3, #0
 800f970:	613b      	str	r3, [r7, #16]
 800f972:	e009      	b.n	800f988 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	3340      	adds	r3, #64	@ 0x40
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	4413      	add	r3, r2
 800f97e:	2200      	movs	r2, #0
 800f980:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	3301      	adds	r3, #1
 800f986:	613b      	str	r3, [r7, #16]
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	2b0e      	cmp	r3, #14
 800f98c:	d9f2      	bls.n	800f974 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f98e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f990:	2b00      	cmp	r3, #0
 800f992:	d11c      	bne.n	800f9ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f9a2:	f043 0302 	orr.w	r3, r3, #2
 800f9a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	601a      	str	r2, [r3, #0]
 800f9cc:	e005      	b.n	800f9da <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f9e6:	2103      	movs	r1, #3
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f000 f95b 	bl	800fca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f9ee:	2110      	movs	r1, #16
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 f8f3 	bl	800fbdc <USB_FlushTxFifo>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d001      	beq.n	800fa00 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f91f 	bl	800fc44 <USB_FlushRxFifo>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa16:	461a      	mov	r2, r3
 800fa18:	2300      	movs	r3, #0
 800fa1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa22:	461a      	mov	r2, r3
 800fa24:	2300      	movs	r3, #0
 800fa26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa2e:	461a      	mov	r2, r3
 800fa30:	2300      	movs	r3, #0
 800fa32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa34:	2300      	movs	r3, #0
 800fa36:	613b      	str	r3, [r7, #16]
 800fa38:	e043      	b.n	800fac2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	015a      	lsls	r2, r3, #5
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	4413      	add	r3, r2
 800fa42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fa4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fa50:	d118      	bne.n	800fa84 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d10a      	bne.n	800fa6e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	015a      	lsls	r2, r3, #5
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	4413      	add	r3, r2
 800fa60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa64:	461a      	mov	r2, r3
 800fa66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fa6a:	6013      	str	r3, [r2, #0]
 800fa6c:	e013      	b.n	800fa96 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	015a      	lsls	r2, r3, #5
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	4413      	add	r3, r2
 800fa76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fa80:	6013      	str	r3, [r2, #0]
 800fa82:	e008      	b.n	800fa96 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	015a      	lsls	r2, r3, #5
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa90:	461a      	mov	r2, r3
 800fa92:	2300      	movs	r3, #0
 800fa94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	015a      	lsls	r2, r3, #5
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800faa2:	461a      	mov	r2, r3
 800faa4:	2300      	movs	r3, #0
 800faa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	015a      	lsls	r2, r3, #5
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fab4:	461a      	mov	r2, r3
 800fab6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800faba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	3301      	adds	r3, #1
 800fac0:	613b      	str	r3, [r7, #16]
 800fac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac4:	693a      	ldr	r2, [r7, #16]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d3b7      	bcc.n	800fa3a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800faca:	2300      	movs	r3, #0
 800facc:	613b      	str	r3, [r7, #16]
 800face:	e043      	b.n	800fb58 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	015a      	lsls	r2, r3, #5
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	4413      	add	r3, r2
 800fad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fae2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fae6:	d118      	bne.n	800fb1a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d10a      	bne.n	800fb04 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	015a      	lsls	r2, r3, #5
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	4413      	add	r3, r2
 800faf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fafa:	461a      	mov	r2, r3
 800fafc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fb00:	6013      	str	r3, [r2, #0]
 800fb02:	e013      	b.n	800fb2c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	015a      	lsls	r2, r3, #5
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb10:	461a      	mov	r2, r3
 800fb12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fb16:	6013      	str	r3, [r2, #0]
 800fb18:	e008      	b.n	800fb2c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	015a      	lsls	r2, r3, #5
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	4413      	add	r3, r2
 800fb22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb26:	461a      	mov	r2, r3
 800fb28:	2300      	movs	r3, #0
 800fb2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	015a      	lsls	r2, r3, #5
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	4413      	add	r3, r2
 800fb34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb38:	461a      	mov	r2, r3
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	015a      	lsls	r2, r3, #5
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	4413      	add	r3, r2
 800fb46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fb50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	3301      	adds	r3, #1
 800fb56:	613b      	str	r3, [r7, #16]
 800fb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb5a:	693a      	ldr	r2, [r7, #16]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d3b7      	bcc.n	800fad0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb66:	691b      	ldr	r3, [r3, #16]
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fb6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800fb80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d105      	bne.n	800fb94 <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	699b      	ldr	r3, [r3, #24]
 800fb8c:	f043 0210 	orr.w	r2, r3, #16
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	699a      	ldr	r2, [r3, #24]
 800fb98:	4b0f      	ldr	r3, [pc, #60]	@ (800fbd8 <USB_DevInit+0x284>)
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d005      	beq.n	800fbb2 <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	699b      	ldr	r3, [r3, #24]
 800fbaa:	f043 0208 	orr.w	r2, r3, #8
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fbb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d107      	bne.n	800fbc8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	699b      	ldr	r3, [r3, #24]
 800fbbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fbc0:	f043 0304 	orr.w	r3, r3, #4
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3718      	adds	r7, #24
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fbd4:	b004      	add	sp, #16
 800fbd6:	4770      	bx	lr
 800fbd8:	803c3800 	.word	0x803c3800

0800fbdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b085      	sub	sp, #20
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	3301      	adds	r3, #1
 800fbee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	4a13      	ldr	r2, [pc, #76]	@ (800fc40 <USB_FlushTxFifo+0x64>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d901      	bls.n	800fbfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fbf8:	2303      	movs	r3, #3
 800fbfa:	e01b      	b.n	800fc34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	daf2      	bge.n	800fbea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fc04:	2300      	movs	r3, #0
 800fc06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	019b      	lsls	r3, r3, #6
 800fc0c:	f043 0220 	orr.w	r2, r3, #32
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	3301      	adds	r3, #1
 800fc18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	4a08      	ldr	r2, [pc, #32]	@ (800fc40 <USB_FlushTxFifo+0x64>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d901      	bls.n	800fc26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fc22:	2303      	movs	r3, #3
 800fc24:	e006      	b.n	800fc34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	691b      	ldr	r3, [r3, #16]
 800fc2a:	f003 0320 	and.w	r3, r3, #32
 800fc2e:	2b20      	cmp	r3, #32
 800fc30:	d0f0      	beq.n	800fc14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3714      	adds	r7, #20
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr
 800fc40:	00030d40 	.word	0x00030d40

0800fc44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	3301      	adds	r3, #1
 800fc54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	4a11      	ldr	r2, [pc, #68]	@ (800fca0 <USB_FlushRxFifo+0x5c>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d901      	bls.n	800fc62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fc5e:	2303      	movs	r3, #3
 800fc60:	e018      	b.n	800fc94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	691b      	ldr	r3, [r3, #16]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	daf2      	bge.n	800fc50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2210      	movs	r2, #16
 800fc72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3301      	adds	r3, #1
 800fc78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	4a08      	ldr	r2, [pc, #32]	@ (800fca0 <USB_FlushRxFifo+0x5c>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d901      	bls.n	800fc86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fc82:	2303      	movs	r3, #3
 800fc84:	e006      	b.n	800fc94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	691b      	ldr	r3, [r3, #16]
 800fc8a:	f003 0310 	and.w	r3, r3, #16
 800fc8e:	2b10      	cmp	r3, #16
 800fc90:	d0f0      	beq.n	800fc74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fc92:	2300      	movs	r3, #0
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3714      	adds	r7, #20
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr
 800fca0:	00030d40 	.word	0x00030d40

0800fca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b085      	sub	sp, #20
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	460b      	mov	r3, r1
 800fcae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	78fb      	ldrb	r3, [r7, #3]
 800fcbe:	68f9      	ldr	r1, [r7, #12]
 800fcc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3714      	adds	r7, #20
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr

0800fcd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fcd6:	b480      	push	{r7}
 800fcd8:	b087      	sub	sp, #28
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	f003 0306 	and.w	r3, r3, #6
 800fcee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d102      	bne.n	800fcfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	75fb      	strb	r3, [r7, #23]
 800fcfa:	e00a      	b.n	800fd12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b02      	cmp	r3, #2
 800fd00:	d002      	beq.n	800fd08 <USB_GetDevSpeed+0x32>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2b06      	cmp	r3, #6
 800fd06:	d102      	bne.n	800fd0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fd08:	2302      	movs	r3, #2
 800fd0a:	75fb      	strb	r3, [r7, #23]
 800fd0c:	e001      	b.n	800fd12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fd0e:	230f      	movs	r3, #15
 800fd10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	371c      	adds	r7, #28
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b085      	sub	sp, #20
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	785b      	ldrb	r3, [r3, #1]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d13a      	bne.n	800fdb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd42:	69da      	ldr	r2, [r3, #28]
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	f003 030f 	and.w	r3, r3, #15
 800fd4c:	2101      	movs	r1, #1
 800fd4e:	fa01 f303 	lsl.w	r3, r1, r3
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	68f9      	ldr	r1, [r7, #12]
 800fd56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	015a      	lsls	r2, r3, #5
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	4413      	add	r3, r2
 800fd66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d155      	bne.n	800fe20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	015a      	lsls	r2, r3, #5
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	689b      	ldr	r3, [r3, #8]
 800fd86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	791b      	ldrb	r3, [r3, #4]
 800fd8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	059b      	lsls	r3, r3, #22
 800fd96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	0151      	lsls	r1, r2, #5
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	440a      	add	r2, r1
 800fda2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fda6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fdaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fdae:	6013      	str	r3, [r2, #0]
 800fdb0:	e036      	b.n	800fe20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fdb8:	69da      	ldr	r2, [r3, #28]
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	f003 030f 	and.w	r3, r3, #15
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	fa01 f303 	lsl.w	r3, r1, r3
 800fdc8:	041b      	lsls	r3, r3, #16
 800fdca:	68f9      	ldr	r1, [r7, #12]
 800fdcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	015a      	lsls	r2, r3, #5
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	4413      	add	r3, r2
 800fddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d11a      	bne.n	800fe20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	015a      	lsls	r2, r3, #5
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	791b      	ldrb	r3, [r3, #4]
 800fe04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fe06:	430b      	orrs	r3, r1
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	0151      	lsls	r1, r2, #5
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	440a      	add	r2, r1
 800fe12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fe16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3714      	adds	r7, #20
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr
	...

0800fe30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b085      	sub	sp, #20
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	785b      	ldrb	r3, [r3, #1]
 800fe48:	2b01      	cmp	r3, #1
 800fe4a:	d161      	bne.n	800ff10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	015a      	lsls	r2, r3, #5
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4413      	add	r3, r2
 800fe54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fe5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fe62:	d11f      	bne.n	800fea4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	015a      	lsls	r2, r3, #5
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	68ba      	ldr	r2, [r7, #8]
 800fe74:	0151      	lsls	r1, r2, #5
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	440a      	add	r2, r1
 800fe7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fe82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	015a      	lsls	r2, r3, #5
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	0151      	lsls	r1, r2, #5
 800fe96:	68fa      	ldr	r2, [r7, #12]
 800fe98:	440a      	add	r2, r1
 800fe9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800feaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	f003 030f 	and.w	r3, r3, #15
 800feb4:	2101      	movs	r1, #1
 800feb6:	fa01 f303 	lsl.w	r3, r1, r3
 800feba:	b29b      	uxth	r3, r3
 800febc:	43db      	mvns	r3, r3
 800febe:	68f9      	ldr	r1, [r7, #12]
 800fec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fec4:	4013      	ands	r3, r2
 800fec6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fece:	69da      	ldr	r2, [r3, #28]
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 030f 	and.w	r3, r3, #15
 800fed8:	2101      	movs	r1, #1
 800feda:	fa01 f303 	lsl.w	r3, r1, r3
 800fede:	b29b      	uxth	r3, r3
 800fee0:	43db      	mvns	r3, r3
 800fee2:	68f9      	ldr	r1, [r7, #12]
 800fee4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fee8:	4013      	ands	r3, r2
 800feea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	015a      	lsls	r2, r3, #5
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	4413      	add	r3, r2
 800fef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	0159      	lsls	r1, r3, #5
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	440b      	add	r3, r1
 800ff02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff06:	4619      	mov	r1, r3
 800ff08:	4b35      	ldr	r3, [pc, #212]	@ (800ffe0 <USB_DeactivateEndpoint+0x1b0>)
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	600b      	str	r3, [r1, #0]
 800ff0e:	e060      	b.n	800ffd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	015a      	lsls	r2, r3, #5
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	4413      	add	r3, r2
 800ff18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ff22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ff26:	d11f      	bne.n	800ff68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	015a      	lsls	r2, r3, #5
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	4413      	add	r3, r2
 800ff30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	68ba      	ldr	r2, [r7, #8]
 800ff38:	0151      	lsls	r1, r2, #5
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	440a      	add	r2, r1
 800ff3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ff46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	015a      	lsls	r2, r3, #5
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	4413      	add	r3, r2
 800ff50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	68ba      	ldr	r2, [r7, #8]
 800ff58:	0151      	lsls	r1, r2, #5
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	440a      	add	r2, r1
 800ff5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ff66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	f003 030f 	and.w	r3, r3, #15
 800ff78:	2101      	movs	r1, #1
 800ff7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff7e:	041b      	lsls	r3, r3, #16
 800ff80:	43db      	mvns	r3, r3
 800ff82:	68f9      	ldr	r1, [r7, #12]
 800ff84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ff88:	4013      	ands	r3, r2
 800ff8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff92:	69da      	ldr	r2, [r3, #28]
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f003 030f 	and.w	r3, r3, #15
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	fa01 f303 	lsl.w	r3, r1, r3
 800ffa2:	041b      	lsls	r3, r3, #16
 800ffa4:	43db      	mvns	r3, r3
 800ffa6:	68f9      	ldr	r1, [r7, #12]
 800ffa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ffac:	4013      	ands	r3, r2
 800ffae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	015a      	lsls	r2, r3, #5
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	0159      	lsls	r1, r3, #5
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	440b      	add	r3, r1
 800ffc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffca:	4619      	mov	r1, r3
 800ffcc:	4b05      	ldr	r3, [pc, #20]	@ (800ffe4 <USB_DeactivateEndpoint+0x1b4>)
 800ffce:	4013      	ands	r3, r2
 800ffd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3714      	adds	r7, #20
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr
 800ffe0:	ec337800 	.word	0xec337800
 800ffe4:	eff37800 	.word	0xeff37800

0800ffe8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b08a      	sub	sp, #40	@ 0x28
 800ffec:	af02      	add	r7, sp, #8
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	4613      	mov	r3, r2
 800fff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	785b      	ldrb	r3, [r3, #1]
 8010004:	2b01      	cmp	r3, #1
 8010006:	f040 817a 	bne.w	80102fe <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d132      	bne.n	8010078 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	015a      	lsls	r2, r3, #5
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	4413      	add	r3, r2
 801001a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801001e:	691b      	ldr	r3, [r3, #16]
 8010020:	69ba      	ldr	r2, [r7, #24]
 8010022:	0151      	lsls	r1, r2, #5
 8010024:	69fa      	ldr	r2, [r7, #28]
 8010026:	440a      	add	r2, r1
 8010028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801002c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010030:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	015a      	lsls	r2, r3, #5
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	4413      	add	r3, r2
 801003e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	69ba      	ldr	r2, [r7, #24]
 8010046:	0151      	lsls	r1, r2, #5
 8010048:	69fa      	ldr	r2, [r7, #28]
 801004a:	440a      	add	r2, r1
 801004c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010050:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010056:	69bb      	ldr	r3, [r7, #24]
 8010058:	015a      	lsls	r2, r3, #5
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	4413      	add	r3, r2
 801005e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010062:	691b      	ldr	r3, [r3, #16]
 8010064:	69ba      	ldr	r2, [r7, #24]
 8010066:	0151      	lsls	r1, r2, #5
 8010068:	69fa      	ldr	r2, [r7, #28]
 801006a:	440a      	add	r2, r1
 801006c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010070:	0cdb      	lsrs	r3, r3, #19
 8010072:	04db      	lsls	r3, r3, #19
 8010074:	6113      	str	r3, [r2, #16]
 8010076:	e092      	b.n	801019e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	015a      	lsls	r2, r3, #5
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	4413      	add	r3, r2
 8010080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010084:	691b      	ldr	r3, [r3, #16]
 8010086:	69ba      	ldr	r2, [r7, #24]
 8010088:	0151      	lsls	r1, r2, #5
 801008a:	69fa      	ldr	r2, [r7, #28]
 801008c:	440a      	add	r2, r1
 801008e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010092:	0cdb      	lsrs	r3, r3, #19
 8010094:	04db      	lsls	r3, r3, #19
 8010096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	015a      	lsls	r2, r3, #5
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	4413      	add	r3, r2
 80100a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	69ba      	ldr	r2, [r7, #24]
 80100a8:	0151      	lsls	r1, r2, #5
 80100aa:	69fa      	ldr	r2, [r7, #28]
 80100ac:	440a      	add	r2, r1
 80100ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80100b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80100ba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80100bc:	69bb      	ldr	r3, [r7, #24]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d11a      	bne.n	80100f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	691a      	ldr	r2, [r3, #16]
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d903      	bls.n	80100d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	689a      	ldr	r2, [r3, #8]
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	015a      	lsls	r2, r3, #5
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	4413      	add	r3, r2
 80100de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100e2:	691b      	ldr	r3, [r3, #16]
 80100e4:	69ba      	ldr	r2, [r7, #24]
 80100e6:	0151      	lsls	r1, r2, #5
 80100e8:	69fa      	ldr	r2, [r7, #28]
 80100ea:	440a      	add	r2, r1
 80100ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80100f4:	6113      	str	r3, [r2, #16]
 80100f6:	e01b      	b.n	8010130 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	015a      	lsls	r2, r3, #5
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	4413      	add	r3, r2
 8010100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010104:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	6919      	ldr	r1, [r3, #16]
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	440b      	add	r3, r1
 8010110:	1e59      	subs	r1, r3, #1
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	689b      	ldr	r3, [r3, #8]
 8010116:	fbb1 f3f3 	udiv	r3, r1, r3
 801011a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801011c:	4ba2      	ldr	r3, [pc, #648]	@ (80103a8 <USB_EPStartXfer+0x3c0>)
 801011e:	400b      	ands	r3, r1
 8010120:	69b9      	ldr	r1, [r7, #24]
 8010122:	0148      	lsls	r0, r1, #5
 8010124:	69f9      	ldr	r1, [r7, #28]
 8010126:	4401      	add	r1, r0
 8010128:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801012c:	4313      	orrs	r3, r2
 801012e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	015a      	lsls	r2, r3, #5
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	4413      	add	r3, r2
 8010138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801013c:	691a      	ldr	r2, [r3, #16]
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010146:	69b9      	ldr	r1, [r7, #24]
 8010148:	0148      	lsls	r0, r1, #5
 801014a:	69f9      	ldr	r1, [r7, #28]
 801014c:	4401      	add	r1, r0
 801014e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010152:	4313      	orrs	r3, r2
 8010154:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	791b      	ldrb	r3, [r3, #4]
 801015a:	2b01      	cmp	r3, #1
 801015c:	d11f      	bne.n	801019e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	015a      	lsls	r2, r3, #5
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	4413      	add	r3, r2
 8010166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801016a:	691b      	ldr	r3, [r3, #16]
 801016c:	69ba      	ldr	r2, [r7, #24]
 801016e:	0151      	lsls	r1, r2, #5
 8010170:	69fa      	ldr	r2, [r7, #28]
 8010172:	440a      	add	r2, r1
 8010174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010178:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801017c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	015a      	lsls	r2, r3, #5
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	4413      	add	r3, r2
 8010186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801018a:	691b      	ldr	r3, [r3, #16]
 801018c:	69ba      	ldr	r2, [r7, #24]
 801018e:	0151      	lsls	r1, r2, #5
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	440a      	add	r2, r1
 8010194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010198:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801019c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801019e:	79fb      	ldrb	r3, [r7, #7]
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d14b      	bne.n	801023c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	69db      	ldr	r3, [r3, #28]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d009      	beq.n	80101c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	015a      	lsls	r2, r3, #5
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	4413      	add	r3, r2
 80101b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101b8:	461a      	mov	r2, r3
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	69db      	ldr	r3, [r3, #28]
 80101be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	791b      	ldrb	r3, [r3, #4]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d128      	bne.n	801021a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d110      	bne.n	80101fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	015a      	lsls	r2, r3, #5
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	4413      	add	r3, r2
 80101e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	69ba      	ldr	r2, [r7, #24]
 80101e8:	0151      	lsls	r1, r2, #5
 80101ea:	69fa      	ldr	r2, [r7, #28]
 80101ec:	440a      	add	r2, r1
 80101ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80101f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80101f6:	6013      	str	r3, [r2, #0]
 80101f8:	e00f      	b.n	801021a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	015a      	lsls	r2, r3, #5
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	4413      	add	r3, r2
 8010202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	69ba      	ldr	r2, [r7, #24]
 801020a:	0151      	lsls	r1, r2, #5
 801020c:	69fa      	ldr	r2, [r7, #28]
 801020e:	440a      	add	r2, r1
 8010210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010218:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	015a      	lsls	r2, r3, #5
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	4413      	add	r3, r2
 8010222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	69ba      	ldr	r2, [r7, #24]
 801022a:	0151      	lsls	r1, r2, #5
 801022c:	69fa      	ldr	r2, [r7, #28]
 801022e:	440a      	add	r2, r1
 8010230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010234:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010238:	6013      	str	r3, [r2, #0]
 801023a:	e165      	b.n	8010508 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	015a      	lsls	r2, r3, #5
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	4413      	add	r3, r2
 8010244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	69ba      	ldr	r2, [r7, #24]
 801024c:	0151      	lsls	r1, r2, #5
 801024e:	69fa      	ldr	r2, [r7, #28]
 8010250:	440a      	add	r2, r1
 8010252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010256:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801025a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	791b      	ldrb	r3, [r3, #4]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d015      	beq.n	8010290 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	2b00      	cmp	r3, #0
 801026a:	f000 814d 	beq.w	8010508 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	f003 030f 	and.w	r3, r3, #15
 801027e:	2101      	movs	r1, #1
 8010280:	fa01 f303 	lsl.w	r3, r1, r3
 8010284:	69f9      	ldr	r1, [r7, #28]
 8010286:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801028a:	4313      	orrs	r3, r2
 801028c:	634b      	str	r3, [r1, #52]	@ 0x34
 801028e:	e13b      	b.n	8010508 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801029c:	2b00      	cmp	r3, #0
 801029e:	d110      	bne.n	80102c2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80102a0:	69bb      	ldr	r3, [r7, #24]
 80102a2:	015a      	lsls	r2, r3, #5
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	4413      	add	r3, r2
 80102a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	69ba      	ldr	r2, [r7, #24]
 80102b0:	0151      	lsls	r1, r2, #5
 80102b2:	69fa      	ldr	r2, [r7, #28]
 80102b4:	440a      	add	r2, r1
 80102b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80102be:	6013      	str	r3, [r2, #0]
 80102c0:	e00f      	b.n	80102e2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	015a      	lsls	r2, r3, #5
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	4413      	add	r3, r2
 80102ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	69ba      	ldr	r2, [r7, #24]
 80102d2:	0151      	lsls	r1, r2, #5
 80102d4:	69fa      	ldr	r2, [r7, #28]
 80102d6:	440a      	add	r2, r1
 80102d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80102e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	68d9      	ldr	r1, [r3, #12]
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	781a      	ldrb	r2, [r3, #0]
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	691b      	ldr	r3, [r3, #16]
 80102ee:	b298      	uxth	r0, r3
 80102f0:	79fb      	ldrb	r3, [r7, #7]
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	4603      	mov	r3, r0
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f000 f9b8 	bl	801066c <USB_WritePacket>
 80102fc:	e104      	b.n	8010508 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	015a      	lsls	r2, r3, #5
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	4413      	add	r3, r2
 8010306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801030a:	691b      	ldr	r3, [r3, #16]
 801030c:	69ba      	ldr	r2, [r7, #24]
 801030e:	0151      	lsls	r1, r2, #5
 8010310:	69fa      	ldr	r2, [r7, #28]
 8010312:	440a      	add	r2, r1
 8010314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010318:	0cdb      	lsrs	r3, r3, #19
 801031a:	04db      	lsls	r3, r3, #19
 801031c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	015a      	lsls	r2, r3, #5
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	4413      	add	r3, r2
 8010326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801032a:	691b      	ldr	r3, [r3, #16]
 801032c:	69ba      	ldr	r2, [r7, #24]
 801032e:	0151      	lsls	r1, r2, #5
 8010330:	69fa      	ldr	r2, [r7, #28]
 8010332:	440a      	add	r2, r1
 8010334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010338:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801033c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010340:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d131      	bne.n	80103ac <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	691b      	ldr	r3, [r3, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d003      	beq.n	8010358 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	689a      	ldr	r2, [r3, #8]
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	689a      	ldr	r2, [r3, #8]
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	015a      	lsls	r2, r3, #5
 8010364:	69fb      	ldr	r3, [r7, #28]
 8010366:	4413      	add	r3, r2
 8010368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801036c:	691a      	ldr	r2, [r3, #16]
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010376:	69b9      	ldr	r1, [r7, #24]
 8010378:	0148      	lsls	r0, r1, #5
 801037a:	69f9      	ldr	r1, [r7, #28]
 801037c:	4401      	add	r1, r0
 801037e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010382:	4313      	orrs	r3, r2
 8010384:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010386:	69bb      	ldr	r3, [r7, #24]
 8010388:	015a      	lsls	r2, r3, #5
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	4413      	add	r3, r2
 801038e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010392:	691b      	ldr	r3, [r3, #16]
 8010394:	69ba      	ldr	r2, [r7, #24]
 8010396:	0151      	lsls	r1, r2, #5
 8010398:	69fa      	ldr	r2, [r7, #28]
 801039a:	440a      	add	r2, r1
 801039c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80103a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80103a4:	6113      	str	r3, [r2, #16]
 80103a6:	e061      	b.n	801046c <USB_EPStartXfer+0x484>
 80103a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	691b      	ldr	r3, [r3, #16]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d123      	bne.n	80103fc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	015a      	lsls	r2, r3, #5
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	4413      	add	r3, r2
 80103bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103c0:	691a      	ldr	r2, [r3, #16]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	689b      	ldr	r3, [r3, #8]
 80103c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103ca:	69b9      	ldr	r1, [r7, #24]
 80103cc:	0148      	lsls	r0, r1, #5
 80103ce:	69f9      	ldr	r1, [r7, #28]
 80103d0:	4401      	add	r1, r0
 80103d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80103d6:	4313      	orrs	r3, r2
 80103d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	015a      	lsls	r2, r3, #5
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	4413      	add	r3, r2
 80103e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	69ba      	ldr	r2, [r7, #24]
 80103ea:	0151      	lsls	r1, r2, #5
 80103ec:	69fa      	ldr	r2, [r7, #28]
 80103ee:	440a      	add	r2, r1
 80103f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80103f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80103f8:	6113      	str	r3, [r2, #16]
 80103fa:	e037      	b.n	801046c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	691a      	ldr	r2, [r3, #16]
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	4413      	add	r3, r2
 8010406:	1e5a      	subs	r2, r3, #1
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010410:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	8afa      	ldrh	r2, [r7, #22]
 8010418:	fb03 f202 	mul.w	r2, r3, r2
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	015a      	lsls	r2, r3, #5
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	4413      	add	r3, r2
 8010428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801042c:	691a      	ldr	r2, [r3, #16]
 801042e:	8afb      	ldrh	r3, [r7, #22]
 8010430:	04d9      	lsls	r1, r3, #19
 8010432:	4b38      	ldr	r3, [pc, #224]	@ (8010514 <USB_EPStartXfer+0x52c>)
 8010434:	400b      	ands	r3, r1
 8010436:	69b9      	ldr	r1, [r7, #24]
 8010438:	0148      	lsls	r0, r1, #5
 801043a:	69f9      	ldr	r1, [r7, #28]
 801043c:	4401      	add	r1, r0
 801043e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010442:	4313      	orrs	r3, r2
 8010444:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	015a      	lsls	r2, r3, #5
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	4413      	add	r3, r2
 801044e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010452:	691a      	ldr	r2, [r3, #16]
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	6a1b      	ldr	r3, [r3, #32]
 8010458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801045c:	69b9      	ldr	r1, [r7, #24]
 801045e:	0148      	lsls	r0, r1, #5
 8010460:	69f9      	ldr	r1, [r7, #28]
 8010462:	4401      	add	r1, r0
 8010464:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010468:	4313      	orrs	r3, r2
 801046a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801046c:	79fb      	ldrb	r3, [r7, #7]
 801046e:	2b01      	cmp	r3, #1
 8010470:	d10d      	bne.n	801048e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d009      	beq.n	801048e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	68d9      	ldr	r1, [r3, #12]
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	015a      	lsls	r2, r3, #5
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	4413      	add	r3, r2
 8010486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801048a:	460a      	mov	r2, r1
 801048c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	791b      	ldrb	r3, [r3, #4]
 8010492:	2b01      	cmp	r3, #1
 8010494:	d128      	bne.n	80104e8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d110      	bne.n	80104c8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	015a      	lsls	r2, r3, #5
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	4413      	add	r3, r2
 80104ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	69ba      	ldr	r2, [r7, #24]
 80104b6:	0151      	lsls	r1, r2, #5
 80104b8:	69fa      	ldr	r2, [r7, #28]
 80104ba:	440a      	add	r2, r1
 80104bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80104c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80104c4:	6013      	str	r3, [r2, #0]
 80104c6:	e00f      	b.n	80104e8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80104c8:	69bb      	ldr	r3, [r7, #24]
 80104ca:	015a      	lsls	r2, r3, #5
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	4413      	add	r3, r2
 80104d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	69ba      	ldr	r2, [r7, #24]
 80104d8:	0151      	lsls	r1, r2, #5
 80104da:	69fa      	ldr	r2, [r7, #28]
 80104dc:	440a      	add	r2, r1
 80104de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80104e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	015a      	lsls	r2, r3, #5
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	4413      	add	r3, r2
 80104f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	69ba      	ldr	r2, [r7, #24]
 80104f8:	0151      	lsls	r1, r2, #5
 80104fa:	69fa      	ldr	r2, [r7, #28]
 80104fc:	440a      	add	r2, r1
 80104fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010502:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010506:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3720      	adds	r7, #32
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	1ff80000 	.word	0x1ff80000

08010518 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010518:	b480      	push	{r7}
 801051a:	b087      	sub	sp, #28
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010522:	2300      	movs	r3, #0
 8010524:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010526:	2300      	movs	r3, #0
 8010528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	785b      	ldrb	r3, [r3, #1]
 8010532:	2b01      	cmp	r3, #1
 8010534:	d14a      	bne.n	80105cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	015a      	lsls	r2, r3, #5
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	4413      	add	r3, r2
 8010540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801054a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801054e:	f040 8086 	bne.w	801065e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	015a      	lsls	r2, r3, #5
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	4413      	add	r3, r2
 801055c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	683a      	ldr	r2, [r7, #0]
 8010564:	7812      	ldrb	r2, [r2, #0]
 8010566:	0151      	lsls	r1, r2, #5
 8010568:	693a      	ldr	r2, [r7, #16]
 801056a:	440a      	add	r2, r1
 801056c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010570:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010574:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	015a      	lsls	r2, r3, #5
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	4413      	add	r3, r2
 8010580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	683a      	ldr	r2, [r7, #0]
 8010588:	7812      	ldrb	r2, [r2, #0]
 801058a:	0151      	lsls	r1, r2, #5
 801058c:	693a      	ldr	r2, [r7, #16]
 801058e:	440a      	add	r2, r1
 8010590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010594:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010598:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	3301      	adds	r3, #1
 801059e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d902      	bls.n	80105b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	75fb      	strb	r3, [r7, #23]
          break;
 80105ae:	e056      	b.n	801065e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	015a      	lsls	r2, r3, #5
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	4413      	add	r3, r2
 80105ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80105c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80105c8:	d0e7      	beq.n	801059a <USB_EPStopXfer+0x82>
 80105ca:	e048      	b.n	801065e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	015a      	lsls	r2, r3, #5
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	4413      	add	r3, r2
 80105d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80105e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80105e4:	d13b      	bne.n	801065e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	015a      	lsls	r2, r3, #5
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	4413      	add	r3, r2
 80105f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	683a      	ldr	r2, [r7, #0]
 80105f8:	7812      	ldrb	r2, [r2, #0]
 80105fa:	0151      	lsls	r1, r2, #5
 80105fc:	693a      	ldr	r2, [r7, #16]
 80105fe:	440a      	add	r2, r1
 8010600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010604:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010608:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	015a      	lsls	r2, r3, #5
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	4413      	add	r3, r2
 8010614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	683a      	ldr	r2, [r7, #0]
 801061c:	7812      	ldrb	r2, [r2, #0]
 801061e:	0151      	lsls	r1, r2, #5
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	440a      	add	r2, r1
 8010624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010628:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801062c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	3301      	adds	r3, #1
 8010632:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f242 7210 	movw	r2, #10000	@ 0x2710
 801063a:	4293      	cmp	r3, r2
 801063c:	d902      	bls.n	8010644 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801063e:	2301      	movs	r3, #1
 8010640:	75fb      	strb	r3, [r7, #23]
          break;
 8010642:	e00c      	b.n	801065e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	015a      	lsls	r2, r3, #5
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	4413      	add	r3, r2
 801064e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010658:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801065c:	d0e7      	beq.n	801062e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801065e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010660:	4618      	mov	r0, r3
 8010662:	371c      	adds	r7, #28
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801066c:	b480      	push	{r7}
 801066e:	b089      	sub	sp, #36	@ 0x24
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	4611      	mov	r1, r2
 8010678:	461a      	mov	r2, r3
 801067a:	460b      	mov	r3, r1
 801067c:	71fb      	strb	r3, [r7, #7]
 801067e:	4613      	mov	r3, r2
 8010680:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801068a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801068e:	2b00      	cmp	r3, #0
 8010690:	d123      	bne.n	80106da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010692:	88bb      	ldrh	r3, [r7, #4]
 8010694:	3303      	adds	r3, #3
 8010696:	089b      	lsrs	r3, r3, #2
 8010698:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801069a:	2300      	movs	r3, #0
 801069c:	61bb      	str	r3, [r7, #24]
 801069e:	e018      	b.n	80106d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80106a0:	79fb      	ldrb	r3, [r7, #7]
 80106a2:	031a      	lsls	r2, r3, #12
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	4413      	add	r3, r2
 80106a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80106ac:	461a      	mov	r2, r3
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	3301      	adds	r3, #1
 80106b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	3301      	adds	r3, #1
 80106be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	3301      	adds	r3, #1
 80106c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	3301      	adds	r3, #1
 80106ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	3301      	adds	r3, #1
 80106d0:	61bb      	str	r3, [r7, #24]
 80106d2:	69ba      	ldr	r2, [r7, #24]
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d3e2      	bcc.n	80106a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3724      	adds	r7, #36	@ 0x24
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b08b      	sub	sp, #44	@ 0x2c
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	4613      	mov	r3, r2
 80106f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80106fe:	88fb      	ldrh	r3, [r7, #6]
 8010700:	089b      	lsrs	r3, r3, #2
 8010702:	b29b      	uxth	r3, r3
 8010704:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010706:	88fb      	ldrh	r3, [r7, #6]
 8010708:	f003 0303 	and.w	r3, r3, #3
 801070c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801070e:	2300      	movs	r3, #0
 8010710:	623b      	str	r3, [r7, #32]
 8010712:	e014      	b.n	801073e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010722:	3301      	adds	r3, #1
 8010724:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010728:	3301      	adds	r3, #1
 801072a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072e:	3301      	adds	r3, #1
 8010730:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010734:	3301      	adds	r3, #1
 8010736:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010738:	6a3b      	ldr	r3, [r7, #32]
 801073a:	3301      	adds	r3, #1
 801073c:	623b      	str	r3, [r7, #32]
 801073e:	6a3a      	ldr	r2, [r7, #32]
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	429a      	cmp	r2, r3
 8010744:	d3e6      	bcc.n	8010714 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010746:	8bfb      	ldrh	r3, [r7, #30]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d01e      	beq.n	801078a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801074c:	2300      	movs	r3, #0
 801074e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010756:	461a      	mov	r2, r3
 8010758:	f107 0310 	add.w	r3, r7, #16
 801075c:	6812      	ldr	r2, [r2, #0]
 801075e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010760:	693a      	ldr	r2, [r7, #16]
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	b2db      	uxtb	r3, r3
 8010766:	00db      	lsls	r3, r3, #3
 8010768:	fa22 f303 	lsr.w	r3, r2, r3
 801076c:	b2da      	uxtb	r2, r3
 801076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010770:	701a      	strb	r2, [r3, #0]
      i++;
 8010772:	6a3b      	ldr	r3, [r7, #32]
 8010774:	3301      	adds	r3, #1
 8010776:	623b      	str	r3, [r7, #32]
      pDest++;
 8010778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801077a:	3301      	adds	r3, #1
 801077c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801077e:	8bfb      	ldrh	r3, [r7, #30]
 8010780:	3b01      	subs	r3, #1
 8010782:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010784:	8bfb      	ldrh	r3, [r7, #30]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1ea      	bne.n	8010760 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801078a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801078c:	4618      	mov	r0, r3
 801078e:	372c      	adds	r7, #44	@ 0x2c
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	785b      	ldrb	r3, [r3, #1]
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d12c      	bne.n	801080e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	015a      	lsls	r2, r3, #5
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	4413      	add	r3, r2
 80107bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	db12      	blt.n	80107ec <USB_EPSetStall+0x54>
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00f      	beq.n	80107ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	015a      	lsls	r2, r3, #5
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	4413      	add	r3, r2
 80107d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	68ba      	ldr	r2, [r7, #8]
 80107dc:	0151      	lsls	r1, r2, #5
 80107de:	68fa      	ldr	r2, [r7, #12]
 80107e0:	440a      	add	r2, r1
 80107e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80107e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80107ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	015a      	lsls	r2, r3, #5
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68ba      	ldr	r2, [r7, #8]
 80107fc:	0151      	lsls	r1, r2, #5
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	440a      	add	r2, r1
 8010802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010806:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	e02b      	b.n	8010866 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	015a      	lsls	r2, r3, #5
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	4413      	add	r3, r2
 8010816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	db12      	blt.n	8010846 <USB_EPSetStall+0xae>
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00f      	beq.n	8010846 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	015a      	lsls	r2, r3, #5
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	4413      	add	r3, r2
 801082e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	0151      	lsls	r1, r2, #5
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	440a      	add	r2, r1
 801083c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010840:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010844:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	015a      	lsls	r2, r3, #5
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	4413      	add	r3, r2
 801084e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68ba      	ldr	r2, [r7, #8]
 8010856:	0151      	lsls	r1, r2, #5
 8010858:	68fa      	ldr	r2, [r7, #12]
 801085a:	440a      	add	r2, r1
 801085c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010860:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3714      	adds	r7, #20
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr

08010874 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	785b      	ldrb	r3, [r3, #1]
 801088c:	2b01      	cmp	r3, #1
 801088e:	d128      	bne.n	80108e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	015a      	lsls	r2, r3, #5
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	4413      	add	r3, r2
 8010898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	68ba      	ldr	r2, [r7, #8]
 80108a0:	0151      	lsls	r1, r2, #5
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	440a      	add	r2, r1
 80108a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80108aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80108ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	791b      	ldrb	r3, [r3, #4]
 80108b4:	2b03      	cmp	r3, #3
 80108b6:	d003      	beq.n	80108c0 <USB_EPClearStall+0x4c>
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	791b      	ldrb	r3, [r3, #4]
 80108bc:	2b02      	cmp	r3, #2
 80108be:	d138      	bne.n	8010932 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	015a      	lsls	r2, r3, #5
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	4413      	add	r3, r2
 80108c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	0151      	lsls	r1, r2, #5
 80108d2:	68fa      	ldr	r2, [r7, #12]
 80108d4:	440a      	add	r2, r1
 80108d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80108da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80108de:	6013      	str	r3, [r2, #0]
 80108e0:	e027      	b.n	8010932 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	015a      	lsls	r2, r3, #5
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	4413      	add	r3, r2
 80108ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68ba      	ldr	r2, [r7, #8]
 80108f2:	0151      	lsls	r1, r2, #5
 80108f4:	68fa      	ldr	r2, [r7, #12]
 80108f6:	440a      	add	r2, r1
 80108f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80108fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010900:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	791b      	ldrb	r3, [r3, #4]
 8010906:	2b03      	cmp	r3, #3
 8010908:	d003      	beq.n	8010912 <USB_EPClearStall+0x9e>
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	791b      	ldrb	r3, [r3, #4]
 801090e:	2b02      	cmp	r3, #2
 8010910:	d10f      	bne.n	8010932 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	015a      	lsls	r2, r3, #5
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	4413      	add	r3, r2
 801091a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	0151      	lsls	r1, r2, #5
 8010924:	68fa      	ldr	r2, [r7, #12]
 8010926:	440a      	add	r2, r1
 8010928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010930:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010932:	2300      	movs	r3, #0
}
 8010934:	4618      	mov	r0, r3
 8010936:	3714      	adds	r7, #20
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010940:	b480      	push	{r7}
 8010942:	b085      	sub	sp, #20
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801095e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010962:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	78fb      	ldrb	r3, [r7, #3]
 801096e:	011b      	lsls	r3, r3, #4
 8010970:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010974:	68f9      	ldr	r1, [r7, #12]
 8010976:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801097a:	4313      	orrs	r3, r2
 801097c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801098c:	b480      	push	{r7}
 801098e:	b085      	sub	sp, #20
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80109a6:	f023 0303 	bic.w	r3, r3, #3
 80109aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	68fa      	ldr	r2, [r7, #12]
 80109b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80109ba:	f023 0302 	bic.w	r3, r3, #2
 80109be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3714      	adds	r7, #20
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr

080109ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80109ce:	b480      	push	{r7}
 80109d0:	b085      	sub	sp, #20
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	68fa      	ldr	r2, [r7, #12]
 80109e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80109e8:	f023 0303 	bic.w	r3, r3, #3
 80109ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80109fc:	f043 0302 	orr.w	r3, r3, #2
 8010a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a02:	2300      	movs	r3, #0
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3714      	adds	r7, #20
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b085      	sub	sp, #20
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	695b      	ldr	r3, [r3, #20]
 8010a1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	699b      	ldr	r3, [r3, #24]
 8010a22:	68fa      	ldr	r2, [r7, #12]
 8010a24:	4013      	ands	r3, r2
 8010a26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010a28:	68fb      	ldr	r3, [r7, #12]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3714      	adds	r7, #20
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr

08010a36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a36:	b480      	push	{r7}
 8010a38:	b085      	sub	sp, #20
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a48:	699b      	ldr	r3, [r3, #24]
 8010a4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a52:	69db      	ldr	r3, [r3, #28]
 8010a54:	68ba      	ldr	r2, [r7, #8]
 8010a56:	4013      	ands	r3, r2
 8010a58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	0c1b      	lsrs	r3, r3, #16
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3714      	adds	r7, #20
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr

08010a6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a6a:	b480      	push	{r7}
 8010a6c:	b085      	sub	sp, #20
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a7c:	699b      	ldr	r3, [r3, #24]
 8010a7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a86:	69db      	ldr	r3, [r3, #28]
 8010a88:	68ba      	ldr	r2, [r7, #8]
 8010a8a:	4013      	ands	r3, r2
 8010a8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	b29b      	uxth	r3, r3
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3714      	adds	r7, #20
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a9e:	b480      	push	{r7}
 8010aa0:	b085      	sub	sp, #20
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010aae:	78fb      	ldrb	r3, [r7, #3]
 8010ab0:	015a      	lsls	r2, r3, #5
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ac4:	695b      	ldr	r3, [r3, #20]
 8010ac6:	68ba      	ldr	r2, [r7, #8]
 8010ac8:	4013      	ands	r3, r2
 8010aca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010acc:	68bb      	ldr	r3, [r7, #8]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3714      	adds	r7, #20
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010ada:	b480      	push	{r7}
 8010adc:	b087      	sub	sp, #28
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010af0:	691b      	ldr	r3, [r3, #16]
 8010af2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010afc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010afe:	78fb      	ldrb	r3, [r7, #3]
 8010b00:	f003 030f 	and.w	r3, r3, #15
 8010b04:	68fa      	ldr	r2, [r7, #12]
 8010b06:	fa22 f303 	lsr.w	r3, r2, r3
 8010b0a:	01db      	lsls	r3, r3, #7
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	693a      	ldr	r2, [r7, #16]
 8010b10:	4313      	orrs	r3, r2
 8010b12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010b14:	78fb      	ldrb	r3, [r7, #3]
 8010b16:	015a      	lsls	r2, r3, #5
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	693a      	ldr	r2, [r7, #16]
 8010b24:	4013      	ands	r3, r2
 8010b26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b28:	68bb      	ldr	r3, [r7, #8]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	371c      	adds	r7, #28
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr

08010b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010b36:	b480      	push	{r7}
 8010b38:	b083      	sub	sp, #12
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	695b      	ldr	r3, [r3, #20]
 8010b42:	f003 0301 	and.w	r3, r3, #1
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	370c      	adds	r7, #12
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr

08010b52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010b52:	b480      	push	{r7}
 8010b54:	b085      	sub	sp, #20
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8010b70:	f023 0307 	bic.w	r3, r3, #7
 8010b74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	68fa      	ldr	r2, [r7, #12]
 8010b80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010b88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b8a:	2300      	movs	r3, #0
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b087      	sub	sp, #28
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	607a      	str	r2, [r7, #4]
 8010ba4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	333c      	adds	r3, #60	@ 0x3c
 8010bae:	3304      	adds	r3, #4
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	4a26      	ldr	r2, [pc, #152]	@ (8010c50 <USB_EP0_OutStart+0xb8>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d90a      	bls.n	8010bd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010bcc:	d101      	bne.n	8010bd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e037      	b.n	8010c42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bd8:	461a      	mov	r2, r3
 8010bda:	2300      	movs	r3, #0
 8010bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	697a      	ldr	r2, [r7, #20]
 8010be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010bec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010bf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bf8:	691b      	ldr	r3, [r3, #16]
 8010bfa:	697a      	ldr	r2, [r7, #20]
 8010bfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c00:	f043 0318 	orr.w	r3, r3, #24
 8010c04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c0c:	691b      	ldr	r3, [r3, #16]
 8010c0e:	697a      	ldr	r2, [r7, #20]
 8010c10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c14:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010c18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010c1a:	7afb      	ldrb	r3, [r7, #11]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d10f      	bne.n	8010c40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c26:	461a      	mov	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	697a      	ldr	r2, [r7, #20]
 8010c36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c3a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010c3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c40:	2300      	movs	r3, #0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	371c      	adds	r7, #28
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop
 8010c50:	4f54300a 	.word	0x4f54300a

08010c54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b085      	sub	sp, #20
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	3301      	adds	r3, #1
 8010c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	4a13      	ldr	r2, [pc, #76]	@ (8010cb8 <USB_CoreReset+0x64>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d901      	bls.n	8010c72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010c6e:	2303      	movs	r3, #3
 8010c70:	e01b      	b.n	8010caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	691b      	ldr	r3, [r3, #16]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	daf2      	bge.n	8010c60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	691b      	ldr	r3, [r3, #16]
 8010c82:	f043 0201 	orr.w	r2, r3, #1
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	4a09      	ldr	r2, [pc, #36]	@ (8010cb8 <USB_CoreReset+0x64>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d901      	bls.n	8010c9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010c98:	2303      	movs	r3, #3
 8010c9a:	e006      	b.n	8010caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	691b      	ldr	r3, [r3, #16]
 8010ca0:	f003 0301 	and.w	r3, r3, #1
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d0f0      	beq.n	8010c8a <USB_CoreReset+0x36>

  return HAL_OK;
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3714      	adds	r7, #20
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	00030d40 	.word	0x00030d40

08010cbc <TSL_Init>:
  * @brief  Initializes the TS interface.
  * @param  bank  Array holding all the banks
  * @retval Status
  */
TSL_Status_enum_T TSL_Init(CONST TSL_Bank_T *bank)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  TSL_Status_enum_T retval;

  // Get banks array
  TSL_Globals.Bank_Array = bank;
 8010cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8010cfc <TSL_Init+0x40>)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6053      	str	r3, [r2, #4]

  // Initialize the delay that will be used to discharge the capacitors
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 8010cca:	4b0d      	ldr	r3, [pc, #52]	@ (8010d00 <TSL_Init+0x44>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4a0d      	ldr	r2, [pc, #52]	@ (8010d04 <TSL_Init+0x48>)
 8010cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8010cd4:	0c9b      	lsrs	r3, r3, #18
 8010cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010cda:	fb02 f303 	mul.w	r3, r2, r3
 8010cde:	4a0a      	ldr	r2, [pc, #40]	@ (8010d08 <TSL_Init+0x4c>)
 8010ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8010ce4:	091b      	lsrs	r3, r3, #4
 8010ce6:	4a05      	ldr	r2, [pc, #20]	@ (8010cfc <TSL_Init+0x40>)
 8010ce8:	6113      	str	r3, [r2, #16]
  // Note: The timing configuration (Systick) must be done in the user code.

  // Initialization of the acquisition module
#ifdef __TSL_ACQ_TSC_H
  // Note: The TSC peripheral initialization must be done in the user code.
  retval = TSL_STATUS_OK;
 8010cea:	2300      	movs	r3, #0
 8010cec:	73fb      	strb	r3, [r7, #15]
#else
  retval = TSL_acq_Init();
#endif

  return retval;
 8010cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3714      	adds	r7, #20
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr
 8010cfc:	20029378 	.word	0x20029378
 8010d00:	20000050 	.word	0x20000050
 8010d04:	431bde83 	.word	0x431bde83
 8010d08:	38e38e39 	.word	0x38e38e39

08010d0c <TSL_acq_TestFirstReferenceIsValid>:
  * @param[in] pCh Pointer on the channel data information
  * @param[in] new_meas Measure of the last acquisition on this channel
  * @retval Result TRUE if the Reference is valid
  */
TSL_Bool_enum_T TSL_acq_TestFirstReferenceIsValid(TSL_ChannelData_T *pCh, TSL_tMeas_T new_meas)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	460b      	mov	r3, r1
 8010d16:	807b      	strh	r3, [r7, #2]
  return TSL_TRUE;
 8010d18:	2301      	movs	r3, #1
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	370c      	adds	r7, #12
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d24:	4770      	bx	lr
	...

08010d28 <TSL_linrot_Init>:
  * @brief  Init parameters with default values from configuration file
  * @param  None
  * @retval None
  */
void TSL_linrot_Init(void)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	af00      	add	r7, sp, #0
  // Thresholds
#if TSLPRM_USE_PROX > 0
  THIS_PROXIN_TH    = TSLPRM_LINROT_PROX_IN_TH;
 8010d2c:	4b22      	ldr	r3, [pc, #136]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d2e:	695b      	ldr	r3, [r3, #20]
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	220a      	movs	r2, #10
 8010d34:	701a      	strb	r2, [r3, #0]
  THIS_PROXOUT_TH   = TSLPRM_LINROT_PROX_OUT_TH;
 8010d36:	4b20      	ldr	r3, [pc, #128]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d38:	695b      	ldr	r3, [r3, #20]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	2205      	movs	r2, #5
 8010d3e:	705a      	strb	r2, [r3, #1]
#endif
  THIS_DETECTIN_TH  = TSLPRM_LINROT_DETECT_IN_TH;
 8010d40:	4b1d      	ldr	r3, [pc, #116]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d42:	695b      	ldr	r3, [r3, #20]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	2228      	movs	r2, #40	@ 0x28
 8010d48:	709a      	strb	r2, [r3, #2]
  THIS_DETECTOUT_TH = TSLPRM_LINROT_DETECT_OUT_TH;
 8010d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d4c:	695b      	ldr	r3, [r3, #20]
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	2223      	movs	r2, #35	@ 0x23
 8010d52:	70da      	strb	r2, [r3, #3]
  THIS_CALIB_TH     = TSLPRM_LINROT_CALIB_TH;
 8010d54:	4b18      	ldr	r3, [pc, #96]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d56:	695b      	ldr	r3, [r3, #20]
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	2228      	movs	r2, #40	@ 0x28
 8010d5c:	711a      	strb	r2, [r3, #4]

  // Debounce counters
  THIS_COUNTER_DEB_CALIB   = TSLPRM_DEBOUNCE_CALIB;
 8010d5e:	4b16      	ldr	r3, [pc, #88]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d60:	695b      	ldr	r3, [r3, #20]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	2203      	movs	r2, #3
 8010d66:	715a      	strb	r2, [r3, #5]
#if TSLPRM_USE_PROX > 0
  THIS_COUNTER_DEB_PROX    = TSLPRM_DEBOUNCE_PROX;
 8010d68:	4b13      	ldr	r3, [pc, #76]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d6a:	695b      	ldr	r3, [r3, #20]
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	2202      	movs	r2, #2
 8010d70:	719a      	strb	r2, [r3, #6]
#endif
  THIS_COUNTER_DEB_DETECT  = TSLPRM_DEBOUNCE_DETECT;
 8010d72:	4b11      	ldr	r3, [pc, #68]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d74:	695b      	ldr	r3, [r3, #20]
 8010d76:	685b      	ldr	r3, [r3, #4]
 8010d78:	2202      	movs	r2, #2
 8010d7a:	71da      	strb	r2, [r3, #7]
  THIS_COUNTER_DEB_RELEASE = TSLPRM_DEBOUNCE_RELEASE;
 8010d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d7e:	695b      	ldr	r3, [r3, #20]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	2202      	movs	r2, #2
 8010d84:	721a      	strb	r2, [r3, #8]
  THIS_COUNTER_DEB_ERROR   = TSLPRM_DEBOUNCE_ERROR;
 8010d86:	4b0c      	ldr	r3, [pc, #48]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d88:	695b      	ldr	r3, [r3, #20]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	2203      	movs	r2, #3
 8010d8e:	725a      	strb	r2, [r3, #9]

  // Other parameters for linear/rotary only
  THIS_RESOLUTION            = TSLPRM_LINROT_RESOLUTION;
 8010d90:	4b09      	ldr	r3, [pc, #36]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d92:	695b      	ldr	r3, [r3, #20]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	2207      	movs	r2, #7
 8010d98:	72da      	strb	r2, [r3, #11]
  THIS_DIR_CHG_POS           = TSLPRM_LINROT_DIR_CHG_POS;
 8010d9a:	4b07      	ldr	r3, [pc, #28]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010d9c:	695b      	ldr	r3, [r3, #20]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	220a      	movs	r2, #10
 8010da2:	731a      	strb	r2, [r3, #12]
  THIS_COUNTER_DEB_DIRECTION = TSLPRM_LINROT_DIR_CHG_DEB;
 8010da4:	4b04      	ldr	r3, [pc, #16]	@ (8010db8 <TSL_linrot_Init+0x90>)
 8010da6:	695b      	ldr	r3, [r3, #20]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	2201      	movs	r2, #1
 8010dac:	729a      	strb	r2, [r3, #10]

  // Initial state
  TSL_linrot_SetStateCalibration(TSLPRM_CALIB_DELAY);
 8010dae:	2000      	movs	r0, #0
 8010db0:	f000 fb36 	bl	8011420 <TSL_linrot_SetStateCalibration>
}
 8010db4:	bf00      	nop
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	20029378 	.word	0x20029378

08010dbc <TSL_linrot_Process>:
  * @brief  Process the State Machine
  * @param  None
  * @retval None
  */
void TSL_linrot_Process(void)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
  TSL_StateId_enum_T prev_state_id;

  // Check if at least one channel has a data ready
  if ((TSL_linrot_ProcessCh_One_DataReady() == TSL_STATUS_OK) || (THIS_STATEID == TSL_STATEID_OFF))
 8010dc2:	f001 f955 	bl	8012070 <TSL_linrot_ProcessCh_One_DataReady>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d005      	beq.n	8010dd8 <TSL_linrot_Process+0x1c>
 8010dcc:	4b28      	ldr	r3, [pc, #160]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010dce:	695b      	ldr	r3, [r3, #20]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	2b13      	cmp	r3, #19
 8010dd6:	d147      	bne.n	8010e68 <TSL_linrot_Process+0xac>
  {

    prev_state_id = THIS_STATEID;
 8010dd8:	4b25      	ldr	r3, [pc, #148]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010dda:	695b      	ldr	r3, [r3, #20]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	71fb      	strb	r3, [r7, #7]

#if TSLPRM_TOTAL_LINROTS > 0
    if ((TSL_Globals.This_Obj->Type == TSL_OBJ_LINEAR) ||
 8010de2:	4b23      	ldr	r3, [pc, #140]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	2b20      	cmp	r3, #32
 8010dea:	d004      	beq.n	8010df6 <TSL_linrot_Process+0x3a>
        (TSL_Globals.This_Obj->Type == TSL_OBJ_ROTARY))
 8010dec:	4b20      	ldr	r3, [pc, #128]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	781b      	ldrb	r3, [r3, #0]
    if ((TSL_Globals.This_Obj->Type == TSL_OBJ_LINEAR) ||
 8010df2:	2b22      	cmp	r3, #34	@ 0x22
 8010df4:	d10a      	bne.n	8010e0c <TSL_linrot_Process+0x50>
    {
      // Launch the object state function
      TSL_Globals.This_LinRot->p_SM[THIS_STATEID].StateFunc();
 8010df6:	4b1e      	ldr	r3, [pc, #120]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010df8:	695b      	ldr	r3, [r3, #20]
 8010dfa:	69da      	ldr	r2, [r3, #28]
 8010dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010dfe:	695b      	ldr	r3, [r3, #20]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	00db      	lsls	r3, r3, #3
 8010e06:	4413      	add	r3, r2
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	4798      	blx	r3
      TSL_Params.p_LinRotSM[THIS_STATEID].StateFunc();
    }
#endif

    // Check if the new state has changed
    if (THIS_STATEID == prev_state_id)
 8010e0c:	4b18      	ldr	r3, [pc, #96]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010e0e:	695b      	ldr	r3, [r3, #20]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	79fa      	ldrb	r2, [r7, #7]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d107      	bne.n	8010e2a <TSL_linrot_Process+0x6e>
    {
      THIS_CHANGE = TSL_STATE_NOT_CHANGED;
 8010e1a:	4b15      	ldr	r3, [pc, #84]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010e1c:	695b      	ldr	r3, [r3, #20]
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	7913      	ldrb	r3, [r2, #4]
 8010e22:	f36f 1386 	bfc	r3, #6, #1
 8010e26:	7113      	strb	r3, [r2, #4]
 8010e28:	e006      	b.n	8010e38 <TSL_linrot_Process+0x7c>
    }
    else
    {
      THIS_CHANGE = TSL_STATE_CHANGED;
 8010e2a:	4b11      	ldr	r3, [pc, #68]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010e2c:	695b      	ldr	r3, [r3, #20]
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	7913      	ldrb	r3, [r2, #4]
 8010e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e36:	7113      	strb	r3, [r2, #4]
    }

#if TSLPRM_USE_DXS > 0
    if (THIS_STATEID != TSL_STATEID_DETECT)
 8010e38:	4b0d      	ldr	r3, [pc, #52]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010e3a:	695b      	ldr	r3, [r3, #20]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	2b0a      	cmp	r3, #10
 8010e42:	d006      	beq.n	8010e52 <TSL_linrot_Process+0x96>
    {
      THIS_DXSLOCK = TSL_FALSE;
 8010e44:	4b0a      	ldr	r3, [pc, #40]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	7953      	ldrb	r3, [r2, #5]
 8010e4c:	f36f 1386 	bfc	r3, #6, #1
 8010e50:	7153      	strb	r3, [r2, #5]
    }
    if (THIS_STATEID == TSL_STATEID_TOUCH)
 8010e52:	4b07      	ldr	r3, [pc, #28]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010e54:	695b      	ldr	r3, [r3, #20]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	2b0c      	cmp	r3, #12
 8010e5c:	d104      	bne.n	8010e68 <TSL_linrot_Process+0xac>
    {
      THIS_STATEID = TSL_STATEID_DETECT;
 8010e5e:	4b04      	ldr	r3, [pc, #16]	@ (8010e70 <TSL_linrot_Process+0xb4>)
 8010e60:	695b      	ldr	r3, [r3, #20]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	220a      	movs	r2, #10
 8010e66:	701a      	strb	r2, [r3, #0]
    }
#endif

  }
}
 8010e68:	bf00      	nop
 8010e6a:	3708      	adds	r7, #8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	20029378 	.word	0x20029378

08010e74 <TSL_linrot_CalcPos>:
  * @param  None
  * @retval Status Return OK if position calculation is correct
  * @note   The position is calculated only if the number of channels is greater than 2
  */
TSL_Status_enum_T TSL_linrot_CalcPos(void)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b087      	sub	sp, #28
 8010e78:	af00      	add	r7, sp, #0
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8010e7a:	4b85      	ldr	r3, [pc, #532]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010e7c:	695b      	ldr	r3, [r3, #20]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	613b      	str	r3, [r7, #16]
  static TSL_tDelta_T delta3;
  static TSL_tIndex_T index1;
  static TSL_tIndex_T index2;
  TSL_tNb_T minor;
  TSL_tNb_T major;
  TSL_tNb_T sector_computation = 0;
 8010e82:	2300      	movs	r3, #0
 8010e84:	81bb      	strh	r3, [r7, #12]
  TSL_tNb_T position_correction = 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	813b      	strh	r3, [r7, #8]
  TSL_tsignPosition_T new_position = 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	817b      	strh	r3, [r7, #10]
  TSL_tPosition_T u_new_position = 0;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	71fb      	strb	r3, [r7, #7]

  delta1 = 0;
 8010e92:	4b80      	ldr	r3, [pc, #512]	@ (8011094 <TSL_linrot_CalcPos+0x220>)
 8010e94:	2200      	movs	r2, #0
 8010e96:	801a      	strh	r2, [r3, #0]
  delta2 = 0;
 8010e98:	4b7f      	ldr	r3, [pc, #508]	@ (8011098 <TSL_linrot_CalcPos+0x224>)
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	801a      	strh	r2, [r3, #0]
  delta3 = 0;
 8010e9e:	4b7f      	ldr	r3, [pc, #508]	@ (801109c <TSL_linrot_CalcPos+0x228>)
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	801a      	strh	r2, [r3, #0]

  index1 = 0;
 8010ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80110a0 <TSL_linrot_CalcPos+0x22c>)
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	701a      	strb	r2, [r3, #0]
  index2 = 0;
 8010eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80110a4 <TSL_linrot_CalcPos+0x230>)
 8010eac:	2200      	movs	r2, #0
 8010eae:	701a      	strb	r2, [r3, #0]

  // The position change flag will be set only if a new position is detected.
  THIS_POSCHANGE = TSL_STATE_NOT_CHANGED;
 8010eb0:	4b77      	ldr	r3, [pc, #476]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010eb2:	695b      	ldr	r3, [r3, #20]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	7913      	ldrb	r3, [r2, #4]
 8010eb8:	f36f 13c7 	bfc	r3, #7, #1
 8010ebc:	7113      	strb	r3, [r2, #4]

  // The position is calculated only if the number of channels is greater than 2
  if (THIS_NB_CHANNELS < 3)
 8010ebe:	4b74      	ldr	r3, [pc, #464]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	899b      	ldrh	r3, [r3, #12]
 8010ec4:	2b02      	cmp	r3, #2
 8010ec6:	d801      	bhi.n	8010ecc <TSL_linrot_CalcPos+0x58>
  {
    return TSL_STATUS_ERROR;
 8010ec8:	2302      	movs	r3, #2
 8010eca:	e2a1      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
  // Sort the channels' delta
  //   - delta1 and index1 = biggest
  //   - delta2 and index2 = middle
  //   - delta3 and index3 = lowest
  //--------------------------------------------------------------------------
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8010ecc:	2300      	movs	r3, #0
 8010ece:	75fb      	strb	r3, [r7, #23]
 8010ed0:	e047      	b.n	8010f62 <TSL_linrot_CalcPos+0xee>
  {

#if TSLPRM_LINROT_USE_NORMDELTA > 0
    norm_delta = TSL_linrot_NormDelta(p_Ch, idx); // Normalize the Delta
#else
    norm_delta = p_Ch->Delta; // Take only the Delta
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	891b      	ldrh	r3, [r3, #8]
 8010ed6:	81fb      	strh	r3, [r7, #14]
#endif

    // The Delta must be positive only otherwise it is noise
    if (norm_delta < 0) {norm_delta = 0;}
 8010ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	da01      	bge.n	8010ee4 <TSL_linrot_CalcPos+0x70>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	81fb      	strh	r3, [r7, #14]

    if (norm_delta > delta1)
 8010ee4:	4b6b      	ldr	r3, [pc, #428]	@ (8011094 <TSL_linrot_CalcPos+0x220>)
 8010ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010eea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	dd14      	ble.n	8010f1c <TSL_linrot_CalcPos+0xa8>
    {
      delta3 = delta2;
 8010ef2:	4b69      	ldr	r3, [pc, #420]	@ (8011098 <TSL_linrot_CalcPos+0x224>)
 8010ef4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010ef8:	4b68      	ldr	r3, [pc, #416]	@ (801109c <TSL_linrot_CalcPos+0x228>)
 8010efa:	801a      	strh	r2, [r3, #0]
      delta2 = delta1;
 8010efc:	4b65      	ldr	r3, [pc, #404]	@ (8011094 <TSL_linrot_CalcPos+0x220>)
 8010efe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f02:	4b65      	ldr	r3, [pc, #404]	@ (8011098 <TSL_linrot_CalcPos+0x224>)
 8010f04:	801a      	strh	r2, [r3, #0]
      delta1 = norm_delta;
 8010f06:	4a63      	ldr	r2, [pc, #396]	@ (8011094 <TSL_linrot_CalcPos+0x220>)
 8010f08:	89fb      	ldrh	r3, [r7, #14]
 8010f0a:	8013      	strh	r3, [r2, #0]
      index2 = index1;
 8010f0c:	4b64      	ldr	r3, [pc, #400]	@ (80110a0 <TSL_linrot_CalcPos+0x22c>)
 8010f0e:	781a      	ldrb	r2, [r3, #0]
 8010f10:	4b64      	ldr	r3, [pc, #400]	@ (80110a4 <TSL_linrot_CalcPos+0x230>)
 8010f12:	701a      	strb	r2, [r3, #0]
      index1 = idx;
 8010f14:	4a62      	ldr	r2, [pc, #392]	@ (80110a0 <TSL_linrot_CalcPos+0x22c>)
 8010f16:	7dfb      	ldrb	r3, [r7, #23]
 8010f18:	7013      	strb	r3, [r2, #0]
 8010f1a:	e01c      	b.n	8010f56 <TSL_linrot_CalcPos+0xe2>
    }
    else
    {
      if (norm_delta > delta2)
 8010f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8011098 <TSL_linrot_CalcPos+0x224>)
 8010f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	dd0b      	ble.n	8010f42 <TSL_linrot_CalcPos+0xce>
      {
        delta3 = delta2;
 8010f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8011098 <TSL_linrot_CalcPos+0x224>)
 8010f2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f30:	4b5a      	ldr	r3, [pc, #360]	@ (801109c <TSL_linrot_CalcPos+0x228>)
 8010f32:	801a      	strh	r2, [r3, #0]
        delta2 = norm_delta;
 8010f34:	4a58      	ldr	r2, [pc, #352]	@ (8011098 <TSL_linrot_CalcPos+0x224>)
 8010f36:	89fb      	ldrh	r3, [r7, #14]
 8010f38:	8013      	strh	r3, [r2, #0]
        index2 = idx;
 8010f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80110a4 <TSL_linrot_CalcPos+0x230>)
 8010f3c:	7dfb      	ldrb	r3, [r7, #23]
 8010f3e:	7013      	strb	r3, [r2, #0]
 8010f40:	e009      	b.n	8010f56 <TSL_linrot_CalcPos+0xe2>
      }
      else
      {
        if (norm_delta > delta3)
 8010f42:	4b56      	ldr	r3, [pc, #344]	@ (801109c <TSL_linrot_CalcPos+0x228>)
 8010f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f48:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	dd02      	ble.n	8010f56 <TSL_linrot_CalcPos+0xe2>
        {
          delta3 = norm_delta;
 8010f50:	4a52      	ldr	r2, [pc, #328]	@ (801109c <TSL_linrot_CalcPos+0x228>)
 8010f52:	89fb      	ldrh	r3, [r7, #14]
 8010f54:	8013      	strh	r3, [r2, #0]
        }
      }
    }

    p_Ch++; // Next channel
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	330c      	adds	r3, #12
 8010f5a:	613b      	str	r3, [r7, #16]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8010f5c:	7dfb      	ldrb	r3, [r7, #23]
 8010f5e:	3301      	adds	r3, #1
 8010f60:	75fb      	strb	r3, [r7, #23]
 8010f62:	7dfb      	ldrb	r3, [r7, #23]
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	4b4a      	ldr	r3, [pc, #296]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010f68:	695b      	ldr	r3, [r3, #20]
 8010f6a:	899b      	ldrh	r3, [r3, #12]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d3b0      	bcc.n	8010ed2 <TSL_linrot_CalcPos+0x5e>

  } // for all channels

  // Noise filter: we need at least two significant Delta measurements
  if (delta2 < ((TSL_tThreshold_T)(THIS_DETECTOUT_TH >> 1) - 1))
 8010f70:	4b49      	ldr	r3, [pc, #292]	@ (8011098 <TSL_linrot_CalcPos+0x224>)
 8010f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f76:	461a      	mov	r2, r3
 8010f78:	4b45      	ldr	r3, [pc, #276]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010f7a:	695b      	ldr	r3, [r3, #20]
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	78db      	ldrb	r3, [r3, #3]
 8010f80:	085b      	lsrs	r3, r3, #1
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	3b01      	subs	r3, #1
 8010f86:	429a      	cmp	r2, r3
 8010f88:	da01      	bge.n	8010f8e <TSL_linrot_CalcPos+0x11a>
  {
    return TSL_STATUS_ERROR;
 8010f8a:	2302      	movs	r3, #2
 8010f8c:	e240      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
   
    - The Sector_Size depends of the number of channels used
  ----------------------------------------------------------------------------*/

  // Calculates the Major and Minor parameters
  minor = (TSL_tNb_T)(delta2 - delta3); // Middle - Smallest signals
 8010f8e:	4b42      	ldr	r3, [pc, #264]	@ (8011098 <TSL_linrot_CalcPos+0x224>)
 8010f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f94:	b29a      	uxth	r2, r3
 8010f96:	4b41      	ldr	r3, [pc, #260]	@ (801109c <TSL_linrot_CalcPos+0x228>)
 8010f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	1ad3      	subs	r3, r2, r3
 8010fa0:	80bb      	strh	r3, [r7, #4]
  major = (TSL_tNb_T)(delta1 - delta3); // Biggest - Smallest signals
 8010fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8011094 <TSL_linrot_CalcPos+0x220>)
 8010fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	4b3c      	ldr	r3, [pc, #240]	@ (801109c <TSL_linrot_CalcPos+0x228>)
 8010fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	807b      	strh	r3, [r7, #2]

  // Select the offset position in the position offset constant table
  // Equal to: new_position = TABLE_POSITION_OFFSET_xCH_xxx[index1][index2];
  new_position = *(TSL_Globals.This_LinRot->p_PosOff + (index1 * THIS_NB_CHANNELS) + index2);
 8010fb6:	4b36      	ldr	r3, [pc, #216]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010fb8:	695b      	ldr	r3, [r3, #20]
 8010fba:	695a      	ldr	r2, [r3, #20]
 8010fbc:	4b38      	ldr	r3, [pc, #224]	@ (80110a0 <TSL_linrot_CalcPos+0x22c>)
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	4b33      	ldr	r3, [pc, #204]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010fc4:	695b      	ldr	r3, [r3, #20]
 8010fc6:	899b      	ldrh	r3, [r3, #12]
 8010fc8:	fb01 f303 	mul.w	r3, r1, r3
 8010fcc:	4619      	mov	r1, r3
 8010fce:	4b35      	ldr	r3, [pc, #212]	@ (80110a4 <TSL_linrot_CalcPos+0x230>)
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	440b      	add	r3, r1
 8010fd4:	005b      	lsls	r3, r3, #1
 8010fd6:	4413      	add	r3, r2
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	817b      	strh	r3, [r7, #10]
  sector_computation = THIS_SCT_COMP;
 8010fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010fde:	695b      	ldr	r3, [r3, #20]
 8010fe0:	8b1b      	ldrh	r3, [r3, #24]
 8010fe2:	81bb      	strh	r3, [r7, #12]
  position_correction = THIS_POS_CORR;
 8010fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8010fe6:	695b      	ldr	r3, [r3, #20]
 8010fe8:	8b5b      	ldrh	r3, [r3, #26]
 8010fea:	813b      	strh	r3, [r7, #8]

  // Calculates: [ Sector_Size x ( Major / (Major + Minor) ) ]
  if ((major + minor) != 0)
 8010fec:	887a      	ldrh	r2, [r7, #2]
 8010fee:	88bb      	ldrh	r3, [r7, #4]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d00b      	beq.n	801100e <TSL_linrot_CalcPos+0x19a>
  {
    sector_computation = major * sector_computation;
 8010ff6:	89ba      	ldrh	r2, [r7, #12]
 8010ff8:	887b      	ldrh	r3, [r7, #2]
 8010ffa:	fb12 f303 	smulbb	r3, r2, r3
 8010ffe:	81bb      	strh	r3, [r7, #12]
    sector_computation = sector_computation / (major + minor);
 8011000:	89ba      	ldrh	r2, [r7, #12]
 8011002:	8879      	ldrh	r1, [r7, #2]
 8011004:	88bb      	ldrh	r3, [r7, #4]
 8011006:	440b      	add	r3, r1
 8011008:	fb92 f3f3 	sdiv	r3, r2, r3
 801100c:	81bb      	strh	r3, [r7, #12]
  }

  // Use the sign bit from position table to define the interpretation direction.
  // The NewPosition is multiplied by 2 because the Offset stored in the ROM
  // table is divided by 2...
  if (new_position > 0) // Means Offset is > 0 in the position table
 801100e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011012:	2b00      	cmp	r3, #0
 8011014:	dd09      	ble.n	801102a <TSL_linrot_CalcPos+0x1b6>
  {
    new_position = (TSL_tsignPosition_T)(new_position << 1);
 8011016:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801101a:	005b      	lsls	r3, r3, #1
 801101c:	817b      	strh	r3, [r7, #10]
    new_position += sector_computation;
 801101e:	897a      	ldrh	r2, [r7, #10]
 8011020:	89bb      	ldrh	r3, [r7, #12]
 8011022:	4413      	add	r3, r2
 8011024:	b29b      	uxth	r3, r3
 8011026:	817b      	strh	r3, [r7, #10]
 8011028:	e009      	b.n	801103e <TSL_linrot_CalcPos+0x1ca>
  }
  else // means Offset is <= 0 in the ROM table
  {
    new_position = (TSL_tsignPosition_T)((-new_position) << 1);
 801102a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801102e:	425b      	negs	r3, r3
 8011030:	005b      	lsls	r3, r3, #1
 8011032:	817b      	strh	r3, [r7, #10]
    new_position -= sector_computation;
 8011034:	897a      	ldrh	r2, [r7, #10]
 8011036:	89bb      	ldrh	r3, [r7, #12]
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	b29b      	uxth	r3, r3
 801103c:	817b      	strh	r3, [r7, #10]
  }

  // Position is calculated differently if LINEAR or ROTARY sensor
  if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_LINEARB))
 801103e:	4b14      	ldr	r3, [pc, #80]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	2b20      	cmp	r3, #32
 8011046:	d004      	beq.n	8011052 <TSL_linrot_CalcPos+0x1de>
 8011048:	4b11      	ldr	r3, [pc, #68]	@ (8011090 <TSL_linrot_CalcPos+0x21c>)
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	2b21      	cmp	r3, #33	@ 0x21
 8011050:	d12a      	bne.n	80110a8 <TSL_linrot_CalcPos+0x234>
  {

    // First adjustment used to shift all the values to obtain the "zero"
    if (new_position > 0)
 8011052:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011056:	2b00      	cmp	r3, #0
 8011058:	dd05      	ble.n	8011066 <TSL_linrot_CalcPos+0x1f2>
    {
      new_position -= position_correction;
 801105a:	897a      	ldrh	r2, [r7, #10]
 801105c:	893b      	ldrh	r3, [r7, #8]
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	b29b      	uxth	r3, r3
 8011062:	817b      	strh	r3, [r7, #10]
 8011064:	e007      	b.n	8011076 <TSL_linrot_CalcPos+0x202>
    }
    else
    {
      new_position = new_position + (256 - position_correction);
 8011066:	897a      	ldrh	r2, [r7, #10]
 8011068:	893b      	ldrh	r3, [r7, #8]
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	b29b      	uxth	r3, r3
 801106e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8011072:	b29b      	uxth	r3, r3
 8011074:	817b      	strh	r3, [r7, #10]
    }

    // Second adjustment used to clamp the values at both ends of sensor
    if (new_position < 0)
 8011076:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801107a:	2b00      	cmp	r3, #0
 801107c:	da01      	bge.n	8011082 <TSL_linrot_CalcPos+0x20e>
    {
      new_position = 0;
 801107e:	2300      	movs	r3, #0
 8011080:	817b      	strh	r3, [r7, #10]
    }

    if (new_position > 255)
 8011082:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011086:	2bff      	cmp	r3, #255	@ 0xff
 8011088:	dd11      	ble.n	80110ae <TSL_linrot_CalcPos+0x23a>
    {
      new_position = 255;
 801108a:	23ff      	movs	r3, #255	@ 0xff
 801108c:	817b      	strh	r3, [r7, #10]
    if (new_position > 255)
 801108e:	e00e      	b.n	80110ae <TSL_linrot_CalcPos+0x23a>
 8011090:	20029378 	.word	0x20029378
 8011094:	20029392 	.word	0x20029392
 8011098:	20029394 	.word	0x20029394
 801109c:	20029396 	.word	0x20029396
 80110a0:	20029398 	.word	0x20029398
 80110a4:	20029399 	.word	0x20029399
    }

  }
  else // ROTARY sensor: keep only the low byte
  {
    new_position = (TSL_tPosition_T)new_position;
 80110a8:	897b      	ldrh	r3, [r7, #10]
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	817b      	strh	r3, [r7, #10]

  //----------------------------------------------------------------------------
  // Direction Change Process
  //----------------------------------------------------------------------------

  if (THIS_DIRECTION == TSL_TRUE) // Anticlockwise direction ...
 80110ae:	4b95      	ldr	r3, [pc, #596]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80110b0:	695b      	ldr	r3, [r3, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	795b      	ldrb	r3, [r3, #5]
 80110b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	2b00      	cmp	r3, #0
 80110be:	f000 80c0 	beq.w	8011242 <TSL_linrot_CalcPos+0x3ce>
  {

    // Check Direction changed and Position overflow from 0x00 to 0xFF not realized !
    if (((TSL_tPosition_T)new_position > THIS_RAW_POSITION) && (((TSL_tPosition_T)new_position - THIS_RAW_POSITION) < DIRECTION_CHANGE_MAX_DISPLACEMENT))
 80110c2:	897b      	ldrh	r3, [r7, #10]
 80110c4:	b2da      	uxtb	r2, r3
 80110c6:	4b8f      	ldr	r3, [pc, #572]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80110c8:	695b      	ldr	r3, [r3, #20]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	785b      	ldrb	r3, [r3, #1]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d95a      	bls.n	8011188 <TSL_linrot_CalcPos+0x314>
 80110d2:	897b      	ldrh	r3, [r7, #10]
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	461a      	mov	r2, r3
 80110d8:	4b8a      	ldr	r3, [pc, #552]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80110da:	695b      	ldr	r3, [r3, #20]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	785b      	ldrb	r3, [r3, #1]
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80110e4:	dc50      	bgt.n	8011188 <TSL_linrot_CalcPos+0x314>
    {
      if (new_position < (uint16_t)(THIS_RAW_POSITION + THIS_DIR_CHG_POS))
 80110e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80110ea:	4a86      	ldr	r2, [pc, #536]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80110ec:	6952      	ldr	r2, [r2, #20]
 80110ee:	6812      	ldr	r2, [r2, #0]
 80110f0:	7852      	ldrb	r2, [r2, #1]
 80110f2:	4611      	mov	r1, r2
 80110f4:	4a83      	ldr	r2, [pc, #524]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80110f6:	6952      	ldr	r2, [r2, #20]
 80110f8:	6852      	ldr	r2, [r2, #4]
 80110fa:	7b12      	ldrb	r2, [r2, #12]
 80110fc:	440a      	add	r2, r1
 80110fe:	b292      	uxth	r2, r2
 8011100:	4293      	cmp	r3, r2
 8011102:	da10      	bge.n	8011126 <TSL_linrot_CalcPos+0x2b2>
      {
        THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 8011104:	4b7f      	ldr	r3, [pc, #508]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011106:	695b      	ldr	r3, [r3, #20]
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	7a99      	ldrb	r1, [r3, #10]
 801110c:	4b7d      	ldr	r3, [pc, #500]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 801110e:	695b      	ldr	r3, [r3, #20]
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	460b      	mov	r3, r1
 8011114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011118:	b2d9      	uxtb	r1, r3
 801111a:	7953      	ldrb	r3, [r2, #5]
 801111c:	f361 0305 	bfi	r3, r1, #0, #6
 8011120:	7153      	strb	r3, [r2, #5]
        return TSL_STATUS_ERROR;
 8011122:	2302      	movs	r3, #2
 8011124:	e174      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
      }
      else
      {
        THIS_COUNTER_DIR--;
 8011126:	4b77      	ldr	r3, [pc, #476]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011128:	695b      	ldr	r3, [r3, #20]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	795a      	ldrb	r2, [r3, #5]
 801112e:	f3c2 0205 	ubfx	r2, r2, #0, #6
 8011132:	b2d2      	uxtb	r2, r2
 8011134:	323f      	adds	r2, #63	@ 0x3f
 8011136:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801113a:	b2d1      	uxtb	r1, r2
 801113c:	795a      	ldrb	r2, [r3, #5]
 801113e:	f361 0205 	bfi	r2, r1, #0, #6
 8011142:	715a      	strb	r2, [r3, #5]
        if (!THIS_COUNTER_DIR)
 8011144:	4b6f      	ldr	r3, [pc, #444]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011146:	695b      	ldr	r3, [r3, #20]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	795b      	ldrb	r3, [r3, #5]
 801114c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011150:	b2db      	uxtb	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	d116      	bne.n	8011184 <TSL_linrot_CalcPos+0x310>
        {
          THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 8011156:	4b6b      	ldr	r3, [pc, #428]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011158:	695b      	ldr	r3, [r3, #20]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	7a99      	ldrb	r1, [r3, #10]
 801115e:	4b69      	ldr	r3, [pc, #420]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011160:	695b      	ldr	r3, [r3, #20]
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	460b      	mov	r3, r1
 8011166:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801116a:	b2d9      	uxtb	r1, r3
 801116c:	7953      	ldrb	r3, [r2, #5]
 801116e:	f361 0305 	bfi	r3, r1, #0, #6
 8011172:	7153      	strb	r3, [r2, #5]
          THIS_DIRECTION = TSL_FALSE;  // New direction accepted: clockwise.
 8011174:	4b63      	ldr	r3, [pc, #396]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011176:	695b      	ldr	r3, [r3, #20]
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	7953      	ldrb	r3, [r2, #5]
 801117c:	f36f 13c7 	bfc	r3, #7, #1
 8011180:	7153      	strb	r3, [r2, #5]
 8011182:	e001      	b.n	8011188 <TSL_linrot_CalcPos+0x314>
        }
        else
        {
          return TSL_STATUS_ERROR;
 8011184:	2302      	movs	r3, #2
 8011186:	e143      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
        }
      }
    }

    // Check position overflow from 0xFF to 0x00 to be filtered !
    if ((new_position + DIRECTION_CHANGE_MAX_DISPLACEMENT) < THIS_RAW_POSITION)
 8011188:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801118c:	33ff      	adds	r3, #255	@ 0xff
 801118e:	4a5d      	ldr	r2, [pc, #372]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011190:	6952      	ldr	r2, [r2, #20]
 8011192:	6812      	ldr	r2, [r2, #0]
 8011194:	7852      	ldrb	r2, [r2, #1]
 8011196:	4293      	cmp	r3, r2
 8011198:	f280 8112 	bge.w	80113c0 <TSL_linrot_CalcPos+0x54c>
    {
      if ((new_position + DIRECTION_CHANGE_TOTAL_STEPS) < (uint16_t)(THIS_RAW_POSITION + THIS_DIR_CHG_POS))
 801119c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80111a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80111a4:	4a57      	ldr	r2, [pc, #348]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80111a6:	6952      	ldr	r2, [r2, #20]
 80111a8:	6812      	ldr	r2, [r2, #0]
 80111aa:	7852      	ldrb	r2, [r2, #1]
 80111ac:	4611      	mov	r1, r2
 80111ae:	4a55      	ldr	r2, [pc, #340]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80111b0:	6952      	ldr	r2, [r2, #20]
 80111b2:	6852      	ldr	r2, [r2, #4]
 80111b4:	7b12      	ldrb	r2, [r2, #12]
 80111b6:	440a      	add	r2, r1
 80111b8:	b292      	uxth	r2, r2
 80111ba:	4293      	cmp	r3, r2
 80111bc:	da10      	bge.n	80111e0 <TSL_linrot_CalcPos+0x36c>
      {
        THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 80111be:	4b51      	ldr	r3, [pc, #324]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80111c0:	695b      	ldr	r3, [r3, #20]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	7a99      	ldrb	r1, [r3, #10]
 80111c6:	4b4f      	ldr	r3, [pc, #316]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80111c8:	695b      	ldr	r3, [r3, #20]
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	460b      	mov	r3, r1
 80111ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80111d2:	b2d9      	uxtb	r1, r3
 80111d4:	7953      	ldrb	r3, [r2, #5]
 80111d6:	f361 0305 	bfi	r3, r1, #0, #6
 80111da:	7153      	strb	r3, [r2, #5]
        return TSL_STATUS_ERROR;
 80111dc:	2302      	movs	r3, #2
 80111de:	e117      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
      }
      else
      {
        THIS_COUNTER_DIR--;
 80111e0:	4b48      	ldr	r3, [pc, #288]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80111e2:	695b      	ldr	r3, [r3, #20]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	795a      	ldrb	r2, [r3, #5]
 80111e8:	f3c2 0205 	ubfx	r2, r2, #0, #6
 80111ec:	b2d2      	uxtb	r2, r2
 80111ee:	323f      	adds	r2, #63	@ 0x3f
 80111f0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80111f4:	b2d1      	uxtb	r1, r2
 80111f6:	795a      	ldrb	r2, [r3, #5]
 80111f8:	f361 0205 	bfi	r2, r1, #0, #6
 80111fc:	715a      	strb	r2, [r3, #5]
        if (!THIS_COUNTER_DIR)
 80111fe:	4b41      	ldr	r3, [pc, #260]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011200:	695b      	ldr	r3, [r3, #20]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	795b      	ldrb	r3, [r3, #5]
 8011206:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801120a:	b2db      	uxtb	r3, r3
 801120c:	2b00      	cmp	r3, #0
 801120e:	d116      	bne.n	801123e <TSL_linrot_CalcPos+0x3ca>
        {
          THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 8011210:	4b3c      	ldr	r3, [pc, #240]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011212:	695b      	ldr	r3, [r3, #20]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	7a99      	ldrb	r1, [r3, #10]
 8011218:	4b3a      	ldr	r3, [pc, #232]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 801121a:	695b      	ldr	r3, [r3, #20]
 801121c:	681a      	ldr	r2, [r3, #0]
 801121e:	460b      	mov	r3, r1
 8011220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011224:	b2d9      	uxtb	r1, r3
 8011226:	7953      	ldrb	r3, [r2, #5]
 8011228:	f361 0305 	bfi	r3, r1, #0, #6
 801122c:	7153      	strb	r3, [r2, #5]
          THIS_DIRECTION = TSL_FALSE;  // New direction accepted: clockwise.
 801122e:	4b35      	ldr	r3, [pc, #212]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011230:	695b      	ldr	r3, [r3, #20]
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	7953      	ldrb	r3, [r2, #5]
 8011236:	f36f 13c7 	bfc	r3, #7, #1
 801123a:	7153      	strb	r3, [r2, #5]
 801123c:	e0c0      	b.n	80113c0 <TSL_linrot_CalcPos+0x54c>
        }
        else
        {
          return TSL_STATUS_ERROR;
 801123e:	2302      	movs	r3, #2
 8011240:	e0e6      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
  }
  else // Clockwise direction... DEFAULT SETTING !
  {

    // Check Direction changed and Position overflow from 0xFF to 0x00 not realized !
    if (((TSL_tPosition_T)new_position < THIS_RAW_POSITION) && ((THIS_RAW_POSITION - (TSL_tPosition_T)new_position) < DIRECTION_CHANGE_MAX_DISPLACEMENT))
 8011242:	897b      	ldrh	r3, [r7, #10]
 8011244:	b2da      	uxtb	r2, r3
 8011246:	4b2f      	ldr	r3, [pc, #188]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011248:	695b      	ldr	r3, [r3, #20]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	785b      	ldrb	r3, [r3, #1]
 801124e:	429a      	cmp	r2, r3
 8011250:	d25a      	bcs.n	8011308 <TSL_linrot_CalcPos+0x494>
 8011252:	4b2c      	ldr	r3, [pc, #176]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	785b      	ldrb	r3, [r3, #1]
 801125a:	461a      	mov	r2, r3
 801125c:	897b      	ldrh	r3, [r7, #10]
 801125e:	b2db      	uxtb	r3, r3
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	2bfe      	cmp	r3, #254	@ 0xfe
 8011264:	dc50      	bgt.n	8011308 <TSL_linrot_CalcPos+0x494>
    {
      if ((new_position + THIS_DIR_CHG_POS) > THIS_RAW_POSITION)
 8011266:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801126a:	4a26      	ldr	r2, [pc, #152]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 801126c:	6952      	ldr	r2, [r2, #20]
 801126e:	6852      	ldr	r2, [r2, #4]
 8011270:	7b12      	ldrb	r2, [r2, #12]
 8011272:	4413      	add	r3, r2
 8011274:	4a23      	ldr	r2, [pc, #140]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011276:	6952      	ldr	r2, [r2, #20]
 8011278:	6812      	ldr	r2, [r2, #0]
 801127a:	7852      	ldrb	r2, [r2, #1]
 801127c:	4293      	cmp	r3, r2
 801127e:	dd10      	ble.n	80112a2 <TSL_linrot_CalcPos+0x42e>
      {
        THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 8011280:	4b20      	ldr	r3, [pc, #128]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 8011282:	695b      	ldr	r3, [r3, #20]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	7a99      	ldrb	r1, [r3, #10]
 8011288:	4b1e      	ldr	r3, [pc, #120]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 801128a:	695b      	ldr	r3, [r3, #20]
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	460b      	mov	r3, r1
 8011290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011294:	b2d9      	uxtb	r1, r3
 8011296:	7953      	ldrb	r3, [r2, #5]
 8011298:	f361 0305 	bfi	r3, r1, #0, #6
 801129c:	7153      	strb	r3, [r2, #5]
        return TSL_STATUS_ERROR;
 801129e:	2302      	movs	r3, #2
 80112a0:	e0b6      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
      }
      else
      {
        THIS_COUNTER_DIR--;
 80112a2:	4b18      	ldr	r3, [pc, #96]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80112a4:	695b      	ldr	r3, [r3, #20]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	795a      	ldrb	r2, [r3, #5]
 80112aa:	f3c2 0205 	ubfx	r2, r2, #0, #6
 80112ae:	b2d2      	uxtb	r2, r2
 80112b0:	323f      	adds	r2, #63	@ 0x3f
 80112b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80112b6:	b2d1      	uxtb	r1, r2
 80112b8:	795a      	ldrb	r2, [r3, #5]
 80112ba:	f361 0205 	bfi	r2, r1, #0, #6
 80112be:	715a      	strb	r2, [r3, #5]
        if (!THIS_COUNTER_DIR)
 80112c0:	4b10      	ldr	r3, [pc, #64]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80112c2:	695b      	ldr	r3, [r3, #20]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	795b      	ldrb	r3, [r3, #5]
 80112c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80112cc:	b2db      	uxtb	r3, r3
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d116      	bne.n	8011300 <TSL_linrot_CalcPos+0x48c>
        {
          THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 80112d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80112d4:	695b      	ldr	r3, [r3, #20]
 80112d6:	685b      	ldr	r3, [r3, #4]
 80112d8:	7a99      	ldrb	r1, [r3, #10]
 80112da:	4b0a      	ldr	r3, [pc, #40]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80112dc:	695b      	ldr	r3, [r3, #20]
 80112de:	681a      	ldr	r2, [r3, #0]
 80112e0:	460b      	mov	r3, r1
 80112e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80112e6:	b2d9      	uxtb	r1, r3
 80112e8:	7953      	ldrb	r3, [r2, #5]
 80112ea:	f361 0305 	bfi	r3, r1, #0, #6
 80112ee:	7153      	strb	r3, [r2, #5]
          THIS_DIRECTION = TSL_TRUE;  // New direction accepted: anticlockwise.
 80112f0:	4b04      	ldr	r3, [pc, #16]	@ (8011304 <TSL_linrot_CalcPos+0x490>)
 80112f2:	695b      	ldr	r3, [r3, #20]
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	7953      	ldrb	r3, [r2, #5]
 80112f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112fc:	7153      	strb	r3, [r2, #5]
 80112fe:	e003      	b.n	8011308 <TSL_linrot_CalcPos+0x494>
        }
        else
        {
          return TSL_STATUS_ERROR;
 8011300:	2302      	movs	r3, #2
 8011302:	e085      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
 8011304:	20029378 	.word	0x20029378
        }
      }
    }

    // Check position overflow from 0x00 to 0xFF to be filtered !
    if (new_position > (uint16_t)(THIS_RAW_POSITION + DIRECTION_CHANGE_MAX_DISPLACEMENT))
 8011308:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801130c:	4a43      	ldr	r2, [pc, #268]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 801130e:	6952      	ldr	r2, [r2, #20]
 8011310:	6812      	ldr	r2, [r2, #0]
 8011312:	7852      	ldrb	r2, [r2, #1]
 8011314:	32ff      	adds	r2, #255	@ 0xff
 8011316:	b292      	uxth	r2, r2
 8011318:	4293      	cmp	r3, r2
 801131a:	dd51      	ble.n	80113c0 <TSL_linrot_CalcPos+0x54c>
    {
      if ((new_position + THIS_DIR_CHG_POS) > (uint16_t)(THIS_RAW_POSITION + DIRECTION_CHANGE_TOTAL_STEPS))
 801131c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011320:	4a3e      	ldr	r2, [pc, #248]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 8011322:	6952      	ldr	r2, [r2, #20]
 8011324:	6852      	ldr	r2, [r2, #4]
 8011326:	7b12      	ldrb	r2, [r2, #12]
 8011328:	4413      	add	r3, r2
 801132a:	4a3c      	ldr	r2, [pc, #240]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 801132c:	6952      	ldr	r2, [r2, #20]
 801132e:	6812      	ldr	r2, [r2, #0]
 8011330:	7852      	ldrb	r2, [r2, #1]
 8011332:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8011336:	b292      	uxth	r2, r2
 8011338:	4293      	cmp	r3, r2
 801133a:	dd10      	ble.n	801135e <TSL_linrot_CalcPos+0x4ea>
      {
        THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 801133c:	4b37      	ldr	r3, [pc, #220]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 801133e:	695b      	ldr	r3, [r3, #20]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	7a99      	ldrb	r1, [r3, #10]
 8011344:	4b35      	ldr	r3, [pc, #212]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 8011346:	695b      	ldr	r3, [r3, #20]
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	460b      	mov	r3, r1
 801134c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011350:	b2d9      	uxtb	r1, r3
 8011352:	7953      	ldrb	r3, [r2, #5]
 8011354:	f361 0305 	bfi	r3, r1, #0, #6
 8011358:	7153      	strb	r3, [r2, #5]
        return TSL_STATUS_ERROR;
 801135a:	2302      	movs	r3, #2
 801135c:	e058      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
      }
      else
      {
        THIS_COUNTER_DIR--;
 801135e:	4b2f      	ldr	r3, [pc, #188]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 8011360:	695b      	ldr	r3, [r3, #20]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	795a      	ldrb	r2, [r3, #5]
 8011366:	f3c2 0205 	ubfx	r2, r2, #0, #6
 801136a:	b2d2      	uxtb	r2, r2
 801136c:	323f      	adds	r2, #63	@ 0x3f
 801136e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011372:	b2d1      	uxtb	r1, r2
 8011374:	795a      	ldrb	r2, [r3, #5]
 8011376:	f361 0205 	bfi	r2, r1, #0, #6
 801137a:	715a      	strb	r2, [r3, #5]
        if (!THIS_COUNTER_DIR)
 801137c:	4b27      	ldr	r3, [pc, #156]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 801137e:	695b      	ldr	r3, [r3, #20]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	795b      	ldrb	r3, [r3, #5]
 8011384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	d116      	bne.n	80113bc <TSL_linrot_CalcPos+0x548>
        {
          THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 801138e:	4b23      	ldr	r3, [pc, #140]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 8011390:	695b      	ldr	r3, [r3, #20]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	7a99      	ldrb	r1, [r3, #10]
 8011396:	4b21      	ldr	r3, [pc, #132]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 8011398:	695b      	ldr	r3, [r3, #20]
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	460b      	mov	r3, r1
 801139e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113a2:	b2d9      	uxtb	r1, r3
 80113a4:	7953      	ldrb	r3, [r2, #5]
 80113a6:	f361 0305 	bfi	r3, r1, #0, #6
 80113aa:	7153      	strb	r3, [r2, #5]
          THIS_DIRECTION = TSL_TRUE;  // New direction accepted: anticlockwise.
 80113ac:	4b1b      	ldr	r3, [pc, #108]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 80113ae:	695b      	ldr	r3, [r3, #20]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	7953      	ldrb	r3, [r2, #5]
 80113b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113b8:	7153      	strb	r3, [r2, #5]
 80113ba:	e001      	b.n	80113c0 <TSL_linrot_CalcPos+0x54c>
        }
        else
        {
          return TSL_STATUS_ERROR;
 80113bc:	2302      	movs	r3, #2
 80113be:	e027      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
  //----------------------------------------------------------------------------

  // The Raw Position is always updated
  // The Position is updated only if different from the previous one

  THIS_RAW_POSITION = (TSL_tPosition_T)new_position;
 80113c0:	4b16      	ldr	r3, [pc, #88]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 80113c2:	695b      	ldr	r3, [r3, #20]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	897a      	ldrh	r2, [r7, #10]
 80113c8:	b2d2      	uxtb	r2, r2
 80113ca:	705a      	strb	r2, [r3, #1]

  u_new_position = (TSL_tPosition_T)((TSL_tPosition_T)new_position >> (RESOLUTION_CALCULATION - THIS_RESOLUTION));
 80113cc:	897b      	ldrh	r3, [r7, #10]
 80113ce:	b2db      	uxtb	r3, r3
 80113d0:	461a      	mov	r2, r3
 80113d2:	4b12      	ldr	r3, [pc, #72]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	7adb      	ldrb	r3, [r3, #11]
 80113da:	f1c3 0308 	rsb	r3, r3, #8
 80113de:	fa42 f303 	asr.w	r3, r2, r3
 80113e2:	71fb      	strb	r3, [r7, #7]

  if (THIS_POSITION == u_new_position)
 80113e4:	4b0d      	ldr	r3, [pc, #52]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 80113e6:	695b      	ldr	r3, [r3, #20]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	789b      	ldrb	r3, [r3, #2]
 80113ec:	79fa      	ldrb	r2, [r7, #7]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d101      	bne.n	80113f6 <TSL_linrot_CalcPos+0x582>
  {
    return TSL_STATUS_ERROR;
 80113f2:	2302      	movs	r3, #2
 80113f4:	e00c      	b.n	8011410 <TSL_linrot_CalcPos+0x59c>
  }
  else
  {
    THIS_POSITION = u_new_position;
 80113f6:	4b09      	ldr	r3, [pc, #36]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 80113f8:	695b      	ldr	r3, [r3, #20]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	79fa      	ldrb	r2, [r7, #7]
 80113fe:	709a      	strb	r2, [r3, #2]
    THIS_POSCHANGE = TSL_STATE_CHANGED;
 8011400:	4b06      	ldr	r3, [pc, #24]	@ (801141c <TSL_linrot_CalcPos+0x5a8>)
 8011402:	695b      	ldr	r3, [r3, #20]
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	7913      	ldrb	r3, [r2, #4]
 8011408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801140c:	7113      	strb	r3, [r2, #4]
    return TSL_STATUS_OK;
 801140e:	2300      	movs	r3, #0
  }

}
 8011410:	4618      	mov	r0, r3
 8011412:	371c      	adds	r7, #28
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	20029378 	.word	0x20029378

08011420 <TSL_linrot_SetStateCalibration>:
  * @brief  Go in Calibration state
  * @param[in] delay Delay before calibration starts (stabilization of noise filter)
  * @retval None
  */
void TSL_linrot_SetStateCalibration(TSL_tCounter_T delay)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	4603      	mov	r3, r0
 8011428:	71fb      	strb	r3, [r7, #7]
  THIS_STATEID = TSL_STATEID_CALIB;
 801142a:	4b1a      	ldr	r3, [pc, #104]	@ (8011494 <TSL_linrot_SetStateCalibration+0x74>)
 801142c:	695b      	ldr	r3, [r3, #20]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2200      	movs	r2, #0
 8011432:	701a      	strb	r2, [r3, #0]
  THIS_CHANGE = TSL_STATE_CHANGED;
 8011434:	4b17      	ldr	r3, [pc, #92]	@ (8011494 <TSL_linrot_SetStateCalibration+0x74>)
 8011436:	695b      	ldr	r3, [r3, #20]
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	7913      	ldrb	r3, [r2, #4]
 801143c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011440:	7113      	strb	r3, [r2, #4]
  TSL_linrot_ProcessCh_All_SetStatus(TSL_OBJ_STATUS_ON);
 8011442:	2003      	movs	r0, #3
 8011444:	f000 fde8 	bl	8012018 <TSL_linrot_ProcessCh_All_SetStatus>

  switch (TSL_Params.NbCalibSamples)
 8011448:	4b13      	ldr	r3, [pc, #76]	@ (8011498 <TSL_linrot_SetStateCalibration+0x78>)
 801144a:	889b      	ldrh	r3, [r3, #4]
 801144c:	2b04      	cmp	r3, #4
 801144e:	d002      	beq.n	8011456 <TSL_linrot_SetStateCalibration+0x36>
 8011450:	2b10      	cmp	r3, #16
 8011452:	d004      	beq.n	801145e <TSL_linrot_SetStateCalibration+0x3e>
 8011454:	e007      	b.n	8011466 <TSL_linrot_SetStateCalibration+0x46>
  {
    case 4:
      CalibDiv = 2;
 8011456:	4b11      	ldr	r3, [pc, #68]	@ (801149c <TSL_linrot_SetStateCalibration+0x7c>)
 8011458:	2202      	movs	r2, #2
 801145a:	801a      	strh	r2, [r3, #0]
      break;
 801145c:	e00a      	b.n	8011474 <TSL_linrot_SetStateCalibration+0x54>
    case 16:
      CalibDiv = 4;
 801145e:	4b0f      	ldr	r3, [pc, #60]	@ (801149c <TSL_linrot_SetStateCalibration+0x7c>)
 8011460:	2204      	movs	r2, #4
 8011462:	801a      	strh	r2, [r3, #0]
      break;
 8011464:	e006      	b.n	8011474 <TSL_linrot_SetStateCalibration+0x54>
    default:
      TSL_Params.NbCalibSamples =  8;
 8011466:	4b0c      	ldr	r3, [pc, #48]	@ (8011498 <TSL_linrot_SetStateCalibration+0x78>)
 8011468:	2208      	movs	r2, #8
 801146a:	809a      	strh	r2, [r3, #4]
      CalibDiv = 3;
 801146c:	4b0b      	ldr	r3, [pc, #44]	@ (801149c <TSL_linrot_SetStateCalibration+0x7c>)
 801146e:	2203      	movs	r2, #3
 8011470:	801a      	strh	r2, [r3, #0]
      break;
 8011472:	bf00      	nop
  }

  // If a noise filter is used, the counter must be initialized to a value
  // different from 0 in order to stabilize the filter.
  THIS_COUNTER_DEB = (TSL_tCounter_T)(delay + (TSL_tCounter_T)TSL_Params.NbCalibSamples);
 8011474:	4b08      	ldr	r3, [pc, #32]	@ (8011498 <TSL_linrot_SetStateCalibration+0x78>)
 8011476:	889b      	ldrh	r3, [r3, #4]
 8011478:	b2d9      	uxtb	r1, r3
 801147a:	4b06      	ldr	r3, [pc, #24]	@ (8011494 <TSL_linrot_SetStateCalibration+0x74>)
 801147c:	695b      	ldr	r3, [r3, #20]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	79fa      	ldrb	r2, [r7, #7]
 8011482:	440a      	add	r2, r1
 8011484:	b2d2      	uxtb	r2, r2
 8011486:	70da      	strb	r2, [r3, #3]
  TSL_linrot_ProcessCh_All_ClearRef();
 8011488:	f000 ff0e 	bl	80122a8 <TSL_linrot_ProcessCh_All_ClearRef>
}
 801148c:	bf00      	nop
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	20029378 	.word	0x20029378
 8011498:	20000184 	.word	0x20000184
 801149c:	20029390 	.word	0x20029390

080114a0 <TSL_linrot_GetStateMask>:
  * @brief  Return the current state mask
  * @param  None
  * @retval State mask
  */
TSL_StateMask_enum_T TSL_linrot_GetStateMask(void)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
  TSL_StateMask_enum_T state_mask = TSL_STATEMASK_UNKNOWN;
 80114a6:	2300      	movs	r3, #0
 80114a8:	71fb      	strb	r3, [r7, #7]

#if TSLPRM_TOTAL_LINROTS > 0
  if ((TSL_Globals.This_Obj->Type == TSL_OBJ_LINEAR) ||
 80114aa:	4b0e      	ldr	r3, [pc, #56]	@ (80114e4 <TSL_linrot_GetStateMask+0x44>)
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	2b20      	cmp	r3, #32
 80114b2:	d004      	beq.n	80114be <TSL_linrot_GetStateMask+0x1e>
      (TSL_Globals.This_Obj->Type == TSL_OBJ_ROTARY))
 80114b4:	4b0b      	ldr	r3, [pc, #44]	@ (80114e4 <TSL_linrot_GetStateMask+0x44>)
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	781b      	ldrb	r3, [r3, #0]
  if ((TSL_Globals.This_Obj->Type == TSL_OBJ_LINEAR) ||
 80114ba:	2b22      	cmp	r3, #34	@ 0x22
 80114bc:	d10a      	bne.n	80114d4 <TSL_linrot_GetStateMask+0x34>
  {
    state_mask = TSL_Globals.This_LinRot->p_SM[THIS_STATEID].StateMask;
 80114be:	4b09      	ldr	r3, [pc, #36]	@ (80114e4 <TSL_linrot_GetStateMask+0x44>)
 80114c0:	695b      	ldr	r3, [r3, #20]
 80114c2:	69da      	ldr	r2, [r3, #28]
 80114c4:	4b07      	ldr	r3, [pc, #28]	@ (80114e4 <TSL_linrot_GetStateMask+0x44>)
 80114c6:	695b      	ldr	r3, [r3, #20]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	00db      	lsls	r3, r3, #3
 80114ce:	4413      	add	r3, r2
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	71fb      	strb	r3, [r7, #7]
  {
    state_mask = TSL_Params.p_LinRotSM[THIS_STATEID].StateMask;
  }
#endif

  return state_mask;
 80114d4:	79fb      	ldrb	r3, [r7, #7]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	370c      	adds	r7, #12
 80114da:	46bd      	mov	sp, r7
 80114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e0:	4770      	bx	lr
 80114e2:	bf00      	nop
 80114e4:	20029378 	.word	0x20029378

080114e8 <TSL_linrot_DebReleaseProxStateProcess>:
  * @brief  Debounce Release processing (previous state = Proximity)
  * @param  None
  * @retval None
  */
void TSL_linrot_DebReleaseProxStateProcess(void)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 80114ec:	f000 fdf0 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 80114f0:	4603      	mov	r3, r0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d105      	bne.n	8011502 <TSL_linrot_DebReleaseProxStateProcess+0x1a>
  {
    THIS_STATEID = TSL_STATEID_PROX; // Go back to the previous state
 80114f6:	4b18      	ldr	r3, [pc, #96]	@ (8011558 <TSL_linrot_DebReleaseProxStateProcess+0x70>)
 80114f8:	695b      	ldr	r3, [r3, #20]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2206      	movs	r2, #6
 80114fe:	701a      	strb	r2, [r3, #0]
        THIS_STATEID = TSL_STATEID_RELEASE;
      }
      // else stay in Debounce Release
    }
  }
}
 8011500:	e028      	b.n	8011554 <TSL_linrot_DebReleaseProxStateProcess+0x6c>
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8011502:	4b15      	ldr	r3, [pc, #84]	@ (8011558 <TSL_linrot_DebReleaseProxStateProcess+0x70>)
 8011504:	695b      	ldr	r3, [r3, #20]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	785b      	ldrb	r3, [r3, #1]
 801150a:	2100      	movs	r1, #0
 801150c:	4618      	mov	r0, r3
 801150e:	f000 fe6b 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011512:	4603      	mov	r3, r0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d105      	bne.n	8011524 <TSL_linrot_DebReleaseProxStateProcess+0x3c>
      THIS_STATEID = TSL_STATEID_PROX; // Go back to the previous state
 8011518:	4b0f      	ldr	r3, [pc, #60]	@ (8011558 <TSL_linrot_DebReleaseProxStateProcess+0x70>)
 801151a:	695b      	ldr	r3, [r3, #20]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2206      	movs	r2, #6
 8011520:	701a      	strb	r2, [r3, #0]
}
 8011522:	e017      	b.n	8011554 <TSL_linrot_DebReleaseProxStateProcess+0x6c>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8011524:	4b0c      	ldr	r3, [pc, #48]	@ (8011558 <TSL_linrot_DebReleaseProxStateProcess+0x70>)
 8011526:	695b      	ldr	r3, [r3, #20]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	78db      	ldrb	r3, [r3, #3]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d006      	beq.n	801153e <TSL_linrot_DebReleaseProxStateProcess+0x56>
 8011530:	4b09      	ldr	r3, [pc, #36]	@ (8011558 <TSL_linrot_DebReleaseProxStateProcess+0x70>)
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	78da      	ldrb	r2, [r3, #3]
 8011538:	3a01      	subs	r2, #1
 801153a:	b2d2      	uxtb	r2, r2
 801153c:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 801153e:	4b06      	ldr	r3, [pc, #24]	@ (8011558 <TSL_linrot_DebReleaseProxStateProcess+0x70>)
 8011540:	695b      	ldr	r3, [r3, #20]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	78db      	ldrb	r3, [r3, #3]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d104      	bne.n	8011554 <TSL_linrot_DebReleaseProxStateProcess+0x6c>
        THIS_STATEID = TSL_STATEID_RELEASE;
 801154a:	4b03      	ldr	r3, [pc, #12]	@ (8011558 <TSL_linrot_DebReleaseProxStateProcess+0x70>)
 801154c:	695b      	ldr	r3, [r3, #20]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2202      	movs	r2, #2
 8011552:	701a      	strb	r2, [r3, #0]
}
 8011554:	bf00      	nop
 8011556:	bd80      	pop	{r7, pc}
 8011558:	20029378 	.word	0x20029378

0801155c <TSL_linrot_DebReleaseDetectStateProcess>:
  * @brief  Debounce Release processing (previous state = Detect)
  * @param  None
  * @retval None
  */
void TSL_linrot_DebReleaseDetectStateProcess(void)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011560:	f000 fdb6 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011564:	4603      	mov	r3, r0
 8011566:	2b00      	cmp	r3, #0
 8011568:	d105      	bne.n	8011576 <TSL_linrot_DebReleaseDetectStateProcess+0x1a>
  {
    THIS_STATEID = TSL_STATEID_DETECT; // Go back to the previous state
 801156a:	4b20      	ldr	r3, [pc, #128]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 801156c:	695b      	ldr	r3, [r3, #20]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	220a      	movs	r2, #10
 8011572:	701a      	strb	r2, [r3, #0]
 8011574:	e039      	b.n	80115ea <TSL_linrot_DebReleaseDetectStateProcess+0x8e>
  }
  else // Acquisition is OK or has NOISE
  {
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8011576:	4b1d      	ldr	r3, [pc, #116]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 8011578:	695b      	ldr	r3, [r3, #20]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	78db      	ldrb	r3, [r3, #3]
 801157e:	2101      	movs	r1, #1
 8011580:	4618      	mov	r0, r3
 8011582:	f000 fe31 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011586:	4603      	mov	r3, r0
 8011588:	2b00      	cmp	r3, #0
 801158a:	d105      	bne.n	8011598 <TSL_linrot_DebReleaseDetectStateProcess+0x3c>
    {
      THIS_STATEID = TSL_STATEID_DETECT;
 801158c:	4b17      	ldr	r3, [pc, #92]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 801158e:	695b      	ldr	r3, [r3, #20]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	220a      	movs	r2, #10
 8011594:	701a      	strb	r2, [r3, #0]
 8011596:	e028      	b.n	80115ea <TSL_linrot_DebReleaseDetectStateProcess+0x8e>
    }
    else
    {
#if TSLPRM_USE_PROX > 0
      if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8011598:	4b14      	ldr	r3, [pc, #80]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 801159a:	695b      	ldr	r3, [r3, #20]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	785b      	ldrb	r3, [r3, #1]
 80115a0:	2100      	movs	r1, #0
 80115a2:	4618      	mov	r0, r3
 80115a4:	f000 fe20 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d105      	bne.n	80115ba <TSL_linrot_DebReleaseDetectStateProcess+0x5e>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 80115ae:	4b0f      	ldr	r3, [pc, #60]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 80115b0:	695b      	ldr	r3, [r3, #20]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2206      	movs	r2, #6
 80115b6:	701a      	strb	r2, [r3, #0]
        return;
 80115b8:	e017      	b.n	80115ea <TSL_linrot_DebReleaseDetectStateProcess+0x8e>
      }
#endif
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80115ba:	4b0c      	ldr	r3, [pc, #48]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 80115bc:	695b      	ldr	r3, [r3, #20]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	78db      	ldrb	r3, [r3, #3]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d006      	beq.n	80115d4 <TSL_linrot_DebReleaseDetectStateProcess+0x78>
 80115c6:	4b09      	ldr	r3, [pc, #36]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	78da      	ldrb	r2, [r3, #3]
 80115ce:	3a01      	subs	r2, #1
 80115d0:	b2d2      	uxtb	r2, r2
 80115d2:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80115d4:	4b05      	ldr	r3, [pc, #20]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 80115d6:	695b      	ldr	r3, [r3, #20]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	78db      	ldrb	r3, [r3, #3]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d104      	bne.n	80115ea <TSL_linrot_DebReleaseDetectStateProcess+0x8e>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 80115e0:	4b02      	ldr	r3, [pc, #8]	@ (80115ec <TSL_linrot_DebReleaseDetectStateProcess+0x90>)
 80115e2:	695b      	ldr	r3, [r3, #20]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2202      	movs	r2, #2
 80115e8:	701a      	strb	r2, [r3, #0]
      }
      // else stay in Debounce Release
    }
  }
}
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	20029378 	.word	0x20029378

080115f0 <TSL_linrot_DebReleaseTouchStateProcess>:
  * Same as Debounce Release Detect processing
  * @param  None
  * @retval None
  */
void TSL_linrot_DebReleaseTouchStateProcess(void)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 80115f4:	f000 fd6c 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d105      	bne.n	801160a <TSL_linrot_DebReleaseTouchStateProcess+0x1a>
  {
    THIS_STATEID = TSL_STATEID_TOUCH; // Go back to the previous state
 80115fe:	4b20      	ldr	r3, [pc, #128]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 8011600:	695b      	ldr	r3, [r3, #20]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	220c      	movs	r2, #12
 8011606:	701a      	strb	r2, [r3, #0]
 8011608:	e039      	b.n	801167e <TSL_linrot_DebReleaseTouchStateProcess+0x8e>
  }
  else // Acquisition is OK or has NOISE
  {
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 801160a:	4b1d      	ldr	r3, [pc, #116]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 801160c:	695b      	ldr	r3, [r3, #20]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	78db      	ldrb	r3, [r3, #3]
 8011612:	2101      	movs	r1, #1
 8011614:	4618      	mov	r0, r3
 8011616:	f000 fde7 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 801161a:	4603      	mov	r3, r0
 801161c:	2b00      	cmp	r3, #0
 801161e:	d105      	bne.n	801162c <TSL_linrot_DebReleaseTouchStateProcess+0x3c>
    {
      THIS_STATEID = TSL_STATEID_TOUCH;
 8011620:	4b17      	ldr	r3, [pc, #92]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 8011622:	695b      	ldr	r3, [r3, #20]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	220c      	movs	r2, #12
 8011628:	701a      	strb	r2, [r3, #0]
 801162a:	e028      	b.n	801167e <TSL_linrot_DebReleaseTouchStateProcess+0x8e>
    }
    else
    {
#if TSLPRM_USE_PROX > 0
      if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 801162c:	4b14      	ldr	r3, [pc, #80]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 801162e:	695b      	ldr	r3, [r3, #20]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	785b      	ldrb	r3, [r3, #1]
 8011634:	2100      	movs	r1, #0
 8011636:	4618      	mov	r0, r3
 8011638:	f000 fdd6 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d105      	bne.n	801164e <TSL_linrot_DebReleaseTouchStateProcess+0x5e>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8011642:	4b0f      	ldr	r3, [pc, #60]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 8011644:	695b      	ldr	r3, [r3, #20]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2206      	movs	r2, #6
 801164a:	701a      	strb	r2, [r3, #0]
        return;
 801164c:	e017      	b.n	801167e <TSL_linrot_DebReleaseTouchStateProcess+0x8e>
      }
#endif
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 801164e:	4b0c      	ldr	r3, [pc, #48]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 8011650:	695b      	ldr	r3, [r3, #20]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	78db      	ldrb	r3, [r3, #3]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d006      	beq.n	8011668 <TSL_linrot_DebReleaseTouchStateProcess+0x78>
 801165a:	4b09      	ldr	r3, [pc, #36]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 801165c:	695b      	ldr	r3, [r3, #20]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	78da      	ldrb	r2, [r3, #3]
 8011662:	3a01      	subs	r2, #1
 8011664:	b2d2      	uxtb	r2, r2
 8011666:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011668:	4b05      	ldr	r3, [pc, #20]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 801166a:	695b      	ldr	r3, [r3, #20]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	78db      	ldrb	r3, [r3, #3]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d104      	bne.n	801167e <TSL_linrot_DebReleaseTouchStateProcess+0x8e>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8011674:	4b02      	ldr	r3, [pc, #8]	@ (8011680 <TSL_linrot_DebReleaseTouchStateProcess+0x90>)
 8011676:	695b      	ldr	r3, [r3, #20]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	2202      	movs	r2, #2
 801167c:	701a      	strb	r2, [r3, #0]
      }
      // else stay in Debounce Release
    }
  }
}
 801167e:	bd80      	pop	{r7, pc}
 8011680:	20029378 	.word	0x20029378

08011684 <TSL_linrot_ReleaseStateProcess>:
  * @brief  Release state processing
  * @param  None
  * @retval None
  */
void TSL_linrot_ReleaseStateProcess(void)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011688:	f000 fd22 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 801168c:	4603      	mov	r3, r0
 801168e:	2b00      	cmp	r3, #0
 8011690:	d119      	bne.n	80116c6 <TSL_linrot_ReleaseStateProcess+0x42>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8011692:	4b43      	ldr	r3, [pc, #268]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011694:	695b      	ldr	r3, [r3, #20]
 8011696:	685a      	ldr	r2, [r3, #4]
 8011698:	4b41      	ldr	r3, [pc, #260]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 801169a:	695b      	ldr	r3, [r3, #20]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	7a52      	ldrb	r2, [r2, #9]
 80116a0:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 80116a2:	4b3f      	ldr	r3, [pc, #252]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 80116a4:	695b      	ldr	r3, [r3, #20]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	78db      	ldrb	r3, [r3, #3]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d105      	bne.n	80116ba <TSL_linrot_ReleaseStateProcess+0x36>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 80116ae:	4b3c      	ldr	r3, [pc, #240]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 80116b0:	695b      	ldr	r3, [r3, #20]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	220d      	movs	r2, #13
 80116b6:	701a      	strb	r2, [r3, #0]
 80116b8:	e071      	b.n	801179e <TSL_linrot_ReleaseStateProcess+0x11a>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_RELEASE;
 80116ba:	4b39      	ldr	r3, [pc, #228]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 80116bc:	695b      	ldr	r3, [r3, #20]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	220f      	movs	r2, #15
 80116c2:	701a      	strb	r2, [r3, #0]
 80116c4:	e06b      	b.n	801179e <TSL_linrot_ReleaseStateProcess+0x11a>
    }
  }
  else // Acquisition is OK or has NOISE
  {
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_DETECTIN_TH, 1) == TSL_STATUS_OK)
 80116c6:	4b36      	ldr	r3, [pc, #216]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 80116c8:	695b      	ldr	r3, [r3, #20]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	789b      	ldrb	r3, [r3, #2]
 80116ce:	2101      	movs	r1, #1
 80116d0:	4618      	mov	r0, r3
 80116d2:	f000 fd59 	bl	8012188 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d119      	bne.n	8011710 <TSL_linrot_ReleaseStateProcess+0x8c>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 80116dc:	4b30      	ldr	r3, [pc, #192]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 80116de:	695b      	ldr	r3, [r3, #20]
 80116e0:	685a      	ldr	r2, [r3, #4]
 80116e2:	4b2f      	ldr	r3, [pc, #188]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 80116e4:	695b      	ldr	r3, [r3, #20]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	79d2      	ldrb	r2, [r2, #7]
 80116ea:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80116ec:	4b2c      	ldr	r3, [pc, #176]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 80116ee:	695b      	ldr	r3, [r3, #20]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	78db      	ldrb	r3, [r3, #3]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d105      	bne.n	8011704 <TSL_linrot_ReleaseStateProcess+0x80>
      {
        THIS_STATEID = TSL_STATEID_DETECT;
 80116f8:	4b29      	ldr	r3, [pc, #164]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 80116fa:	695b      	ldr	r3, [r3, #20]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	220a      	movs	r2, #10
 8011700:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
      }
      return;
 8011702:	e04c      	b.n	801179e <TSL_linrot_ReleaseStateProcess+0x11a>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 8011704:	4b26      	ldr	r3, [pc, #152]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011706:	695b      	ldr	r3, [r3, #20]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	220b      	movs	r2, #11
 801170c:	701a      	strb	r2, [r3, #0]
      return;
 801170e:	e046      	b.n	801179e <TSL_linrot_ReleaseStateProcess+0x11a>
    }

#if TSLPRM_USE_PROX > 0
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_PROXIN_TH, 0) == TSL_STATUS_OK)
 8011710:	4b23      	ldr	r3, [pc, #140]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011712:	695b      	ldr	r3, [r3, #20]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	2100      	movs	r1, #0
 801171a:	4618      	mov	r0, r3
 801171c:	f000 fd34 	bl	8012188 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d119      	bne.n	801175a <TSL_linrot_ReleaseStateProcess+0xd6>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8011726:	4b1e      	ldr	r3, [pc, #120]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011728:	695b      	ldr	r3, [r3, #20]
 801172a:	685a      	ldr	r2, [r3, #4]
 801172c:	4b1c      	ldr	r3, [pc, #112]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 801172e:	695b      	ldr	r3, [r3, #20]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	7992      	ldrb	r2, [r2, #6]
 8011734:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011736:	4b1a      	ldr	r3, [pc, #104]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011738:	695b      	ldr	r3, [r3, #20]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	78db      	ldrb	r3, [r3, #3]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d105      	bne.n	801174e <TSL_linrot_ReleaseStateProcess+0xca>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8011742:	4b17      	ldr	r3, [pc, #92]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011744:	695b      	ldr	r3, [r3, #20]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2206      	movs	r2, #6
 801174a:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_PROX;
      }
      return;
 801174c:	e027      	b.n	801179e <TSL_linrot_ReleaseStateProcess+0x11a>
        THIS_STATEID = TSL_STATEID_DEB_PROX;
 801174e:	4b14      	ldr	r3, [pc, #80]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011750:	695b      	ldr	r3, [r3, #20]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2207      	movs	r2, #7
 8011756:	701a      	strb	r2, [r3, #0]
      return;
 8011758:	e021      	b.n	801179e <TSL_linrot_ReleaseStateProcess+0x11a>
    }
#endif

    // Check delta for re-calibration
    if (TSL_linrot_ProcessCh_One_DeltaBelowEquMinus(THIS_CALIB_TH, 1) == TSL_STATUS_OK)
 801175a:	4b11      	ldr	r3, [pc, #68]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 801175c:	695b      	ldr	r3, [r3, #20]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	791b      	ldrb	r3, [r3, #4]
 8011762:	2101      	movs	r1, #1
 8011764:	4618      	mov	r0, r3
 8011766:	f000 fcdf 	bl	8012128 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus>
 801176a:	4603      	mov	r3, r0
 801176c:	2b00      	cmp	r3, #0
 801176e:	d116      	bne.n	801179e <TSL_linrot_ReleaseStateProcess+0x11a>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_CALIB;
 8011770:	4b0b      	ldr	r3, [pc, #44]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011772:	695b      	ldr	r3, [r3, #20]
 8011774:	685a      	ldr	r2, [r3, #4]
 8011776:	4b0a      	ldr	r3, [pc, #40]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011778:	695b      	ldr	r3, [r3, #20]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	7952      	ldrb	r2, [r2, #5]
 801177e:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011780:	4b07      	ldr	r3, [pc, #28]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011782:	695b      	ldr	r3, [r3, #20]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	78db      	ldrb	r3, [r3, #3]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d103      	bne.n	8011794 <TSL_linrot_ReleaseStateProcess+0x110>
      {
        TSL_linrot_SetStateCalibration(0);
 801178c:	2000      	movs	r0, #0
 801178e:	f7ff fe47 	bl	8011420 <TSL_linrot_SetStateCalibration>
 8011792:	e004      	b.n	801179e <TSL_linrot_ReleaseStateProcess+0x11a>
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_CALIB;
 8011794:	4b02      	ldr	r3, [pc, #8]	@ (80117a0 <TSL_linrot_ReleaseStateProcess+0x11c>)
 8011796:	695b      	ldr	r3, [r3, #20]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	2201      	movs	r2, #1
 801179c:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	20029378 	.word	0x20029378

080117a4 <TSL_linrot_DebCalibrationStateProcess>:
  * @brief  Debounce Calibration processing (previous state = Release)
  * @param  None
  * @retval None
  */
void TSL_linrot_DebCalibrationStateProcess(void)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 80117a8:	f000 fc92 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d105      	bne.n	80117be <TSL_linrot_DebCalibrationStateProcess+0x1a>
  {
    THIS_STATEID = TSL_STATEID_RELEASE; // Go back to the previous state
 80117b2:	4b17      	ldr	r3, [pc, #92]	@ (8011810 <TSL_linrot_DebCalibrationStateProcess+0x6c>)
 80117b4:	695b      	ldr	r3, [r3, #20]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2202      	movs	r2, #2
 80117ba:	701a      	strb	r2, [r3, #0]
    else // Go back to previous state
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
    }
  }
}
 80117bc:	e026      	b.n	801180c <TSL_linrot_DebCalibrationStateProcess+0x68>
    if (TSL_linrot_ProcessCh_One_DeltaBelowEquMinus(THIS_CALIB_TH, 1) == TSL_STATUS_OK) // Still below recalibration threshold
 80117be:	4b14      	ldr	r3, [pc, #80]	@ (8011810 <TSL_linrot_DebCalibrationStateProcess+0x6c>)
 80117c0:	695b      	ldr	r3, [r3, #20]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	791b      	ldrb	r3, [r3, #4]
 80117c6:	2101      	movs	r1, #1
 80117c8:	4618      	mov	r0, r3
 80117ca:	f000 fcad 	bl	8012128 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus>
 80117ce:	4603      	mov	r3, r0
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d116      	bne.n	8011802 <TSL_linrot_DebCalibrationStateProcess+0x5e>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80117d4:	4b0e      	ldr	r3, [pc, #56]	@ (8011810 <TSL_linrot_DebCalibrationStateProcess+0x6c>)
 80117d6:	695b      	ldr	r3, [r3, #20]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	78db      	ldrb	r3, [r3, #3]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d006      	beq.n	80117ee <TSL_linrot_DebCalibrationStateProcess+0x4a>
 80117e0:	4b0b      	ldr	r3, [pc, #44]	@ (8011810 <TSL_linrot_DebCalibrationStateProcess+0x6c>)
 80117e2:	695b      	ldr	r3, [r3, #20]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	78da      	ldrb	r2, [r3, #3]
 80117e8:	3a01      	subs	r2, #1
 80117ea:	b2d2      	uxtb	r2, r2
 80117ec:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80117ee:	4b08      	ldr	r3, [pc, #32]	@ (8011810 <TSL_linrot_DebCalibrationStateProcess+0x6c>)
 80117f0:	695b      	ldr	r3, [r3, #20]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	78db      	ldrb	r3, [r3, #3]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d108      	bne.n	801180c <TSL_linrot_DebCalibrationStateProcess+0x68>
        TSL_linrot_SetStateCalibration(0);
 80117fa:	2000      	movs	r0, #0
 80117fc:	f7ff fe10 	bl	8011420 <TSL_linrot_SetStateCalibration>
}
 8011800:	e004      	b.n	801180c <TSL_linrot_DebCalibrationStateProcess+0x68>
      THIS_STATEID = TSL_STATEID_RELEASE;
 8011802:	4b03      	ldr	r3, [pc, #12]	@ (8011810 <TSL_linrot_DebCalibrationStateProcess+0x6c>)
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2202      	movs	r2, #2
 801180a:	701a      	strb	r2, [r3, #0]
}
 801180c:	bf00      	nop
 801180e:	bd80      	pop	{r7, pc}
 8011810:	20029378 	.word	0x20029378

08011814 <TSL_linrot_CalibrationStateProcess>:
  * @brief  Calibration state processing
  * @param  None
  * @retval None
  */
void TSL_linrot_CalibrationStateProcess(void)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
    THIS_COUNTER_DEB--;
    return; // Skip the sample
  }
#endif

  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 801181a:	f000 fc59 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d119      	bne.n	8011858 <TSL_linrot_CalibrationStateProcess+0x44>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8011824:	4b4e      	ldr	r3, [pc, #312]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 8011826:	695b      	ldr	r3, [r3, #20]
 8011828:	685a      	ldr	r2, [r3, #4]
 801182a:	4b4d      	ldr	r3, [pc, #308]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 801182c:	695b      	ldr	r3, [r3, #20]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	7a52      	ldrb	r2, [r2, #9]
 8011832:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8011834:	4b4a      	ldr	r3, [pc, #296]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 8011836:	695b      	ldr	r3, [r3, #20]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	78db      	ldrb	r3, [r3, #3]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d105      	bne.n	801184c <TSL_linrot_CalibrationStateProcess+0x38>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8011840:	4b47      	ldr	r3, [pc, #284]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 8011842:	695b      	ldr	r3, [r3, #20]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	220d      	movs	r2, #13
 8011848:	701a      	strb	r2, [r3, #0]
 801184a:	e086      	b.n	801195a <TSL_linrot_CalibrationStateProcess+0x146>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_CALIB;
 801184c:	4b44      	ldr	r3, [pc, #272]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 801184e:	695b      	ldr	r3, [r3, #20]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	220e      	movs	r2, #14
 8011854:	701a      	strb	r2, [r3, #0]
 8011856:	e080      	b.n	801195a <TSL_linrot_CalibrationStateProcess+0x146>
    }
  }
  else // Acquisition is OK or has NOISE
  {
    // Process all channels
    p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8011858:	4b41      	ldr	r3, [pc, #260]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 801185a:	695b      	ldr	r3, [r3, #20]
 801185c:	689b      	ldr	r3, [r3, #8]
 801185e:	60bb      	str	r3, [r7, #8]

    for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8011860:	2300      	movs	r3, #0
 8011862:	73fb      	strb	r3, [r7, #15]
 8011864:	e036      	b.n	80118d4 <TSL_linrot_CalibrationStateProcess+0xc0>
    {

      // Get the new measure or Calculate it
#if TSLPRM_USE_MEAS > 0
      new_meas = p_Ch->Meas;
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	895b      	ldrh	r3, [r3, #10]
 801186a:	80fb      	strh	r3, [r7, #6]
#else // Calculate it
      new_meas = TSL_acq_ComputeMeas(p_Ch->Ref, p_Ch->Delta);
#endif

      // Verify the first Reference value
      if (THIS_COUNTER_DEB == (TSL_tCounter_T)TSL_Params.NbCalibSamples)
 801186c:	4b3c      	ldr	r3, [pc, #240]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 801186e:	695b      	ldr	r3, [r3, #20]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	78da      	ldrb	r2, [r3, #3]
 8011874:	4b3b      	ldr	r3, [pc, #236]	@ (8011964 <TSL_linrot_CalibrationStateProcess+0x150>)
 8011876:	889b      	ldrh	r3, [r3, #4]
 8011878:	b2db      	uxtb	r3, r3
 801187a:	429a      	cmp	r2, r3
 801187c:	d10f      	bne.n	801189e <TSL_linrot_CalibrationStateProcess+0x8a>
      {
        if (TSL_acq_TestFirstReferenceIsValid(p_Ch, new_meas))
 801187e:	88fb      	ldrh	r3, [r7, #6]
 8011880:	4619      	mov	r1, r3
 8011882:	68b8      	ldr	r0, [r7, #8]
 8011884:	f7ff fa42 	bl	8010d0c <TSL_acq_TestFirstReferenceIsValid>
 8011888:	4603      	mov	r3, r0
 801188a:	2b00      	cmp	r3, #0
 801188c:	d003      	beq.n	8011896 <TSL_linrot_CalibrationStateProcess+0x82>
        {
          p_Ch->Ref = new_meas;
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	88fa      	ldrh	r2, [r7, #6]
 8011892:	809a      	strh	r2, [r3, #4]
 8011894:	e018      	b.n	80118c8 <TSL_linrot_CalibrationStateProcess+0xb4>
        }
        else
        {
          p_Ch->Ref = 0;
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	2200      	movs	r2, #0
 801189a:	809a      	strh	r2, [r3, #4]
          return;
 801189c:	e05d      	b.n	801195a <TSL_linrot_CalibrationStateProcess+0x146>
        }
      }
      else
      {
        // Add the measure in temporary Reference
        p_Ch->Ref += new_meas;
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	889a      	ldrh	r2, [r3, #4]
 80118a2:	88fb      	ldrh	r3, [r7, #6]
 80118a4:	4413      	add	r3, r2
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	809a      	strh	r2, [r3, #4]

        // Check reference overflow
        if (p_Ch->Ref < new_meas)
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	889b      	ldrh	r3, [r3, #4]
 80118b0:	88fa      	ldrh	r2, [r7, #6]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d908      	bls.n	80118c8 <TSL_linrot_CalibrationStateProcess+0xb4>
        {
          p_Ch->Ref = 0; // Suppress the bad reference
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2200      	movs	r2, #0
 80118ba:	809a      	strh	r2, [r3, #4]
          THIS_STATEID = TSL_STATEID_ERROR;
 80118bc:	4b28      	ldr	r3, [pc, #160]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 80118be:	695b      	ldr	r3, [r3, #20]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	220d      	movs	r2, #13
 80118c4:	701a      	strb	r2, [r3, #0]
          return;
 80118c6:	e048      	b.n	801195a <TSL_linrot_CalibrationStateProcess+0x146>
        }
      }

      p_Ch++; // Next channel
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	330c      	adds	r3, #12
 80118cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80118ce:	7bfb      	ldrb	r3, [r7, #15]
 80118d0:	3301      	adds	r3, #1
 80118d2:	73fb      	strb	r3, [r7, #15]
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	4b21      	ldr	r3, [pc, #132]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 80118da:	695b      	ldr	r3, [r3, #20]
 80118dc:	899b      	ldrh	r3, [r3, #12]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d3c1      	bcc.n	8011866 <TSL_linrot_CalibrationStateProcess+0x52>
    }

    // Check that we have all the needed measurements
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80118e2:	4b1f      	ldr	r3, [pc, #124]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 80118e4:	695b      	ldr	r3, [r3, #20]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	78db      	ldrb	r3, [r3, #3]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d006      	beq.n	80118fc <TSL_linrot_CalibrationStateProcess+0xe8>
 80118ee:	4b1c      	ldr	r3, [pc, #112]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	78da      	ldrb	r2, [r3, #3]
 80118f6:	3a01      	subs	r2, #1
 80118f8:	b2d2      	uxtb	r2, r2
 80118fa:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 80118fc:	4b18      	ldr	r3, [pc, #96]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 80118fe:	695b      	ldr	r3, [r3, #20]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	78db      	ldrb	r3, [r3, #3]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d128      	bne.n	801195a <TSL_linrot_CalibrationStateProcess+0x146>
    {
      // Process all channels
      p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8011908:	4b15      	ldr	r3, [pc, #84]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 801190a:	695b      	ldr	r3, [r3, #20]
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	60bb      	str	r3, [r7, #8]
      for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8011910:	2300      	movs	r3, #0
 8011912:	73fb      	strb	r3, [r7, #15]
 8011914:	e015      	b.n	8011942 <TSL_linrot_CalibrationStateProcess+0x12e>
      {
        // Divide temporary Reference by the number of samples
        p_Ch->Ref >>= CalibDiv;
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	889b      	ldrh	r3, [r3, #4]
 801191a:	461a      	mov	r2, r3
 801191c:	4b12      	ldr	r3, [pc, #72]	@ (8011968 <TSL_linrot_CalibrationStateProcess+0x154>)
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	fa42 f303 	asr.w	r3, r2, r3
 8011924:	b29a      	uxth	r2, r3
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	809a      	strh	r2, [r3, #4]
        p_Ch->RefRest = 0;
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	2200      	movs	r2, #0
 801192e:	719a      	strb	r2, [r3, #6]
        p_Ch->Delta = 0;
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	2200      	movs	r2, #0
 8011934:	811a      	strh	r2, [r3, #8]
        p_Ch++; // Next channel
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	330c      	adds	r3, #12
 801193a:	60bb      	str	r3, [r7, #8]
      for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 801193c:	7bfb      	ldrb	r3, [r7, #15]
 801193e:	3301      	adds	r3, #1
 8011940:	73fb      	strb	r3, [r7, #15]
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	b29a      	uxth	r2, r3
 8011946:	4b06      	ldr	r3, [pc, #24]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 8011948:	695b      	ldr	r3, [r3, #20]
 801194a:	899b      	ldrh	r3, [r3, #12]
 801194c:	429a      	cmp	r2, r3
 801194e:	d3e2      	bcc.n	8011916 <TSL_linrot_CalibrationStateProcess+0x102>
      }
      THIS_STATEID = TSL_STATEID_RELEASE;
 8011950:	4b03      	ldr	r3, [pc, #12]	@ (8011960 <TSL_linrot_CalibrationStateProcess+0x14c>)
 8011952:	695b      	ldr	r3, [r3, #20]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2202      	movs	r2, #2
 8011958:	701a      	strb	r2, [r3, #0]
    }
  }
}
 801195a:	3710      	adds	r7, #16
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	20029378 	.word	0x20029378
 8011964:	20000184 	.word	0x20000184
 8011968:	20029390 	.word	0x20029390

0801196c <TSL_linrot_DebProxStateProcess>:
  * @brief  Debounce Proximity processing (previous state = Release)
  * @param  None
  * @retval None
  */
void TSL_linrot_DebProxStateProcess(void)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011970:	f000 fbae 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011974:	4603      	mov	r3, r0
 8011976:	2b00      	cmp	r3, #0
 8011978:	d105      	bne.n	8011986 <TSL_linrot_DebProxStateProcess+0x1a>
  {
    THIS_STATEID = TSL_STATEID_RELEASE;
 801197a:	4b2a      	ldr	r3, [pc, #168]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 801197c:	695b      	ldr	r3, [r3, #20]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2202      	movs	r2, #2
 8011982:	701a      	strb	r2, [r3, #0]
 8011984:	e04d      	b.n	8011a22 <TSL_linrot_DebProxStateProcess+0xb6>
  }
  else // Acquisition is OK or has NOISE
  {
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_DETECTIN_TH, 1) == TSL_STATUS_OK)
 8011986:	4b27      	ldr	r3, [pc, #156]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 8011988:	695b      	ldr	r3, [r3, #20]
 801198a:	685b      	ldr	r3, [r3, #4]
 801198c:	789b      	ldrb	r3, [r3, #2]
 801198e:	2101      	movs	r1, #1
 8011990:	4618      	mov	r0, r3
 8011992:	f000 fbf9 	bl	8012188 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 8011996:	4603      	mov	r3, r0
 8011998:	2b00      	cmp	r3, #0
 801199a:	d119      	bne.n	80119d0 <TSL_linrot_DebProxStateProcess+0x64>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 801199c:	4b21      	ldr	r3, [pc, #132]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 801199e:	695b      	ldr	r3, [r3, #20]
 80119a0:	685a      	ldr	r2, [r3, #4]
 80119a2:	4b20      	ldr	r3, [pc, #128]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 80119a4:	695b      	ldr	r3, [r3, #20]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	79d2      	ldrb	r2, [r2, #7]
 80119aa:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80119ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 80119ae:	695b      	ldr	r3, [r3, #20]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	78db      	ldrb	r3, [r3, #3]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d105      	bne.n	80119c4 <TSL_linrot_DebProxStateProcess+0x58>
      {
        THIS_STATEID = TSL_STATEID_DETECT;
 80119b8:	4b1a      	ldr	r3, [pc, #104]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 80119ba:	695b      	ldr	r3, [r3, #20]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	220a      	movs	r2, #10
 80119c0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
      }
      return;
 80119c2:	e02e      	b.n	8011a22 <TSL_linrot_DebProxStateProcess+0xb6>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 80119c4:	4b17      	ldr	r3, [pc, #92]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 80119c6:	695b      	ldr	r3, [r3, #20]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	220b      	movs	r2, #11
 80119cc:	701a      	strb	r2, [r3, #0]
      return;
 80119ce:	e028      	b.n	8011a22 <TSL_linrot_DebProxStateProcess+0xb6>
    }

    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_PROXIN_TH, 0) == TSL_STATUS_OK)
 80119d0:	4b14      	ldr	r3, [pc, #80]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 80119d2:	695b      	ldr	r3, [r3, #20]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	2100      	movs	r1, #0
 80119da:	4618      	mov	r0, r3
 80119dc:	f000 fbd4 	bl	8012188 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d118      	bne.n	8011a18 <TSL_linrot_DebProxStateProcess+0xac>
    {
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80119e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 80119e8:	695b      	ldr	r3, [r3, #20]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	78db      	ldrb	r3, [r3, #3]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d006      	beq.n	8011a00 <TSL_linrot_DebProxStateProcess+0x94>
 80119f2:	4b0c      	ldr	r3, [pc, #48]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 80119f4:	695b      	ldr	r3, [r3, #20]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	78da      	ldrb	r2, [r3, #3]
 80119fa:	3a01      	subs	r2, #1
 80119fc:	b2d2      	uxtb	r2, r2
 80119fe:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011a00:	4b08      	ldr	r3, [pc, #32]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 8011a02:	695b      	ldr	r3, [r3, #20]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	78db      	ldrb	r3, [r3, #3]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d10a      	bne.n	8011a22 <TSL_linrot_DebProxStateProcess+0xb6>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8011a0c:	4b05      	ldr	r3, [pc, #20]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 8011a0e:	695b      	ldr	r3, [r3, #20]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2206      	movs	r2, #6
 8011a14:	701a      	strb	r2, [r3, #0]
 8011a16:	e004      	b.n	8011a22 <TSL_linrot_DebProxStateProcess+0xb6>
      }
      // else stay in Debounce Proximity
    }
    else
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
 8011a18:	4b02      	ldr	r3, [pc, #8]	@ (8011a24 <TSL_linrot_DebProxStateProcess+0xb8>)
 8011a1a:	695b      	ldr	r3, [r3, #20]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2202      	movs	r2, #2
 8011a20:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	20029378 	.word	0x20029378

08011a28 <TSL_linrot_DebProxDetectStateProcess>:
  * @brief  Debounce Proximity processing (previous state = Detect)
  * @param  None
  * @retval None
  */
void TSL_linrot_DebProxDetectStateProcess(void)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011a2c:	f000 fb50 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d105      	bne.n	8011a42 <TSL_linrot_DebProxDetectStateProcess+0x1a>
  {
    THIS_STATEID = TSL_STATEID_DETECT;
 8011a36:	4b2a      	ldr	r3, [pc, #168]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011a38:	695b      	ldr	r3, [r3, #20]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	220a      	movs	r2, #10
 8011a3e:	701a      	strb	r2, [r3, #0]
 8011a40:	e04d      	b.n	8011ade <TSL_linrot_DebProxDetectStateProcess+0xb6>
  }
  else // Acquisition is OK or has NOISE
  {
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8011a42:	4b27      	ldr	r3, [pc, #156]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011a44:	695b      	ldr	r3, [r3, #20]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	78db      	ldrb	r3, [r3, #3]
 8011a4a:	2101      	movs	r1, #1
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f000 fbcb 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d105      	bne.n	8011a64 <TSL_linrot_DebProxDetectStateProcess+0x3c>
    {
      THIS_STATEID = TSL_STATEID_DETECT;
 8011a58:	4b21      	ldr	r3, [pc, #132]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011a5a:	695b      	ldr	r3, [r3, #20]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	220a      	movs	r2, #10
 8011a60:	701a      	strb	r2, [r3, #0]
      return;
 8011a62:	e03c      	b.n	8011ade <TSL_linrot_DebProxDetectStateProcess+0xb6>
    }

    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8011a64:	4b1e      	ldr	r3, [pc, #120]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011a66:	695b      	ldr	r3, [r3, #20]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	785b      	ldrb	r3, [r3, #1]
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f000 fbba 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d118      	bne.n	8011aac <TSL_linrot_DebProxDetectStateProcess+0x84>
    {
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8011a7a:	4b19      	ldr	r3, [pc, #100]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011a7c:	695b      	ldr	r3, [r3, #20]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	78db      	ldrb	r3, [r3, #3]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d006      	beq.n	8011a94 <TSL_linrot_DebProxDetectStateProcess+0x6c>
 8011a86:	4b16      	ldr	r3, [pc, #88]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011a88:	695b      	ldr	r3, [r3, #20]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	78da      	ldrb	r2, [r3, #3]
 8011a8e:	3a01      	subs	r2, #1
 8011a90:	b2d2      	uxtb	r2, r2
 8011a92:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011a94:	4b12      	ldr	r3, [pc, #72]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011a96:	695b      	ldr	r3, [r3, #20]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	78db      	ldrb	r3, [r3, #3]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d11e      	bne.n	8011ade <TSL_linrot_DebProxDetectStateProcess+0xb6>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8011aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011aa2:	695b      	ldr	r3, [r3, #20]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2206      	movs	r2, #6
 8011aa8:	701a      	strb	r2, [r3, #0]
 8011aaa:	e018      	b.n	8011ade <TSL_linrot_DebProxDetectStateProcess+0xb6>
      }
      // else stay in Debounce Proximity
    }
    else
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8011aac:	4b0c      	ldr	r3, [pc, #48]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011aae:	695b      	ldr	r3, [r3, #20]
 8011ab0:	685a      	ldr	r2, [r3, #4]
 8011ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011ab4:	695b      	ldr	r3, [r3, #20]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	7a12      	ldrb	r2, [r2, #8]
 8011aba:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011abc:	4b08      	ldr	r3, [pc, #32]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011abe:	695b      	ldr	r3, [r3, #20]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	78db      	ldrb	r3, [r3, #3]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d105      	bne.n	8011ad4 <TSL_linrot_DebProxDetectStateProcess+0xac>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8011ac8:	4b05      	ldr	r3, [pc, #20]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011aca:	695b      	ldr	r3, [r3, #20]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2202      	movs	r2, #2
 8011ad0:	701a      	strb	r2, [r3, #0]
 8011ad2:	e004      	b.n	8011ade <TSL_linrot_DebProxDetectStateProcess+0xb6>
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8011ad4:	4b02      	ldr	r3, [pc, #8]	@ (8011ae0 <TSL_linrot_DebProxDetectStateProcess+0xb8>)
 8011ad6:	695b      	ldr	r3, [r3, #20]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2204      	movs	r2, #4
 8011adc:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	20029378 	.word	0x20029378

08011ae4 <TSL_linrot_DebProxTouchStateProcess>:
  * @brief  Debounce Proximity processing (previous state = Touch)
  * @param  None
  * @retval None
  */
void TSL_linrot_DebProxTouchStateProcess(void)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011ae8:	f000 faf2 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d105      	bne.n	8011afe <TSL_linrot_DebProxTouchStateProcess+0x1a>
  {
    THIS_STATEID = TSL_STATEID_TOUCH;
 8011af2:	4b2a      	ldr	r3, [pc, #168]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011af4:	695b      	ldr	r3, [r3, #20]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	220c      	movs	r2, #12
 8011afa:	701a      	strb	r2, [r3, #0]
 8011afc:	e04d      	b.n	8011b9a <TSL_linrot_DebProxTouchStateProcess+0xb6>
  }
  else // Acquisition is OK or has NOISE
  {
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8011afe:	4b27      	ldr	r3, [pc, #156]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b00:	695b      	ldr	r3, [r3, #20]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	78db      	ldrb	r3, [r3, #3]
 8011b06:	2101      	movs	r1, #1
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f000 fb6d 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d105      	bne.n	8011b20 <TSL_linrot_DebProxTouchStateProcess+0x3c>
    {
      THIS_STATEID = TSL_STATEID_TOUCH;
 8011b14:	4b21      	ldr	r3, [pc, #132]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b16:	695b      	ldr	r3, [r3, #20]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	220c      	movs	r2, #12
 8011b1c:	701a      	strb	r2, [r3, #0]
      return;
 8011b1e:	e03c      	b.n	8011b9a <TSL_linrot_DebProxTouchStateProcess+0xb6>
    }

    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8011b20:	4b1e      	ldr	r3, [pc, #120]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b22:	695b      	ldr	r3, [r3, #20]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	785b      	ldrb	r3, [r3, #1]
 8011b28:	2100      	movs	r1, #0
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f000 fb5c 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011b30:	4603      	mov	r3, r0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d118      	bne.n	8011b68 <TSL_linrot_DebProxTouchStateProcess+0x84>
    {
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8011b36:	4b19      	ldr	r3, [pc, #100]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b38:	695b      	ldr	r3, [r3, #20]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	78db      	ldrb	r3, [r3, #3]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d006      	beq.n	8011b50 <TSL_linrot_DebProxTouchStateProcess+0x6c>
 8011b42:	4b16      	ldr	r3, [pc, #88]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b44:	695b      	ldr	r3, [r3, #20]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	78da      	ldrb	r2, [r3, #3]
 8011b4a:	3a01      	subs	r2, #1
 8011b4c:	b2d2      	uxtb	r2, r2
 8011b4e:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011b50:	4b12      	ldr	r3, [pc, #72]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b52:	695b      	ldr	r3, [r3, #20]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	78db      	ldrb	r3, [r3, #3]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d11e      	bne.n	8011b9a <TSL_linrot_DebProxTouchStateProcess+0xb6>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8011b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b5e:	695b      	ldr	r3, [r3, #20]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	2206      	movs	r2, #6
 8011b64:	701a      	strb	r2, [r3, #0]
 8011b66:	e018      	b.n	8011b9a <TSL_linrot_DebProxTouchStateProcess+0xb6>
      }
      // else stay in Debounce Proximity
    }
    else
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8011b68:	4b0c      	ldr	r3, [pc, #48]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b6a:	695b      	ldr	r3, [r3, #20]
 8011b6c:	685a      	ldr	r2, [r3, #4]
 8011b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b70:	695b      	ldr	r3, [r3, #20]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	7a12      	ldrb	r2, [r2, #8]
 8011b76:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011b78:	4b08      	ldr	r3, [pc, #32]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b7a:	695b      	ldr	r3, [r3, #20]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	78db      	ldrb	r3, [r3, #3]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d105      	bne.n	8011b90 <TSL_linrot_DebProxTouchStateProcess+0xac>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8011b84:	4b05      	ldr	r3, [pc, #20]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b86:	695b      	ldr	r3, [r3, #20]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2202      	movs	r2, #2
 8011b8c:	701a      	strb	r2, [r3, #0]
 8011b8e:	e004      	b.n	8011b9a <TSL_linrot_DebProxTouchStateProcess+0xb6>
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8011b90:	4b02      	ldr	r3, [pc, #8]	@ (8011b9c <TSL_linrot_DebProxTouchStateProcess+0xb8>)
 8011b92:	695b      	ldr	r3, [r3, #20]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	2205      	movs	r2, #5
 8011b98:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	20029378 	.word	0x20029378

08011ba0 <TSL_linrot_ProxStateProcess>:
  * @brief  Proximity state processing
  * @param  None
  * @retval None
  */
void TSL_linrot_ProxStateProcess(void)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	af00      	add	r7, sp, #0
#if TSLPRM_DTO > 0
  TSL_tTick_sec_T tick_detected;
#endif

  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011ba4:	f000 fa94 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d119      	bne.n	8011be2 <TSL_linrot_ProxStateProcess+0x42>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8011bae:	4b32      	ldr	r3, [pc, #200]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011bb0:	695b      	ldr	r3, [r3, #20]
 8011bb2:	685a      	ldr	r2, [r3, #4]
 8011bb4:	4b30      	ldr	r3, [pc, #192]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011bb6:	695b      	ldr	r3, [r3, #20]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	7a52      	ldrb	r2, [r2, #9]
 8011bbc:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8011bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011bc0:	695b      	ldr	r3, [r3, #20]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	78db      	ldrb	r3, [r3, #3]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d105      	bne.n	8011bd6 <TSL_linrot_ProxStateProcess+0x36>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8011bca:	4b2b      	ldr	r3, [pc, #172]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011bcc:	695b      	ldr	r3, [r3, #20]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	220d      	movs	r2, #13
 8011bd2:	701a      	strb	r2, [r3, #0]
 8011bd4:	e04f      	b.n	8011c76 <TSL_linrot_ProxStateProcess+0xd6>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_PROX;
 8011bd6:	4b28      	ldr	r3, [pc, #160]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011bd8:	695b      	ldr	r3, [r3, #20]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2210      	movs	r2, #16
 8011bde:	701a      	strb	r2, [r3, #0]
 8011be0:	e049      	b.n	8011c76 <TSL_linrot_ProxStateProcess+0xd6>
    }
  }
  else // Acquisition is OK or has NOISE
  {
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_DETECTIN_TH, 1) == TSL_STATUS_OK)
 8011be2:	4b25      	ldr	r3, [pc, #148]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011be4:	695b      	ldr	r3, [r3, #20]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	789b      	ldrb	r3, [r3, #2]
 8011bea:	2101      	movs	r1, #1
 8011bec:	4618      	mov	r0, r3
 8011bee:	f000 facb 	bl	8012188 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d119      	bne.n	8011c2c <TSL_linrot_ProxStateProcess+0x8c>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 8011bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011bfa:	695b      	ldr	r3, [r3, #20]
 8011bfc:	685a      	ldr	r2, [r3, #4]
 8011bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c00:	695b      	ldr	r3, [r3, #20]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	79d2      	ldrb	r2, [r2, #7]
 8011c06:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011c08:	4b1b      	ldr	r3, [pc, #108]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c0a:	695b      	ldr	r3, [r3, #20]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	78db      	ldrb	r3, [r3, #3]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d105      	bne.n	8011c20 <TSL_linrot_ProxStateProcess+0x80>
      {
        THIS_STATEID = TSL_STATEID_DETECT;
 8011c14:	4b18      	ldr	r3, [pc, #96]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c16:	695b      	ldr	r3, [r3, #20]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	220a      	movs	r2, #10
 8011c1c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
      }
      return;
 8011c1e:	e02a      	b.n	8011c76 <TSL_linrot_ProxStateProcess+0xd6>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 8011c20:	4b15      	ldr	r3, [pc, #84]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c22:	695b      	ldr	r3, [r3, #20]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	220b      	movs	r2, #11
 8011c28:	701a      	strb	r2, [r3, #0]
      return;
 8011c2a:	e024      	b.n	8011c76 <TSL_linrot_ProxStateProcess+0xd6>
    }

    if (TSL_linrot_ProcessCh_All_DeltaBelowEqu(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8011c2c:	4b12      	ldr	r3, [pc, #72]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c2e:	695b      	ldr	r3, [r3, #20]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	785b      	ldrb	r3, [r3, #1]
 8011c34:	2100      	movs	r1, #0
 8011c36:	4618      	mov	r0, r3
 8011c38:	f000 fb06 	bl	8012248 <TSL_linrot_ProcessCh_All_DeltaBelowEqu>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d119      	bne.n	8011c76 <TSL_linrot_ProxStateProcess+0xd6>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8011c42:	4b0d      	ldr	r3, [pc, #52]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c44:	695b      	ldr	r3, [r3, #20]
 8011c46:	685a      	ldr	r2, [r3, #4]
 8011c48:	4b0b      	ldr	r3, [pc, #44]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c4a:	695b      	ldr	r3, [r3, #20]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	7a12      	ldrb	r2, [r2, #8]
 8011c50:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011c52:	4b09      	ldr	r3, [pc, #36]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c54:	695b      	ldr	r3, [r3, #20]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	78db      	ldrb	r3, [r3, #3]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d105      	bne.n	8011c6a <TSL_linrot_ProxStateProcess+0xca>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8011c5e:	4b06      	ldr	r3, [pc, #24]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c60:	695b      	ldr	r3, [r3, #20]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	2202      	movs	r2, #2
 8011c66:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_PROX;
      }
      return;
 8011c68:	e004      	b.n	8011c74 <TSL_linrot_ProxStateProcess+0xd4>
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_PROX;
 8011c6a:	4b03      	ldr	r3, [pc, #12]	@ (8011c78 <TSL_linrot_ProxStateProcess+0xd8>)
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2203      	movs	r2, #3
 8011c72:	701a      	strb	r2, [r3, #0]
      return;
 8011c74:	bf00      	nop
      }
    }
#endif

  }
}
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	20029378 	.word	0x20029378

08011c7c <TSL_linrot_DebDetectStateProcess>:
  * @brief  Debounce Detect processing (previous state = Release or Proximity)
  * @param  None
  * @retval None
  */
void TSL_linrot_DebDetectStateProcess(void)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	af00      	add	r7, sp, #0
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011c80:	f000 fa26 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d105      	bne.n	8011c96 <TSL_linrot_DebDetectStateProcess+0x1a>
  {
    THIS_STATEID = TSL_STATEID_RELEASE;
 8011c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011c8c:	695b      	ldr	r3, [r3, #20]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	2202      	movs	r2, #2
 8011c92:	701a      	strb	r2, [r3, #0]
#else
      THIS_STATEID = TSL_STATEID_RELEASE;
#endif
    }
  }
}
 8011c94:	e04d      	b.n	8011d32 <TSL_linrot_DebDetectStateProcess+0xb6>
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_DETECTIN_TH, 1) == TSL_STATUS_OK)
 8011c96:	4b28      	ldr	r3, [pc, #160]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011c98:	695b      	ldr	r3, [r3, #20]
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	789b      	ldrb	r3, [r3, #2]
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f000 fa71 	bl	8012188 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d118      	bne.n	8011cde <TSL_linrot_DebDetectStateProcess+0x62>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8011cac:	4b22      	ldr	r3, [pc, #136]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011cae:	695b      	ldr	r3, [r3, #20]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	78db      	ldrb	r3, [r3, #3]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d006      	beq.n	8011cc6 <TSL_linrot_DebDetectStateProcess+0x4a>
 8011cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011cba:	695b      	ldr	r3, [r3, #20]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	78da      	ldrb	r2, [r3, #3]
 8011cc0:	3a01      	subs	r2, #1
 8011cc2:	b2d2      	uxtb	r2, r2
 8011cc4:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011cc8:	695b      	ldr	r3, [r3, #20]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	78db      	ldrb	r3, [r3, #3]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d12f      	bne.n	8011d32 <TSL_linrot_DebDetectStateProcess+0xb6>
        THIS_STATEID = TSL_STATEID_DETECT;
 8011cd2:	4b19      	ldr	r3, [pc, #100]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011cd4:	695b      	ldr	r3, [r3, #20]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	220a      	movs	r2, #10
 8011cda:	701a      	strb	r2, [r3, #0]
}
 8011cdc:	e029      	b.n	8011d32 <TSL_linrot_DebDetectStateProcess+0xb6>
      if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_PROXIN_TH, 0) == TSL_STATUS_OK)
 8011cde:	4b16      	ldr	r3, [pc, #88]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011ce0:	695b      	ldr	r3, [r3, #20]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	2100      	movs	r1, #0
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f000 fa4d 	bl	8012188 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d119      	bne.n	8011d28 <TSL_linrot_DebDetectStateProcess+0xac>
        THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8011cf4:	4b10      	ldr	r3, [pc, #64]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011cf6:	695b      	ldr	r3, [r3, #20]
 8011cf8:	685a      	ldr	r2, [r3, #4]
 8011cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011cfc:	695b      	ldr	r3, [r3, #20]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	7992      	ldrb	r2, [r2, #6]
 8011d02:	70da      	strb	r2, [r3, #3]
        if (THIS_COUNTER_DEB == 0)
 8011d04:	4b0c      	ldr	r3, [pc, #48]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011d06:	695b      	ldr	r3, [r3, #20]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	78db      	ldrb	r3, [r3, #3]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d105      	bne.n	8011d1c <TSL_linrot_DebDetectStateProcess+0xa0>
          THIS_STATEID = TSL_STATEID_PROX;
 8011d10:	4b09      	ldr	r3, [pc, #36]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011d12:	695b      	ldr	r3, [r3, #20]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2206      	movs	r2, #6
 8011d18:	701a      	strb	r2, [r3, #0]
}
 8011d1a:	e00a      	b.n	8011d32 <TSL_linrot_DebDetectStateProcess+0xb6>
          THIS_STATEID = TSL_STATEID_DEB_PROX;
 8011d1c:	4b06      	ldr	r3, [pc, #24]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011d1e:	695b      	ldr	r3, [r3, #20]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	2207      	movs	r2, #7
 8011d24:	701a      	strb	r2, [r3, #0]
}
 8011d26:	e004      	b.n	8011d32 <TSL_linrot_DebDetectStateProcess+0xb6>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8011d28:	4b03      	ldr	r3, [pc, #12]	@ (8011d38 <TSL_linrot_DebDetectStateProcess+0xbc>)
 8011d2a:	695b      	ldr	r3, [r3, #20]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	2202      	movs	r2, #2
 8011d30:	701a      	strb	r2, [r3, #0]
}
 8011d32:	bf00      	nop
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	20029378 	.word	0x20029378

08011d3c <TSL_linrot_DetectStateProcess>:
  * @brief  Detect state processing
  * @param  None
  * @retval None
  */
void TSL_linrot_DetectStateProcess(void)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	af00      	add	r7, sp, #0
#if TSLPRM_DTO > 0
  TSL_Status_enum_T pos_sts;
  TSL_tTick_sec_T tick_detected;
#endif

  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011d40:	f000 f9c6 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d119      	bne.n	8011d7e <TSL_linrot_DetectStateProcess+0x42>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8011d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011d4c:	695b      	ldr	r3, [r3, #20]
 8011d4e:	685a      	ldr	r2, [r3, #4]
 8011d50:	4b3a      	ldr	r3, [pc, #232]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011d52:	695b      	ldr	r3, [r3, #20]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	7a52      	ldrb	r2, [r2, #9]
 8011d58:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8011d5a:	4b38      	ldr	r3, [pc, #224]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011d5c:	695b      	ldr	r3, [r3, #20]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	78db      	ldrb	r3, [r3, #3]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d105      	bne.n	8011d72 <TSL_linrot_DetectStateProcess+0x36>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8011d66:	4b35      	ldr	r3, [pc, #212]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011d68:	695b      	ldr	r3, [r3, #20]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	220d      	movs	r2, #13
 8011d6e:	701a      	strb	r2, [r3, #0]
 8011d70:	e063      	b.n	8011e3a <TSL_linrot_DetectStateProcess+0xfe>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_DETECT;
 8011d72:	4b32      	ldr	r3, [pc, #200]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011d74:	695b      	ldr	r3, [r3, #20]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2211      	movs	r2, #17
 8011d7a:	701a      	strb	r2, [r3, #0]
 8011d7c:	e05d      	b.n	8011e3a <TSL_linrot_DetectStateProcess+0xfe>
    }
  }
  else // Acquisition is OK or has NOISE
  {

    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8011d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011d80:	695b      	ldr	r3, [r3, #20]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	78db      	ldrb	r3, [r3, #3]
 8011d86:	2101      	movs	r1, #1
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f000 fa2d 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d114      	bne.n	8011dbe <TSL_linrot_DetectStateProcess+0x82>
    {
      //-------------------
      // Calculate position
      //-------------------
      if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_ROTARY))
 8011d94:	4b29      	ldr	r3, [pc, #164]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	2b20      	cmp	r3, #32
 8011d9c:	d004      	beq.n	8011da8 <TSL_linrot_DetectStateProcess+0x6c>
 8011d9e:	4b27      	ldr	r3, [pc, #156]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011da0:	68db      	ldr	r3, [r3, #12]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	2b22      	cmp	r3, #34	@ 0x22
 8011da6:	d105      	bne.n	8011db4 <TSL_linrot_DetectStateProcess+0x78>
      {
        // Call the specific method
#if TSLPRM_DTO > 0
        pos_sts = TSL_Globals.This_LinRot->p_Methods->CalcPosition();
#else
        TSL_Globals.This_LinRot->p_Methods->CalcPosition();
 8011da8:	4b24      	ldr	r3, [pc, #144]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011daa:	695b      	ldr	r3, [r3, #20]
 8011dac:	6a1b      	ldr	r3, [r3, #32]
 8011dae:	689b      	ldr	r3, [r3, #8]
 8011db0:	4798      	blx	r3
            TSL_linrot_SetStateCalibration(0);
          }
        }
      }
#endif
      return; // Normal operation, stay in Detect state
 8011db2:	e042      	b.n	8011e3a <TSL_linrot_DetectStateProcess+0xfe>
        TSL_Params.p_LinRotMT->CalcPosition();
 8011db4:	4b22      	ldr	r3, [pc, #136]	@ (8011e40 <TSL_linrot_DetectStateProcess+0x104>)
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	4798      	blx	r3
      return; // Normal operation, stay in Detect state
 8011dbc:	e03d      	b.n	8011e3a <TSL_linrot_DetectStateProcess+0xfe>
    }

#if TSLPRM_USE_PROX > 0
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8011dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011dc0:	695b      	ldr	r3, [r3, #20]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	785b      	ldrb	r3, [r3, #1]
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f000 fa0d 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d119      	bne.n	8011e08 <TSL_linrot_DetectStateProcess+0xcc>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8011dd4:	4b19      	ldr	r3, [pc, #100]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011dd6:	695b      	ldr	r3, [r3, #20]
 8011dd8:	685a      	ldr	r2, [r3, #4]
 8011dda:	4b18      	ldr	r3, [pc, #96]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011ddc:	695b      	ldr	r3, [r3, #20]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	7992      	ldrb	r2, [r2, #6]
 8011de2:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011de4:	4b15      	ldr	r3, [pc, #84]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011de6:	695b      	ldr	r3, [r3, #20]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	78db      	ldrb	r3, [r3, #3]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d105      	bne.n	8011dfc <TSL_linrot_DetectStateProcess+0xc0>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8011df0:	4b12      	ldr	r3, [pc, #72]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011df2:	695b      	ldr	r3, [r3, #20]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	2206      	movs	r2, #6
 8011df8:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_PROX_DETECT;
      }
      return;
 8011dfa:	e01e      	b.n	8011e3a <TSL_linrot_DetectStateProcess+0xfe>
        THIS_STATEID = TSL_STATEID_DEB_PROX_DETECT;
 8011dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011dfe:	695b      	ldr	r3, [r3, #20]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2208      	movs	r2, #8
 8011e04:	701a      	strb	r2, [r3, #0]
      return;
 8011e06:	e018      	b.n	8011e3a <TSL_linrot_DetectStateProcess+0xfe>
    }
#endif

    THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8011e08:	4b0c      	ldr	r3, [pc, #48]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011e0a:	695b      	ldr	r3, [r3, #20]
 8011e0c:	685a      	ldr	r2, [r3, #4]
 8011e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011e10:	695b      	ldr	r3, [r3, #20]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	7a12      	ldrb	r2, [r2, #8]
 8011e16:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8011e18:	4b08      	ldr	r3, [pc, #32]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011e1a:	695b      	ldr	r3, [r3, #20]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	78db      	ldrb	r3, [r3, #3]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d105      	bne.n	8011e30 <TSL_linrot_DetectStateProcess+0xf4>
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
 8011e24:	4b05      	ldr	r3, [pc, #20]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011e26:	695b      	ldr	r3, [r3, #20]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2202      	movs	r2, #2
 8011e2c:	701a      	strb	r2, [r3, #0]
 8011e2e:	e004      	b.n	8011e3a <TSL_linrot_DetectStateProcess+0xfe>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8011e30:	4b02      	ldr	r3, [pc, #8]	@ (8011e3c <TSL_linrot_DetectStateProcess+0x100>)
 8011e32:	695b      	ldr	r3, [r3, #20]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2204      	movs	r2, #4
 8011e38:	701a      	strb	r2, [r3, #0]
    }

  }
}
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	20029378 	.word	0x20029378
 8011e40:	20000184 	.word	0x20000184

08011e44 <TSL_linrot_TouchStateProcess>:
  * Same as Detect state
  * @param  None
  * @retval None
  */
void TSL_linrot_TouchStateProcess(void)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	af00      	add	r7, sp, #0
#if TSLPRM_DTO > 0
  TSL_Status_enum_T pos_sts;
  TSL_tTick_sec_T tick_detected;
#endif

  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011e48:	f000 f942 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d119      	bne.n	8011e86 <TSL_linrot_TouchStateProcess+0x42>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8011e52:	4b3c      	ldr	r3, [pc, #240]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011e54:	695b      	ldr	r3, [r3, #20]
 8011e56:	685a      	ldr	r2, [r3, #4]
 8011e58:	4b3a      	ldr	r3, [pc, #232]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011e5a:	695b      	ldr	r3, [r3, #20]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	7a52      	ldrb	r2, [r2, #9]
 8011e60:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8011e62:	4b38      	ldr	r3, [pc, #224]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011e64:	695b      	ldr	r3, [r3, #20]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	78db      	ldrb	r3, [r3, #3]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d105      	bne.n	8011e7a <TSL_linrot_TouchStateProcess+0x36>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8011e6e:	4b35      	ldr	r3, [pc, #212]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011e70:	695b      	ldr	r3, [r3, #20]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	220d      	movs	r2, #13
 8011e76:	701a      	strb	r2, [r3, #0]
 8011e78:	e063      	b.n	8011f42 <TSL_linrot_TouchStateProcess+0xfe>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_TOUCH;
 8011e7a:	4b32      	ldr	r3, [pc, #200]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011e7c:	695b      	ldr	r3, [r3, #20]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	2212      	movs	r2, #18
 8011e82:	701a      	strb	r2, [r3, #0]
 8011e84:	e05d      	b.n	8011f42 <TSL_linrot_TouchStateProcess+0xfe>
    }
  }
  else // Acquisition is OK or has NOISE
  {

    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8011e86:	4b2f      	ldr	r3, [pc, #188]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011e88:	695b      	ldr	r3, [r3, #20]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	78db      	ldrb	r3, [r3, #3]
 8011e8e:	2101      	movs	r1, #1
 8011e90:	4618      	mov	r0, r3
 8011e92:	f000 f9a9 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d114      	bne.n	8011ec6 <TSL_linrot_TouchStateProcess+0x82>
    {
      //-------------------
      // Calculate position
      //-------------------
      if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_ROTARY))
 8011e9c:	4b29      	ldr	r3, [pc, #164]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	2b20      	cmp	r3, #32
 8011ea4:	d004      	beq.n	8011eb0 <TSL_linrot_TouchStateProcess+0x6c>
 8011ea6:	4b27      	ldr	r3, [pc, #156]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	2b22      	cmp	r3, #34	@ 0x22
 8011eae:	d105      	bne.n	8011ebc <TSL_linrot_TouchStateProcess+0x78>
      {
        // Call the specific method
#if TSLPRM_DTO > 0
        pos_sts = TSL_Globals.This_LinRot->p_Methods->CalcPosition();
#else
        TSL_Globals.This_LinRot->p_Methods->CalcPosition();
 8011eb0:	4b24      	ldr	r3, [pc, #144]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011eb2:	695b      	ldr	r3, [r3, #20]
 8011eb4:	6a1b      	ldr	r3, [r3, #32]
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	4798      	blx	r3
            TSL_linrot_SetStateCalibration(0);
          }
        }
      }
#endif
      return; // Normal operation, stay in Touch state
 8011eba:	e042      	b.n	8011f42 <TSL_linrot_TouchStateProcess+0xfe>
        TSL_Params.p_LinRotMT->CalcPosition();
 8011ebc:	4b22      	ldr	r3, [pc, #136]	@ (8011f48 <TSL_linrot_TouchStateProcess+0x104>)
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	689b      	ldr	r3, [r3, #8]
 8011ec2:	4798      	blx	r3
      return; // Normal operation, stay in Touch state
 8011ec4:	e03d      	b.n	8011f42 <TSL_linrot_TouchStateProcess+0xfe>
    }

#if TSLPRM_USE_PROX > 0
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8011ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011ec8:	695b      	ldr	r3, [r3, #20]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	785b      	ldrb	r3, [r3, #1]
 8011ece:	2100      	movs	r1, #0
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f000 f989 	bl	80121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d119      	bne.n	8011f10 <TSL_linrot_TouchStateProcess+0xcc>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8011edc:	4b19      	ldr	r3, [pc, #100]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011ede:	695b      	ldr	r3, [r3, #20]
 8011ee0:	685a      	ldr	r2, [r3, #4]
 8011ee2:	4b18      	ldr	r3, [pc, #96]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011ee4:	695b      	ldr	r3, [r3, #20]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	7992      	ldrb	r2, [r2, #6]
 8011eea:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8011eec:	4b15      	ldr	r3, [pc, #84]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011eee:	695b      	ldr	r3, [r3, #20]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	78db      	ldrb	r3, [r3, #3]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d105      	bne.n	8011f04 <TSL_linrot_TouchStateProcess+0xc0>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8011ef8:	4b12      	ldr	r3, [pc, #72]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011efa:	695b      	ldr	r3, [r3, #20]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	2206      	movs	r2, #6
 8011f00:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_PROX_TOUCH;
      }
      return;
 8011f02:	e01e      	b.n	8011f42 <TSL_linrot_TouchStateProcess+0xfe>
        THIS_STATEID = TSL_STATEID_DEB_PROX_TOUCH;
 8011f04:	4b0f      	ldr	r3, [pc, #60]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011f06:	695b      	ldr	r3, [r3, #20]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2209      	movs	r2, #9
 8011f0c:	701a      	strb	r2, [r3, #0]
      return;
 8011f0e:	e018      	b.n	8011f42 <TSL_linrot_TouchStateProcess+0xfe>
    }
#endif

    THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8011f10:	4b0c      	ldr	r3, [pc, #48]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011f12:	695b      	ldr	r3, [r3, #20]
 8011f14:	685a      	ldr	r2, [r3, #4]
 8011f16:	4b0b      	ldr	r3, [pc, #44]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011f18:	695b      	ldr	r3, [r3, #20]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	7a12      	ldrb	r2, [r2, #8]
 8011f1e:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8011f20:	4b08      	ldr	r3, [pc, #32]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011f22:	695b      	ldr	r3, [r3, #20]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	78db      	ldrb	r3, [r3, #3]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d105      	bne.n	8011f38 <TSL_linrot_TouchStateProcess+0xf4>
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
 8011f2c:	4b05      	ldr	r3, [pc, #20]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011f2e:	695b      	ldr	r3, [r3, #20]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2202      	movs	r2, #2
 8011f34:	701a      	strb	r2, [r3, #0]
 8011f36:	e004      	b.n	8011f42 <TSL_linrot_TouchStateProcess+0xfe>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8011f38:	4b02      	ldr	r3, [pc, #8]	@ (8011f44 <TSL_linrot_TouchStateProcess+0x100>)
 8011f3a:	695b      	ldr	r3, [r3, #20]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	2205      	movs	r2, #5
 8011f40:	701a      	strb	r2, [r3, #0]
    }

  }
}
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	20029378 	.word	0x20029378
 8011f48:	20000184 	.word	0x20000184

08011f4c <TSL_linrot_DebErrorStateProcess>:
  * @brief  Debounce error state processing
  * @param  None
  * @retval None
  */
void TSL_linrot_DebErrorStateProcess(void)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
  volatile TSL_StateMask_enum_T mask;

  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8011f52:	f000 f8bd 	bl	80120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d118      	bne.n	8011f8e <TSL_linrot_DebErrorStateProcess+0x42>
  {
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8011f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8012014 <TSL_linrot_DebErrorStateProcess+0xc8>)
 8011f5e:	695b      	ldr	r3, [r3, #20]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	78db      	ldrb	r3, [r3, #3]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d006      	beq.n	8011f76 <TSL_linrot_DebErrorStateProcess+0x2a>
 8011f68:	4b2a      	ldr	r3, [pc, #168]	@ (8012014 <TSL_linrot_DebErrorStateProcess+0xc8>)
 8011f6a:	695b      	ldr	r3, [r3, #20]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	78da      	ldrb	r2, [r3, #3]
 8011f70:	3a01      	subs	r2, #1
 8011f72:	b2d2      	uxtb	r2, r2
 8011f74:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8011f76:	4b27      	ldr	r3, [pc, #156]	@ (8012014 <TSL_linrot_DebErrorStateProcess+0xc8>)
 8011f78:	695b      	ldr	r3, [r3, #20]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	78db      	ldrb	r3, [r3, #3]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d144      	bne.n	801200c <TSL_linrot_DebErrorStateProcess+0xc0>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8011f82:	4b24      	ldr	r3, [pc, #144]	@ (8012014 <TSL_linrot_DebErrorStateProcess+0xc8>)
 8011f84:	695b      	ldr	r3, [r3, #20]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	220d      	movs	r2, #13
 8011f8a:	701a      	strb	r2, [r3, #0]
      default:
        TSL_linrot_SetStateCalibration(0);
        break;
    }
  }
}
 8011f8c:	e03e      	b.n	801200c <TSL_linrot_DebErrorStateProcess+0xc0>
    mask = TSL_linrot_GetStateMask();
 8011f8e:	f7ff fa87 	bl	80114a0 <TSL_linrot_GetStateMask>
 8011f92:	4603      	mov	r3, r0
 8011f94:	71fb      	strb	r3, [r7, #7]
    mask &= (TSL_StateMask_enum_T)(~(TSL_STATE_DEBOUNCE_BIT_MASK | TSL_STATE_ERROR_BIT_MASK));
 8011f96:	79fb      	ldrb	r3, [r7, #7]
 8011f98:	b2db      	uxtb	r3, r3
 8011f9a:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	71fb      	strb	r3, [r7, #7]
    switch (mask)
 8011fa2:	79fb      	ldrb	r3, [r7, #7]
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	3b01      	subs	r3, #1
 8011fa8:	2b07      	cmp	r3, #7
 8011faa:	d82b      	bhi.n	8012004 <TSL_linrot_DebErrorStateProcess+0xb8>
 8011fac:	a201      	add	r2, pc, #4	@ (adr r2, 8011fb4 <TSL_linrot_DebErrorStateProcess+0x68>)
 8011fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fb2:	bf00      	nop
 8011fb4:	08011fd5 	.word	0x08011fd5
 8011fb8:	08011fe1 	.word	0x08011fe1
 8011fbc:	08012005 	.word	0x08012005
 8011fc0:	08011fed 	.word	0x08011fed
 8011fc4:	08012005 	.word	0x08012005
 8011fc8:	08012005 	.word	0x08012005
 8011fcc:	08012005 	.word	0x08012005
 8011fd0:	08011ff9 	.word	0x08011ff9
        THIS_STATEID = TSL_STATEID_RELEASE;
 8011fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8012014 <TSL_linrot_DebErrorStateProcess+0xc8>)
 8011fd6:	695b      	ldr	r3, [r3, #20]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	2202      	movs	r2, #2
 8011fdc:	701a      	strb	r2, [r3, #0]
        break;
 8011fde:	e015      	b.n	801200c <TSL_linrot_DebErrorStateProcess+0xc0>
        THIS_STATEID = TSL_STATEID_PROX;
 8011fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8012014 <TSL_linrot_DebErrorStateProcess+0xc8>)
 8011fe2:	695b      	ldr	r3, [r3, #20]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2206      	movs	r2, #6
 8011fe8:	701a      	strb	r2, [r3, #0]
        break;
 8011fea:	e00f      	b.n	801200c <TSL_linrot_DebErrorStateProcess+0xc0>
        THIS_STATEID = TSL_STATEID_DETECT;
 8011fec:	4b09      	ldr	r3, [pc, #36]	@ (8012014 <TSL_linrot_DebErrorStateProcess+0xc8>)
 8011fee:	695b      	ldr	r3, [r3, #20]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	220a      	movs	r2, #10
 8011ff4:	701a      	strb	r2, [r3, #0]
        break;
 8011ff6:	e009      	b.n	801200c <TSL_linrot_DebErrorStateProcess+0xc0>
        THIS_STATEID = TSL_STATEID_TOUCH;
 8011ff8:	4b06      	ldr	r3, [pc, #24]	@ (8012014 <TSL_linrot_DebErrorStateProcess+0xc8>)
 8011ffa:	695b      	ldr	r3, [r3, #20]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	220c      	movs	r2, #12
 8012000:	701a      	strb	r2, [r3, #0]
        break;
 8012002:	e003      	b.n	801200c <TSL_linrot_DebErrorStateProcess+0xc0>
        TSL_linrot_SetStateCalibration(0);
 8012004:	2000      	movs	r0, #0
 8012006:	f7ff fa0b 	bl	8011420 <TSL_linrot_SetStateCalibration>
        break;
 801200a:	bf00      	nop
}
 801200c:	bf00      	nop
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	20029378 	.word	0x20029378

08012018 <TSL_linrot_ProcessCh_All_SetStatus>:
  * @brief  Set all channels status to ON, OFF or BURST ONLY
  * @param  sts  Channel status
  * @retval None
  */
void TSL_linrot_ProcessCh_All_SetStatus(TSL_ObjStatus_enum_T sts)
{
 8012018:	b480      	push	{r7}
 801201a:	b085      	sub	sp, #20
 801201c:	af00      	add	r7, sp, #0
 801201e:	4603      	mov	r3, r0
 8012020:	71fb      	strb	r3, [r7, #7]
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8012022:	4b12      	ldr	r3, [pc, #72]	@ (801206c <TSL_linrot_ProcessCh_All_SetStatus+0x54>)
 8012024:	695b      	ldr	r3, [r3, #20]
 8012026:	689b      	ldr	r3, [r3, #8]
 8012028:	60bb      	str	r3, [r7, #8]
  // Init channels status
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 801202a:	2300      	movs	r3, #0
 801202c:	73fb      	strb	r3, [r7, #15]
 801202e:	e00e      	b.n	801204e <TSL_linrot_ProcessCh_All_SetStatus+0x36>
  {
    p_Ch->Flags.ObjStatus = sts;
 8012030:	79fb      	ldrb	r3, [r7, #7]
 8012032:	f003 0303 	and.w	r3, r3, #3
 8012036:	b2d9      	uxtb	r1, r3
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	7813      	ldrb	r3, [r2, #0]
 801203c:	f361 03c4 	bfi	r3, r1, #3, #2
 8012040:	7013      	strb	r3, [r2, #0]
    p_Ch++;
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	330c      	adds	r3, #12
 8012046:	60bb      	str	r3, [r7, #8]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012048:	7bfb      	ldrb	r3, [r7, #15]
 801204a:	3301      	adds	r3, #1
 801204c:	73fb      	strb	r3, [r7, #15]
 801204e:	7bfb      	ldrb	r3, [r7, #15]
 8012050:	b29a      	uxth	r2, r3
 8012052:	4b06      	ldr	r3, [pc, #24]	@ (801206c <TSL_linrot_ProcessCh_All_SetStatus+0x54>)
 8012054:	695b      	ldr	r3, [r3, #20]
 8012056:	899b      	ldrh	r3, [r3, #12]
 8012058:	429a      	cmp	r2, r3
 801205a:	d3e9      	bcc.n	8012030 <TSL_linrot_ProcessCh_All_SetStatus+0x18>
  }
}
 801205c:	bf00      	nop
 801205e:	bf00      	nop
 8012060:	3714      	adds	r7, #20
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	20029378 	.word	0x20029378

08012070 <TSL_linrot_ProcessCh_One_DataReady>:
  * @brief  Check if at least one channel has a data ready
  * @param  None
  * @retval Status
  */
TSL_Status_enum_T TSL_linrot_ProcessCh_One_DataReady(void)
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8012076:	4b15      	ldr	r3, [pc, #84]	@ (80120cc <TSL_linrot_ProcessCh_One_DataReady+0x5c>)
 8012078:	695b      	ldr	r3, [r3, #20]
 801207a:	689b      	ldr	r3, [r3, #8]
 801207c:	60bb      	str	r3, [r7, #8]
  TSL_Status_enum_T retval = TSL_STATUS_ERROR;
 801207e:	2302      	movs	r3, #2
 8012080:	71fb      	strb	r3, [r7, #7]
  // Return OK if at least one channel has a data ready
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012082:	2300      	movs	r3, #0
 8012084:	73fb      	strb	r3, [r7, #15]
 8012086:	e013      	b.n	80120b0 <TSL_linrot_ProcessCh_One_DataReady+0x40>
  {
    if (p_Ch->Flags.DataReady == TSL_DATA_READY)
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	f003 0301 	and.w	r3, r3, #1
 8012090:	b2db      	uxtb	r3, r3
 8012092:	2b00      	cmp	r3, #0
 8012094:	d006      	beq.n	80120a4 <TSL_linrot_ProcessCh_One_DataReady+0x34>
    {
      p_Ch->Flags.DataReady = TSL_DATA_NOT_READY; // The new data is processed
 8012096:	68ba      	ldr	r2, [r7, #8]
 8012098:	7813      	ldrb	r3, [r2, #0]
 801209a:	f36f 0300 	bfc	r3, #0, #1
 801209e:	7013      	strb	r3, [r2, #0]
      retval = TSL_STATUS_OK;
 80120a0:	2300      	movs	r3, #0
 80120a2:	71fb      	strb	r3, [r7, #7]
    }
    p_Ch++;
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	330c      	adds	r3, #12
 80120a8:	60bb      	str	r3, [r7, #8]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80120aa:	7bfb      	ldrb	r3, [r7, #15]
 80120ac:	3301      	adds	r3, #1
 80120ae:	73fb      	strb	r3, [r7, #15]
 80120b0:	7bfb      	ldrb	r3, [r7, #15]
 80120b2:	b29a      	uxth	r2, r3
 80120b4:	4b05      	ldr	r3, [pc, #20]	@ (80120cc <TSL_linrot_ProcessCh_One_DataReady+0x5c>)
 80120b6:	695b      	ldr	r3, [r3, #20]
 80120b8:	899b      	ldrh	r3, [r3, #12]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d3e4      	bcc.n	8012088 <TSL_linrot_ProcessCh_One_DataReady+0x18>
  }
  return retval;
 80120be:	79fb      	ldrb	r3, [r7, #7]
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3714      	adds	r7, #20
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr
 80120cc:	20029378 	.word	0x20029378

080120d0 <TSL_linrot_ProcessCh_One_AcqStatusError>:
  * @brief  Check if at least one channel is in error
  * @param  None
  * @retval Status
  */
TSL_Status_enum_T TSL_linrot_ProcessCh_One_AcqStatusError(void)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80120d6:	4b13      	ldr	r3, [pc, #76]	@ (8012124 <TSL_linrot_ProcessCh_One_AcqStatusError+0x54>)
 80120d8:	695b      	ldr	r3, [r3, #20]
 80120da:	689b      	ldr	r3, [r3, #8]
 80120dc:	603b      	str	r3, [r7, #0]
  // Return OK if at least one channel is in acquisition error min or max
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80120de:	2300      	movs	r3, #0
 80120e0:	71fb      	strb	r3, [r7, #7]
 80120e2:	e010      	b.n	8012106 <TSL_linrot_ProcessCh_One_AcqStatusError+0x36>
  {
    if (p_Ch->Flags.AcqStatus & TSL_ACQ_STATUS_ERROR_MASK)
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80120ec:	b2db      	uxtb	r3, r3
 80120ee:	f003 0302 	and.w	r3, r3, #2
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <TSL_linrot_ProcessCh_One_AcqStatusError+0x2a>
    {
      return TSL_STATUS_OK;
 80120f6:	2300      	movs	r3, #0
 80120f8:	e00d      	b.n	8012116 <TSL_linrot_ProcessCh_One_AcqStatusError+0x46>
    }
    p_Ch++;
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	330c      	adds	r3, #12
 80120fe:	603b      	str	r3, [r7, #0]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012100:	79fb      	ldrb	r3, [r7, #7]
 8012102:	3301      	adds	r3, #1
 8012104:	71fb      	strb	r3, [r7, #7]
 8012106:	79fb      	ldrb	r3, [r7, #7]
 8012108:	b29a      	uxth	r2, r3
 801210a:	4b06      	ldr	r3, [pc, #24]	@ (8012124 <TSL_linrot_ProcessCh_One_AcqStatusError+0x54>)
 801210c:	695b      	ldr	r3, [r3, #20]
 801210e:	899b      	ldrh	r3, [r3, #12]
 8012110:	429a      	cmp	r2, r3
 8012112:	d3e7      	bcc.n	80120e4 <TSL_linrot_ProcessCh_One_AcqStatusError+0x14>
  }
  return TSL_STATUS_ERROR;
 8012114:	2302      	movs	r3, #2
}
 8012116:	4618      	mov	r0, r3
 8012118:	370c      	adds	r7, #12
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr
 8012122:	bf00      	nop
 8012124:	20029378 	.word	0x20029378

08012128 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus>:
  * @param  th Threshold
  * @param  coeff Enable or Disable the multiplier coefficient on threshold
  * @retval Status
  */
TSL_Status_enum_T TSL_linrot_ProcessCh_One_DeltaBelowEquMinus(TSL_tThreshold_T th, TSL_tIndex_T coeff)
{
 8012128:	b480      	push	{r7}
 801212a:	b087      	sub	sp, #28
 801212c:	af00      	add	r7, sp, #0
 801212e:	4603      	mov	r3, r0
 8012130:	460a      	mov	r2, r1
 8012132:	71fb      	strb	r3, [r7, #7]
 8012134:	4613      	mov	r3, r2
 8012136:	71bb      	strb	r3, [r7, #6]
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8012138:	4b12      	ldr	r3, [pc, #72]	@ (8012184 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x5c>)
 801213a:	695b      	ldr	r3, [r3, #20]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	613b      	str	r3, [r7, #16]
    lth = th;
  }
#endif
  
  // Return OK if at least one channel is below or equal the threshold
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012140:	2300      	movs	r3, #0
 8012142:	75fb      	strb	r3, [r7, #23]
 8012144:	e010      	b.n	8012168 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x40>
  {

#if TSLPRM_LINROT_USE_NORMDELTA > 0
    norm_delta = TSL_linrot_NormDelta(p_Ch, idx); // Normalize the Delta
#else
    norm_delta = p_Ch->Delta; // Take only the Delta
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	891b      	ldrh	r3, [r3, #8]
 801214a:	81fb      	strh	r3, [r7, #14]
#endif

#if TSLPRM_COEFF_TH > 0
    if (norm_delta <= -lth) // Warning!!! The threshold is inverted
#else
    if (norm_delta <= -th) // Warning!!! The threshold is inverted
 801214c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012150:	79fb      	ldrb	r3, [r7, #7]
 8012152:	425b      	negs	r3, r3
 8012154:	429a      	cmp	r2, r3
 8012156:	dc01      	bgt.n	801215c <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x34>
#endif
    {
      return TSL_STATUS_OK;
 8012158:	2300      	movs	r3, #0
 801215a:	e00d      	b.n	8012178 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x50>
    }
    
    p_Ch++;
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	330c      	adds	r3, #12
 8012160:	613b      	str	r3, [r7, #16]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012162:	7dfb      	ldrb	r3, [r7, #23]
 8012164:	3301      	adds	r3, #1
 8012166:	75fb      	strb	r3, [r7, #23]
 8012168:	7dfb      	ldrb	r3, [r7, #23]
 801216a:	b29a      	uxth	r2, r3
 801216c:	4b05      	ldr	r3, [pc, #20]	@ (8012184 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x5c>)
 801216e:	695b      	ldr	r3, [r3, #20]
 8012170:	899b      	ldrh	r3, [r3, #12]
 8012172:	429a      	cmp	r2, r3
 8012174:	d3e7      	bcc.n	8012146 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x1e>
  }
  
  return TSL_STATUS_ERROR;
 8012176:	2302      	movs	r3, #2
}
 8012178:	4618      	mov	r0, r3
 801217a:	371c      	adds	r7, #28
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr
 8012184:	20029378 	.word	0x20029378

08012188 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>:
  * @param  th Threshold
  * @param  coeff Enable or Disable the multiplier coefficient on threshold
  * @retval Status
  */
TSL_Status_enum_T TSL_linrot_ProcessCh_One_DeltaAboveEqu(TSL_tThreshold_T th, TSL_tIndex_T coeff)
{
 8012188:	b480      	push	{r7}
 801218a:	b087      	sub	sp, #28
 801218c:	af00      	add	r7, sp, #0
 801218e:	4603      	mov	r3, r0
 8012190:	460a      	mov	r2, r1
 8012192:	71fb      	strb	r3, [r7, #7]
 8012194:	4613      	mov	r3, r2
 8012196:	71bb      	strb	r3, [r7, #6]
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8012198:	4b12      	ldr	r3, [pc, #72]	@ (80121e4 <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x5c>)
 801219a:	695b      	ldr	r3, [r3, #20]
 801219c:	689b      	ldr	r3, [r3, #8]
 801219e:	613b      	str	r3, [r7, #16]
    lth = th;
  }
#endif

  // Return OK if at least one channel is above or equal the threshold
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80121a0:	2300      	movs	r3, #0
 80121a2:	75fb      	strb	r3, [r7, #23]
 80121a4:	e00f      	b.n	80121c6 <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x3e>
  {

#if TSLPRM_LINROT_USE_NORMDELTA > 0
    norm_delta = TSL_linrot_NormDelta(p_Ch, idx); // Normalize the Delta
#else
    norm_delta = p_Ch->Delta; // Take only the Delta
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	891b      	ldrh	r3, [r3, #8]
 80121aa:	81fb      	strh	r3, [r7, #14]
#endif

#if TSLPRM_COEFF_TH > 0
    if (norm_delta >= lth)
#else
    if (norm_delta >= th)
 80121ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80121b0:	79fb      	ldrb	r3, [r7, #7]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	db01      	blt.n	80121ba <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x32>
      {
        p_Ch++;
        continue;
      }
#endif
      return TSL_STATUS_OK;
 80121b6:	2300      	movs	r3, #0
 80121b8:	e00d      	b.n	80121d6 <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x4e>
    }
    p_Ch++;
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	330c      	adds	r3, #12
 80121be:	613b      	str	r3, [r7, #16]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80121c0:	7dfb      	ldrb	r3, [r7, #23]
 80121c2:	3301      	adds	r3, #1
 80121c4:	75fb      	strb	r3, [r7, #23]
 80121c6:	7dfb      	ldrb	r3, [r7, #23]
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	4b06      	ldr	r3, [pc, #24]	@ (80121e4 <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x5c>)
 80121cc:	695b      	ldr	r3, [r3, #20]
 80121ce:	899b      	ldrh	r3, [r3, #12]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d3e8      	bcc.n	80121a6 <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x1e>
  }
  return TSL_STATUS_ERROR;
 80121d4:	2302      	movs	r3, #2
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	371c      	adds	r7, #28
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	20029378 	.word	0x20029378

080121e8 <TSL_linrot_ProcessCh_One_DeltaAbove>:
  * @param  th Threshold
  * @param  coeff Enable or Disable the multiplier coefficient on threshold
  * @retval Status
  */
TSL_Status_enum_T TSL_linrot_ProcessCh_One_DeltaAbove(TSL_tThreshold_T th, TSL_tIndex_T coeff)
{
 80121e8:	b480      	push	{r7}
 80121ea:	b087      	sub	sp, #28
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	4603      	mov	r3, r0
 80121f0:	460a      	mov	r2, r1
 80121f2:	71fb      	strb	r3, [r7, #7]
 80121f4:	4613      	mov	r3, r2
 80121f6:	71bb      	strb	r3, [r7, #6]
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80121f8:	4b12      	ldr	r3, [pc, #72]	@ (8012244 <TSL_linrot_ProcessCh_One_DeltaAbove+0x5c>)
 80121fa:	695b      	ldr	r3, [r3, #20]
 80121fc:	689b      	ldr	r3, [r3, #8]
 80121fe:	613b      	str	r3, [r7, #16]
    lth = th;
  }
#endif

  // Return OK if at least one channel is above the threshold
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012200:	2300      	movs	r3, #0
 8012202:	75fb      	strb	r3, [r7, #23]
 8012204:	e00f      	b.n	8012226 <TSL_linrot_ProcessCh_One_DeltaAbove+0x3e>
  {

#if TSLPRM_LINROT_USE_NORMDELTA > 0
    norm_delta = TSL_linrot_NormDelta(p_Ch, idx); // Normalize the Delta
#else
    norm_delta = p_Ch->Delta; // Take only the Delta
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	891b      	ldrh	r3, [r3, #8]
 801220a:	81fb      	strh	r3, [r7, #14]
#endif

#if TSLPRM_COEFF_TH > 0
    if (norm_delta > lth)
#else
    if (norm_delta > th)
 801220c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012210:	79fb      	ldrb	r3, [r7, #7]
 8012212:	429a      	cmp	r2, r3
 8012214:	dd01      	ble.n	801221a <TSL_linrot_ProcessCh_One_DeltaAbove+0x32>
      {
        p_Ch++;
        continue;
      }
#endif
      return TSL_STATUS_OK;
 8012216:	2300      	movs	r3, #0
 8012218:	e00d      	b.n	8012236 <TSL_linrot_ProcessCh_One_DeltaAbove+0x4e>
    }
    p_Ch++;
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	330c      	adds	r3, #12
 801221e:	613b      	str	r3, [r7, #16]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012220:	7dfb      	ldrb	r3, [r7, #23]
 8012222:	3301      	adds	r3, #1
 8012224:	75fb      	strb	r3, [r7, #23]
 8012226:	7dfb      	ldrb	r3, [r7, #23]
 8012228:	b29a      	uxth	r2, r3
 801222a:	4b06      	ldr	r3, [pc, #24]	@ (8012244 <TSL_linrot_ProcessCh_One_DeltaAbove+0x5c>)
 801222c:	695b      	ldr	r3, [r3, #20]
 801222e:	899b      	ldrh	r3, [r3, #12]
 8012230:	429a      	cmp	r2, r3
 8012232:	d3e8      	bcc.n	8012206 <TSL_linrot_ProcessCh_One_DeltaAbove+0x1e>
  }
  return TSL_STATUS_ERROR;
 8012234:	2302      	movs	r3, #2
}
 8012236:	4618      	mov	r0, r3
 8012238:	371c      	adds	r7, #28
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr
 8012242:	bf00      	nop
 8012244:	20029378 	.word	0x20029378

08012248 <TSL_linrot_ProcessCh_All_DeltaBelowEqu>:
  * @param  th Threshold
  * @param  coeff Enable or Disable the multiplier coefficient on threshold
  * @retval Status
  */
TSL_Status_enum_T TSL_linrot_ProcessCh_All_DeltaBelowEqu(TSL_tThreshold_T th, TSL_tIndex_T coeff)
{
 8012248:	b480      	push	{r7}
 801224a:	b087      	sub	sp, #28
 801224c:	af00      	add	r7, sp, #0
 801224e:	4603      	mov	r3, r0
 8012250:	460a      	mov	r2, r1
 8012252:	71fb      	strb	r3, [r7, #7]
 8012254:	4613      	mov	r3, r2
 8012256:	71bb      	strb	r3, [r7, #6]
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8012258:	4b12      	ldr	r3, [pc, #72]	@ (80122a4 <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x5c>)
 801225a:	695b      	ldr	r3, [r3, #20]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	613b      	str	r3, [r7, #16]
    lth = th;
  }
#endif

  // Return OK if ALL channels are below or equal the threshold
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012260:	2300      	movs	r3, #0
 8012262:	75fb      	strb	r3, [r7, #23]
 8012264:	e00f      	b.n	8012286 <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x3e>
  {

#if TSLPRM_LINROT_USE_NORMDELTA > 0
    norm_delta = TSL_linrot_NormDelta(p_Ch, idx); // Normalize the Delta
#else
    norm_delta = p_Ch->Delta; // Take only the Delta
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	891b      	ldrh	r3, [r3, #8]
 801226a:	81fb      	strh	r3, [r7, #14]
#endif

#if TSLPRM_COEFF_TH > 0
    if (norm_delta > lth)
#else
    if (norm_delta > th)
 801226c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012270:	79fb      	ldrb	r3, [r7, #7]
 8012272:	429a      	cmp	r2, r3
 8012274:	dd01      	ble.n	801227a <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x32>
      {
        p_Ch++;
        continue;
      }
#endif
      return TSL_STATUS_ERROR;
 8012276:	2302      	movs	r3, #2
 8012278:	e00d      	b.n	8012296 <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x4e>
    }
    p_Ch++;
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	330c      	adds	r3, #12
 801227e:	613b      	str	r3, [r7, #16]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8012280:	7dfb      	ldrb	r3, [r7, #23]
 8012282:	3301      	adds	r3, #1
 8012284:	75fb      	strb	r3, [r7, #23]
 8012286:	7dfb      	ldrb	r3, [r7, #23]
 8012288:	b29a      	uxth	r2, r3
 801228a:	4b06      	ldr	r3, [pc, #24]	@ (80122a4 <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x5c>)
 801228c:	695b      	ldr	r3, [r3, #20]
 801228e:	899b      	ldrh	r3, [r3, #12]
 8012290:	429a      	cmp	r2, r3
 8012292:	d3e8      	bcc.n	8012266 <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x1e>
  }
  return TSL_STATUS_OK;
 8012294:	2300      	movs	r3, #0
}
 8012296:	4618      	mov	r0, r3
 8012298:	371c      	adds	r7, #28
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr
 80122a2:	bf00      	nop
 80122a4:	20029378 	.word	0x20029378

080122a8 <TSL_linrot_ProcessCh_All_ClearRef>:
  * @brief  Clear the Reference and ReferenceRest for all channels
  * @param  None
  * @retval None
  */
void TSL_linrot_ProcessCh_All_ClearRef(void)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b083      	sub	sp, #12
 80122ac:	af00      	add	r7, sp, #0
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80122ae:	4b10      	ldr	r3, [pc, #64]	@ (80122f0 <TSL_linrot_ProcessCh_All_ClearRef+0x48>)
 80122b0:	695b      	ldr	r3, [r3, #20]
 80122b2:	689b      	ldr	r3, [r3, #8]
 80122b4:	603b      	str	r3, [r7, #0]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80122b6:	2300      	movs	r3, #0
 80122b8:	71fb      	strb	r3, [r7, #7]
 80122ba:	e00b      	b.n	80122d4 <TSL_linrot_ProcessCh_All_ClearRef+0x2c>
  {
    p_Ch->Ref = 0;
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	2200      	movs	r2, #0
 80122c0:	809a      	strh	r2, [r3, #4]
    p_Ch->RefRest = 0;
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	2200      	movs	r2, #0
 80122c6:	719a      	strb	r2, [r3, #6]
    p_Ch++;
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	330c      	adds	r3, #12
 80122cc:	603b      	str	r3, [r7, #0]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	3301      	adds	r3, #1
 80122d2:	71fb      	strb	r3, [r7, #7]
 80122d4:	79fb      	ldrb	r3, [r7, #7]
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	4b05      	ldr	r3, [pc, #20]	@ (80122f0 <TSL_linrot_ProcessCh_All_ClearRef+0x48>)
 80122da:	695b      	ldr	r3, [r3, #20]
 80122dc:	899b      	ldrh	r3, [r3, #12]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d3ec      	bcc.n	80122bc <TSL_linrot_ProcessCh_All_ClearRef+0x14>
  }
}
 80122e2:	bf00      	nop
 80122e4:	bf00      	nop
 80122e6:	370c      	adds	r7, #12
 80122e8:	46bd      	mov	sp, r7
 80122ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ee:	4770      	bx	lr
 80122f0:	20029378 	.word	0x20029378

080122f4 <TSL_obj_GroupInit>:
  * @brief Initialize a group of Objects
  * @param[in] objgrp  Pointer to the group of objects
  * @retval None
  */
void TSL_obj_GroupInit(TSL_ObjectGroup_T *objgrp)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b086      	sub	sp, #24
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  TSL_tIndex_T idx_obj;
  CONST TSL_Object_T *pobj;
  TSL_tNb_T objgrp_state_mask = 0;
 80122fc:	2300      	movs	r3, #0
 80122fe:	81fb      	strh	r3, [r7, #14]

  pobj = objgrp->p_Obj; // First object in the group
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	613b      	str	r3, [r7, #16]

  objgrp->Change = TSL_STATE_NOT_CHANGED;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2200      	movs	r2, #0
 801230a:	721a      	strb	r2, [r3, #8]

  // Process all objects
  for (idx_obj = 0; idx_obj < objgrp->NbObjects; idx_obj++)
 801230c:	2300      	movs	r3, #0
 801230e:	75fb      	strb	r3, [r7, #23]
 8012310:	e02f      	b.n	8012372 <TSL_obj_GroupInit+0x7e>
  {

    // Assign global object
    TSL_obj_SetGlobalObj(pobj);
 8012312:	6938      	ldr	r0, [r7, #16]
 8012314:	f000 f83c 	bl	8012390 <TSL_obj_SetGlobalObj>

    switch (pobj->Type)
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b20      	cmp	r3, #32
 801231e:	d001      	beq.n	8012324 <TSL_obj_GroupInit+0x30>
 8012320:	2b22      	cmp	r3, #34	@ 0x22
 8012322:	d11f      	bne.n	8012364 <TSL_obj_GroupInit+0x70>
        //------------------------------------------------------------------------
#if TSLPRM_TOTAL_LINROTS > 0
      case TSL_OBJ_LINEAR:
      case TSL_OBJ_ROTARY:
        // Call the specific method
        TSL_Globals.This_LinRot->p_Methods->Init();
 8012324:	4b19      	ldr	r3, [pc, #100]	@ (801238c <TSL_obj_GroupInit+0x98>)
 8012326:	695b      	ldr	r3, [r3, #20]
 8012328:	6a1b      	ldr	r3, [r3, #32]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4798      	blx	r3
        // Check if the object has changed of state
        if (TSL_Globals.This_LinRot->p_Data->Change)
 801232e:	4b17      	ldr	r3, [pc, #92]	@ (801238c <TSL_obj_GroupInit+0x98>)
 8012330:	695b      	ldr	r3, [r3, #20]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	791b      	ldrb	r3, [r3, #4]
 8012336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801233a:	b2db      	uxtb	r3, r3
 801233c:	2b00      	cmp	r3, #0
 801233e:	d002      	beq.n	8012346 <TSL_obj_GroupInit+0x52>
        {
          objgrp->Change = TSL_STATE_CHANGED;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2201      	movs	r2, #1
 8012344:	721a      	strb	r2, [r3, #8]
        }
        // Update object group state mask
        objgrp_state_mask |= TSL_Globals.This_LinRot->p_SM[TSL_Globals.This_LinRot->p_Data->StateId].StateMask;
 8012346:	4b11      	ldr	r3, [pc, #68]	@ (801238c <TSL_obj_GroupInit+0x98>)
 8012348:	695b      	ldr	r3, [r3, #20]
 801234a:	69da      	ldr	r2, [r3, #28]
 801234c:	4b0f      	ldr	r3, [pc, #60]	@ (801238c <TSL_obj_GroupInit+0x98>)
 801234e:	695b      	ldr	r3, [r3, #20]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	00db      	lsls	r3, r3, #3
 8012356:	4413      	add	r3, r2
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	89fb      	ldrh	r3, [r7, #14]
 801235e:	4313      	orrs	r3, r2
 8012360:	81fb      	strh	r3, [r7, #14]
        break;
 8012362:	e000      	b.n	8012366 <TSL_obj_GroupInit+0x72>
        // Get object state mask from state machine in TSL_Params
        objgrp_state_mask |= TSL_Params.p_LinRotSM[TSL_Globals.This_LinRot->p_Data->StateId].StateMask;
        break;
#endif
      default:
        break;
 8012364:	bf00      	nop
    }

    pobj++; // Next object
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	3308      	adds	r3, #8
 801236a:	613b      	str	r3, [r7, #16]
  for (idx_obj = 0; idx_obj < objgrp->NbObjects; idx_obj++)
 801236c:	7dfb      	ldrb	r3, [r7, #23]
 801236e:	3301      	adds	r3, #1
 8012370:	75fb      	strb	r3, [r7, #23]
 8012372:	7dfb      	ldrb	r3, [r7, #23]
 8012374:	b29a      	uxth	r2, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	889b      	ldrh	r3, [r3, #4]
 801237a:	429a      	cmp	r2, r3
 801237c:	d3c9      	bcc.n	8012312 <TSL_obj_GroupInit+0x1e>
  }

  // Update the object group state mask
  objgrp->StateMask = objgrp_state_mask;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	89fa      	ldrh	r2, [r7, #14]
 8012382:	80da      	strh	r2, [r3, #6]
}
 8012384:	bf00      	nop
 8012386:	3718      	adds	r7, #24
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	20029378 	.word	0x20029378

08012390 <TSL_obj_SetGlobalObj>:
  * @brief Set the global object variable
  * @param[in] pobj  Pointer to the object to process
  * @retval None
  */
void TSL_obj_SetGlobalObj(CONST TSL_Object_T *pobj)
{
 8012390:	b480      	push	{r7}
 8012392:	b083      	sub	sp, #12
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]

  TSL_Globals.This_Obj = pobj;
 8012398:	4a09      	ldr	r2, [pc, #36]	@ (80123c0 <TSL_obj_SetGlobalObj+0x30>)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	60d3      	str	r3, [r2, #12]

  switch (pobj->Type)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	3b20      	subs	r3, #32
 80123a4:	2b03      	cmp	r3, #3
 80123a6:	d804      	bhi.n	80123b2 <TSL_obj_SetGlobalObj+0x22>
#if TSLPRM_TOTAL_LNRTS > 0
    case TSL_OBJ_LINEAR:
    case TSL_OBJ_LINEARB:
    case TSL_OBJ_ROTARY:
    case TSL_OBJ_ROTARYB:
      TSL_Globals.This_LinRot = (TSL_LinRot_T *)pobj->Elmt;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	4a04      	ldr	r2, [pc, #16]	@ (80123c0 <TSL_obj_SetGlobalObj+0x30>)
 80123ae:	6153      	str	r3, [r2, #20]
      break;
 80123b0:	e000      	b.n	80123b4 <TSL_obj_SetGlobalObj+0x24>
#endif
    default:
      break;
 80123b2:	bf00      	nop
  }
}
 80123b4:	bf00      	nop
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr
 80123c0:	20029378 	.word	0x20029378

080123c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b084      	sub	sp, #16
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	460b      	mov	r3, r1
 80123ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80123d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80123d4:	f005 fc20 	bl	8017c18 <USBD_static_malloc>
 80123d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d105      	bne.n	80123ec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2200      	movs	r2, #0
 80123e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80123e8:	2302      	movs	r3, #2
 80123ea:	e066      	b.n	80124ba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	68fa      	ldr	r2, [r7, #12]
 80123f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	7c1b      	ldrb	r3, [r3, #16]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d119      	bne.n	8012430 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80123fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012400:	2202      	movs	r2, #2
 8012402:	2181      	movs	r1, #129	@ 0x81
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f005 fae4 	bl	80179d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2201      	movs	r2, #1
 801240e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012414:	2202      	movs	r2, #2
 8012416:	2101      	movs	r1, #1
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f005 fada 	bl	80179d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2201      	movs	r2, #1
 8012422:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2210      	movs	r2, #16
 801242a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 801242e:	e016      	b.n	801245e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012430:	2340      	movs	r3, #64	@ 0x40
 8012432:	2202      	movs	r2, #2
 8012434:	2181      	movs	r1, #129	@ 0x81
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f005 facb 	bl	80179d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2201      	movs	r2, #1
 8012440:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012442:	2340      	movs	r3, #64	@ 0x40
 8012444:	2202      	movs	r2, #2
 8012446:	2101      	movs	r1, #1
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f005 fac2 	bl	80179d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2201      	movs	r2, #1
 8012452:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2210      	movs	r2, #16
 801245a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801245e:	2308      	movs	r3, #8
 8012460:	2203      	movs	r2, #3
 8012462:	2182      	movs	r1, #130	@ 0x82
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f005 fab4 	bl	80179d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2201      	movs	r2, #1
 801246e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2200      	movs	r2, #0
 8012480:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2200      	movs	r2, #0
 8012488:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	7c1b      	ldrb	r3, [r3, #16]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d109      	bne.n	80124a8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801249a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801249e:	2101      	movs	r1, #1
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f005 fb85 	bl	8017bb0 <USBD_LL_PrepareReceive>
 80124a6:	e007      	b.n	80124b8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80124ae:	2340      	movs	r3, #64	@ 0x40
 80124b0:	2101      	movs	r1, #1
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f005 fb7c 	bl	8017bb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80124b8:	2300      	movs	r3, #0
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b082      	sub	sp, #8
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	460b      	mov	r3, r1
 80124cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80124ce:	2181      	movs	r1, #129	@ 0x81
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f005 faa4 	bl	8017a1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2200      	movs	r2, #0
 80124da:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80124dc:	2101      	movs	r1, #1
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f005 fa9d 	bl	8017a1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80124ec:	2182      	movs	r1, #130	@ 0x82
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f005 fa95 	bl	8017a1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2200      	movs	r2, #0
 80124f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2200      	movs	r2, #0
 8012500:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00e      	beq.n	801252c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801251e:	4618      	mov	r0, r3
 8012520:	f005 fb88 	bl	8017c34 <USBD_static_free>
    pdev->pClassData = NULL;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801252c:	2300      	movs	r3, #0
}
 801252e:	4618      	mov	r0, r3
 8012530:	3708      	adds	r7, #8
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
	...

08012538 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b086      	sub	sp, #24
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012548:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801254a:	2300      	movs	r3, #0
 801254c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801254e:	2300      	movs	r3, #0
 8012550:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012552:	2300      	movs	r3, #0
 8012554:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d101      	bne.n	8012560 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801255c:	2303      	movs	r3, #3
 801255e:	e0af      	b.n	80126c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012568:	2b00      	cmp	r3, #0
 801256a:	d03f      	beq.n	80125ec <USBD_CDC_Setup+0xb4>
 801256c:	2b20      	cmp	r3, #32
 801256e:	f040 809f 	bne.w	80126b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	88db      	ldrh	r3, [r3, #6]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d02e      	beq.n	80125d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	b25b      	sxtb	r3, r3
 8012580:	2b00      	cmp	r3, #0
 8012582:	da16      	bge.n	80125b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801258a:	689b      	ldr	r3, [r3, #8]
 801258c:	683a      	ldr	r2, [r7, #0]
 801258e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012590:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012592:	683a      	ldr	r2, [r7, #0]
 8012594:	88d2      	ldrh	r2, [r2, #6]
 8012596:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	88db      	ldrh	r3, [r3, #6]
 801259c:	2b07      	cmp	r3, #7
 801259e:	bf28      	it	cs
 80125a0:	2307      	movcs	r3, #7
 80125a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	89fa      	ldrh	r2, [r7, #14]
 80125a8:	4619      	mov	r1, r3
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f001 fab7 	bl	8013b1e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80125b0:	e085      	b.n	80126be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	785a      	ldrb	r2, [r3, #1]
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	88db      	ldrh	r3, [r3, #6]
 80125c0:	b2da      	uxtb	r2, r3
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80125c8:	6939      	ldr	r1, [r7, #16]
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	88db      	ldrh	r3, [r3, #6]
 80125ce:	461a      	mov	r2, r3
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f001 fad0 	bl	8013b76 <USBD_CtlPrepareRx>
      break;
 80125d6:	e072      	b.n	80126be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	683a      	ldr	r2, [r7, #0]
 80125e2:	7850      	ldrb	r0, [r2, #1]
 80125e4:	2200      	movs	r2, #0
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	4798      	blx	r3
      break;
 80125ea:	e068      	b.n	80126be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	785b      	ldrb	r3, [r3, #1]
 80125f0:	2b0b      	cmp	r3, #11
 80125f2:	d852      	bhi.n	801269a <USBD_CDC_Setup+0x162>
 80125f4:	a201      	add	r2, pc, #4	@ (adr r2, 80125fc <USBD_CDC_Setup+0xc4>)
 80125f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125fa:	bf00      	nop
 80125fc:	0801262d 	.word	0x0801262d
 8012600:	080126a9 	.word	0x080126a9
 8012604:	0801269b 	.word	0x0801269b
 8012608:	0801269b 	.word	0x0801269b
 801260c:	0801269b 	.word	0x0801269b
 8012610:	0801269b 	.word	0x0801269b
 8012614:	0801269b 	.word	0x0801269b
 8012618:	0801269b 	.word	0x0801269b
 801261c:	0801269b 	.word	0x0801269b
 8012620:	0801269b 	.word	0x0801269b
 8012624:	08012657 	.word	0x08012657
 8012628:	08012681 	.word	0x08012681
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012632:	b2db      	uxtb	r3, r3
 8012634:	2b03      	cmp	r3, #3
 8012636:	d107      	bne.n	8012648 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012638:	f107 030a 	add.w	r3, r7, #10
 801263c:	2202      	movs	r2, #2
 801263e:	4619      	mov	r1, r3
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f001 fa6c 	bl	8013b1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012646:	e032      	b.n	80126ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012648:	6839      	ldr	r1, [r7, #0]
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f001 f9f6 	bl	8013a3c <USBD_CtlError>
            ret = USBD_FAIL;
 8012650:	2303      	movs	r3, #3
 8012652:	75fb      	strb	r3, [r7, #23]
          break;
 8012654:	e02b      	b.n	80126ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801265c:	b2db      	uxtb	r3, r3
 801265e:	2b03      	cmp	r3, #3
 8012660:	d107      	bne.n	8012672 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012662:	f107 030d 	add.w	r3, r7, #13
 8012666:	2201      	movs	r2, #1
 8012668:	4619      	mov	r1, r3
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f001 fa57 	bl	8013b1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012670:	e01d      	b.n	80126ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012672:	6839      	ldr	r1, [r7, #0]
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f001 f9e1 	bl	8013a3c <USBD_CtlError>
            ret = USBD_FAIL;
 801267a:	2303      	movs	r3, #3
 801267c:	75fb      	strb	r3, [r7, #23]
          break;
 801267e:	e016      	b.n	80126ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012686:	b2db      	uxtb	r3, r3
 8012688:	2b03      	cmp	r3, #3
 801268a:	d00f      	beq.n	80126ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801268c:	6839      	ldr	r1, [r7, #0]
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f001 f9d4 	bl	8013a3c <USBD_CtlError>
            ret = USBD_FAIL;
 8012694:	2303      	movs	r3, #3
 8012696:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012698:	e008      	b.n	80126ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801269a:	6839      	ldr	r1, [r7, #0]
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f001 f9cd 	bl	8013a3c <USBD_CtlError>
          ret = USBD_FAIL;
 80126a2:	2303      	movs	r3, #3
 80126a4:	75fb      	strb	r3, [r7, #23]
          break;
 80126a6:	e002      	b.n	80126ae <USBD_CDC_Setup+0x176>
          break;
 80126a8:	bf00      	nop
 80126aa:	e008      	b.n	80126be <USBD_CDC_Setup+0x186>
          break;
 80126ac:	bf00      	nop
      }
      break;
 80126ae:	e006      	b.n	80126be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80126b0:	6839      	ldr	r1, [r7, #0]
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f001 f9c2 	bl	8013a3c <USBD_CtlError>
      ret = USBD_FAIL;
 80126b8:	2303      	movs	r3, #3
 80126ba:	75fb      	strb	r3, [r7, #23]
      break;
 80126bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80126be:	7dfb      	ldrb	r3, [r7, #23]
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3718      	adds	r7, #24
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	460b      	mov	r3, r1
 80126d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80126da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d101      	bne.n	80126ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80126e6:	2303      	movs	r3, #3
 80126e8:	e04f      	b.n	801278a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80126f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80126f2:	78fa      	ldrb	r2, [r7, #3]
 80126f4:	6879      	ldr	r1, [r7, #4]
 80126f6:	4613      	mov	r3, r2
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	4413      	add	r3, r2
 80126fc:	009b      	lsls	r3, r3, #2
 80126fe:	440b      	add	r3, r1
 8012700:	3318      	adds	r3, #24
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d029      	beq.n	801275c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012708:	78fa      	ldrb	r2, [r7, #3]
 801270a:	6879      	ldr	r1, [r7, #4]
 801270c:	4613      	mov	r3, r2
 801270e:	009b      	lsls	r3, r3, #2
 8012710:	4413      	add	r3, r2
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	440b      	add	r3, r1
 8012716:	3318      	adds	r3, #24
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	78f9      	ldrb	r1, [r7, #3]
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	460b      	mov	r3, r1
 8012720:	00db      	lsls	r3, r3, #3
 8012722:	440b      	add	r3, r1
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4403      	add	r3, r0
 8012728:	3344      	adds	r3, #68	@ 0x44
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	fbb2 f1f3 	udiv	r1, r2, r3
 8012730:	fb01 f303 	mul.w	r3, r1, r3
 8012734:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012736:	2b00      	cmp	r3, #0
 8012738:	d110      	bne.n	801275c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801273a:	78fa      	ldrb	r2, [r7, #3]
 801273c:	6879      	ldr	r1, [r7, #4]
 801273e:	4613      	mov	r3, r2
 8012740:	009b      	lsls	r3, r3, #2
 8012742:	4413      	add	r3, r2
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	440b      	add	r3, r1
 8012748:	3318      	adds	r3, #24
 801274a:	2200      	movs	r2, #0
 801274c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801274e:	78f9      	ldrb	r1, [r7, #3]
 8012750:	2300      	movs	r3, #0
 8012752:	2200      	movs	r2, #0
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f005 fa0a 	bl	8017b6e <USBD_LL_Transmit>
 801275a:	e015      	b.n	8012788 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	2200      	movs	r2, #0
 8012760:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801276a:	691b      	ldr	r3, [r3, #16]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d00b      	beq.n	8012788 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012776:	691b      	ldr	r3, [r3, #16]
 8012778:	68ba      	ldr	r2, [r7, #8]
 801277a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801277e:	68ba      	ldr	r2, [r7, #8]
 8012780:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012784:	78fa      	ldrb	r2, [r7, #3]
 8012786:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012788:	2300      	movs	r3, #0
}
 801278a:	4618      	mov	r0, r3
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}

08012792 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012792:	b580      	push	{r7, lr}
 8012794:	b084      	sub	sp, #16
 8012796:	af00      	add	r7, sp, #0
 8012798:	6078      	str	r0, [r7, #4]
 801279a:	460b      	mov	r3, r1
 801279c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80127a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d101      	bne.n	80127b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80127b0:	2303      	movs	r3, #3
 80127b2:	e015      	b.n	80127e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80127b4:	78fb      	ldrb	r3, [r7, #3]
 80127b6:	4619      	mov	r1, r3
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f005 fa1a 	bl	8017bf2 <USBD_LL_GetRxDataSize>
 80127be:	4602      	mov	r2, r0
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	68fa      	ldr	r2, [r7, #12]
 80127d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80127d4:	68fa      	ldr	r2, [r7, #12]
 80127d6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80127da:	4611      	mov	r1, r2
 80127dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80127de:	2300      	movs	r3, #0
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3710      	adds	r7, #16
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b084      	sub	sp, #16
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80127f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d101      	bne.n	8012802 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80127fe:	2303      	movs	r3, #3
 8012800:	e01a      	b.n	8012838 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d014      	beq.n	8012836 <USBD_CDC_EP0_RxReady+0x4e>
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012812:	2bff      	cmp	r3, #255	@ 0xff
 8012814:	d00f      	beq.n	8012836 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	68fa      	ldr	r2, [r7, #12]
 8012820:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8012824:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012826:	68fa      	ldr	r2, [r7, #12]
 8012828:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801282c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	22ff      	movs	r2, #255	@ 0xff
 8012832:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8012836:	2300      	movs	r3, #0
}
 8012838:	4618      	mov	r0, r3
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2243      	movs	r2, #67	@ 0x43
 801284c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801284e:	4b03      	ldr	r3, [pc, #12]	@ (801285c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012850:	4618      	mov	r0, r3
 8012852:	370c      	adds	r7, #12
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr
 801285c:	200000e4 	.word	0x200000e4

08012860 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012860:	b480      	push	{r7}
 8012862:	b083      	sub	sp, #12
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2243      	movs	r2, #67	@ 0x43
 801286c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801286e:	4b03      	ldr	r3, [pc, #12]	@ (801287c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012870:	4618      	mov	r0, r3
 8012872:	370c      	adds	r7, #12
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr
 801287c:	200000a0 	.word	0x200000a0

08012880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012880:	b480      	push	{r7}
 8012882:	b083      	sub	sp, #12
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2243      	movs	r2, #67	@ 0x43
 801288c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801288e:	4b03      	ldr	r3, [pc, #12]	@ (801289c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012890:	4618      	mov	r0, r3
 8012892:	370c      	adds	r7, #12
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr
 801289c:	20000128 	.word	0x20000128

080128a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	220a      	movs	r2, #10
 80128ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80128ae:	4b03      	ldr	r3, [pc, #12]	@ (80128bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	370c      	adds	r7, #12
 80128b4:	46bd      	mov	sp, r7
 80128b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ba:	4770      	bx	lr
 80128bc:	2000005c 	.word	0x2000005c

080128c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b083      	sub	sp, #12
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d101      	bne.n	80128d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80128d0:	2303      	movs	r3, #3
 80128d2:	e004      	b.n	80128de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	683a      	ldr	r2, [r7, #0]
 80128d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80128dc:	2300      	movs	r3, #0
}
 80128de:	4618      	mov	r0, r3
 80128e0:	370c      	adds	r7, #12
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr

080128ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80128ea:	b480      	push	{r7}
 80128ec:	b087      	sub	sp, #28
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	60f8      	str	r0, [r7, #12]
 80128f2:	60b9      	str	r1, [r7, #8]
 80128f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80128fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d101      	bne.n	8012908 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012904:	2303      	movs	r3, #3
 8012906:	e008      	b.n	801291a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	68ba      	ldr	r2, [r7, #8]
 801290c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012918:	2300      	movs	r3, #0
}
 801291a:	4618      	mov	r0, r3
 801291c:	371c      	adds	r7, #28
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr

08012926 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012926:	b480      	push	{r7}
 8012928:	b085      	sub	sp, #20
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
 801292e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012936:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d101      	bne.n	8012942 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801293e:	2303      	movs	r3, #3
 8012940:	e004      	b.n	801294c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	683a      	ldr	r2, [r7, #0]
 8012946:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801294a:	2300      	movs	r3, #0
}
 801294c:	4618      	mov	r0, r3
 801294e:	3714      	adds	r7, #20
 8012950:	46bd      	mov	sp, r7
 8012952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012956:	4770      	bx	lr

08012958 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801296e:	2b00      	cmp	r3, #0
 8012970:	d101      	bne.n	8012976 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012972:	2303      	movs	r3, #3
 8012974:	e016      	b.n	80129a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	7c1b      	ldrb	r3, [r3, #16]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d109      	bne.n	8012992 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012988:	2101      	movs	r1, #1
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f005 f910 	bl	8017bb0 <USBD_LL_PrepareReceive>
 8012990:	e007      	b.n	80129a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012998:	2340      	movs	r3, #64	@ 0x40
 801299a:	2101      	movs	r1, #1
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f005 f907 	bl	8017bb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80129a2:	2300      	movs	r3, #0
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3710      	adds	r7, #16
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b084      	sub	sp, #16
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80129b6:	2300      	movs	r3, #0
 80129b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d101      	bne.n	80129c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80129c0:	2303      	movs	r3, #3
 80129c2:	e016      	b.n	80129f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	683a      	ldr	r2, [r7, #0]
 80129c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d00b      	beq.n	80129f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129e0:	f107 020e 	add.w	r2, r7, #14
 80129e4:	4610      	mov	r0, r2
 80129e6:	4798      	blx	r3
 80129e8:	4602      	mov	r2, r0
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80129f0:	2300      	movs	r3, #0
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3710      	adds	r7, #16
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}

080129fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80129fa:	b580      	push	{r7, lr}
 80129fc:	b082      	sub	sp, #8
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f004 ffca 	bl	801799c <USBD_LL_Start>
 8012a08:	4603      	mov	r3, r0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012a12:	b480      	push	{r7}
 8012a14:	b083      	sub	sp, #12
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012a1a:	2300      	movs	r3, #0
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	370c      	adds	r7, #12
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr

08012a28 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	460b      	mov	r3, r1
 8012a32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012a34:	2303      	movs	r3, #3
 8012a36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d009      	beq.n	8012a56 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	78fa      	ldrb	r2, [r7, #3]
 8012a4c:	4611      	mov	r1, r2
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	4798      	blx	r3
 8012a52:	4603      	mov	r3, r0
 8012a54:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3710      	adds	r7, #16
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	460b      	mov	r3, r1
 8012a6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d007      	beq.n	8012a86 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	78fa      	ldrb	r2, [r7, #3]
 8012a80:	4611      	mov	r1, r2
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	4798      	blx	r3
  }

  return USBD_OK;
 8012a86:	2300      	movs	r3, #0
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3708      	adds	r7, #8
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012aa0:	6839      	ldr	r1, [r7, #0]
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f000 ff90 	bl	80139c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2201      	movs	r2, #1
 8012aac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012ac4:	f003 031f 	and.w	r3, r3, #31
 8012ac8:	2b02      	cmp	r3, #2
 8012aca:	d01a      	beq.n	8012b02 <USBD_LL_SetupStage+0x72>
 8012acc:	2b02      	cmp	r3, #2
 8012ace:	d822      	bhi.n	8012b16 <USBD_LL_SetupStage+0x86>
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d002      	beq.n	8012ada <USBD_LL_SetupStage+0x4a>
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d00a      	beq.n	8012aee <USBD_LL_SetupStage+0x5e>
 8012ad8:	e01d      	b.n	8012b16 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f000 fa62 	bl	8012fac <USBD_StdDevReq>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	73fb      	strb	r3, [r7, #15]
      break;
 8012aec:	e020      	b.n	8012b30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012af4:	4619      	mov	r1, r3
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 fac6 	bl	8013088 <USBD_StdItfReq>
 8012afc:	4603      	mov	r3, r0
 8012afe:	73fb      	strb	r3, [r7, #15]
      break;
 8012b00:	e016      	b.n	8012b30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b08:	4619      	mov	r1, r3
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f000 fb05 	bl	801311a <USBD_StdEPReq>
 8012b10:	4603      	mov	r3, r0
 8012b12:	73fb      	strb	r3, [r7, #15]
      break;
 8012b14:	e00c      	b.n	8012b30 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012b1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	4619      	mov	r1, r3
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f004 ff99 	bl	8017a5c <USBD_LL_StallEP>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8012b2e:	bf00      	nop
  }

  return ret;
 8012b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3710      	adds	r7, #16
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b086      	sub	sp, #24
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	60f8      	str	r0, [r7, #12]
 8012b42:	460b      	mov	r3, r1
 8012b44:	607a      	str	r2, [r7, #4]
 8012b46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012b48:	7afb      	ldrb	r3, [r7, #11]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d138      	bne.n	8012bc0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012b54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012b5c:	2b03      	cmp	r3, #3
 8012b5e:	d14a      	bne.n	8012bf6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	689a      	ldr	r2, [r3, #8]
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d913      	bls.n	8012b94 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	689a      	ldr	r2, [r3, #8]
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	1ad2      	subs	r2, r2, r3
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	68da      	ldr	r2, [r3, #12]
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	4293      	cmp	r3, r2
 8012b84:	bf28      	it	cs
 8012b86:	4613      	movcs	r3, r2
 8012b88:	461a      	mov	r2, r3
 8012b8a:	6879      	ldr	r1, [r7, #4]
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f001 f80f 	bl	8013bb0 <USBD_CtlContinueRx>
 8012b92:	e030      	b.n	8012bf6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b9a:	b2db      	uxtb	r3, r3
 8012b9c:	2b03      	cmp	r3, #3
 8012b9e:	d10b      	bne.n	8012bb8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ba6:	691b      	ldr	r3, [r3, #16]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d005      	beq.n	8012bb8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bb2:	691b      	ldr	r3, [r3, #16]
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012bb8:	68f8      	ldr	r0, [r7, #12]
 8012bba:	f001 f80a 	bl	8013bd2 <USBD_CtlSendStatus>
 8012bbe:	e01a      	b.n	8012bf6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	2b03      	cmp	r3, #3
 8012bca:	d114      	bne.n	8012bf6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bd2:	699b      	ldr	r3, [r3, #24]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00e      	beq.n	8012bf6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bde:	699b      	ldr	r3, [r3, #24]
 8012be0:	7afa      	ldrb	r2, [r7, #11]
 8012be2:	4611      	mov	r1, r2
 8012be4:	68f8      	ldr	r0, [r7, #12]
 8012be6:	4798      	blx	r3
 8012be8:	4603      	mov	r3, r0
 8012bea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012bec:	7dfb      	ldrb	r3, [r7, #23]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d001      	beq.n	8012bf6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8012bf2:	7dfb      	ldrb	r3, [r7, #23]
 8012bf4:	e000      	b.n	8012bf8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8012bf6:	2300      	movs	r3, #0
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3718      	adds	r7, #24
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b086      	sub	sp, #24
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	60f8      	str	r0, [r7, #12]
 8012c08:	460b      	mov	r3, r1
 8012c0a:	607a      	str	r2, [r7, #4]
 8012c0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012c0e:	7afb      	ldrb	r3, [r7, #11]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d16b      	bne.n	8012cec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	3314      	adds	r3, #20
 8012c18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012c20:	2b02      	cmp	r3, #2
 8012c22:	d156      	bne.n	8012cd2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	689a      	ldr	r2, [r3, #8]
 8012c28:	693b      	ldr	r3, [r7, #16]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d914      	bls.n	8012c5a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	689a      	ldr	r2, [r3, #8]
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	68db      	ldr	r3, [r3, #12]
 8012c38:	1ad2      	subs	r2, r2, r3
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	689b      	ldr	r3, [r3, #8]
 8012c42:	461a      	mov	r2, r3
 8012c44:	6879      	ldr	r1, [r7, #4]
 8012c46:	68f8      	ldr	r0, [r7, #12]
 8012c48:	f000 ff84 	bl	8013b54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	2200      	movs	r2, #0
 8012c50:	2100      	movs	r1, #0
 8012c52:	68f8      	ldr	r0, [r7, #12]
 8012c54:	f004 ffac 	bl	8017bb0 <USBD_LL_PrepareReceive>
 8012c58:	e03b      	b.n	8012cd2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	68da      	ldr	r2, [r3, #12]
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d11c      	bne.n	8012ca0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	685a      	ldr	r2, [r3, #4]
 8012c6a:	693b      	ldr	r3, [r7, #16]
 8012c6c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d316      	bcc.n	8012ca0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	685a      	ldr	r2, [r3, #4]
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d20f      	bcs.n	8012ca0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012c80:	2200      	movs	r2, #0
 8012c82:	2100      	movs	r1, #0
 8012c84:	68f8      	ldr	r0, [r7, #12]
 8012c86:	f000 ff65 	bl	8013b54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c92:	2300      	movs	r3, #0
 8012c94:	2200      	movs	r2, #0
 8012c96:	2100      	movs	r1, #0
 8012c98:	68f8      	ldr	r0, [r7, #12]
 8012c9a:	f004 ff89 	bl	8017bb0 <USBD_LL_PrepareReceive>
 8012c9e:	e018      	b.n	8012cd2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	2b03      	cmp	r3, #3
 8012caa:	d10b      	bne.n	8012cc4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d005      	beq.n	8012cc4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cbe:	68db      	ldr	r3, [r3, #12]
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012cc4:	2180      	movs	r1, #128	@ 0x80
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f004 fec8 	bl	8017a5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012ccc:	68f8      	ldr	r0, [r7, #12]
 8012cce:	f000 ff93 	bl	8013bf8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	d122      	bne.n	8012d22 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f7ff fe98 	bl	8012a12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012cea:	e01a      	b.n	8012d22 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	2b03      	cmp	r3, #3
 8012cf6:	d114      	bne.n	8012d22 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cfe:	695b      	ldr	r3, [r3, #20]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d00e      	beq.n	8012d22 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d0a:	695b      	ldr	r3, [r3, #20]
 8012d0c:	7afa      	ldrb	r2, [r7, #11]
 8012d0e:	4611      	mov	r1, r2
 8012d10:	68f8      	ldr	r0, [r7, #12]
 8012d12:	4798      	blx	r3
 8012d14:	4603      	mov	r3, r0
 8012d16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012d18:	7dfb      	ldrb	r3, [r7, #23]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012d1e:	7dfb      	ldrb	r3, [r7, #23]
 8012d20:	e000      	b.n	8012d24 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012d22:	2300      	movs	r3, #0
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	3718      	adds	r7, #24
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}

08012d2c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2201      	movs	r2, #1
 8012d38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2200      	movs	r2, #0
 8012d48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d101      	bne.n	8012d60 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012d5c:	2303      	movs	r3, #3
 8012d5e:	e02f      	b.n	8012dc0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00f      	beq.n	8012d8a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d009      	beq.n	8012d8a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	6852      	ldr	r2, [r2, #4]
 8012d82:	b2d2      	uxtb	r2, r2
 8012d84:	4611      	mov	r1, r2
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012d8a:	2340      	movs	r3, #64	@ 0x40
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	2100      	movs	r1, #0
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f004 fe1e 	bl	80179d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2201      	movs	r2, #1
 8012d9a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2240      	movs	r2, #64	@ 0x40
 8012da2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012da6:	2340      	movs	r3, #64	@ 0x40
 8012da8:	2200      	movs	r2, #0
 8012daa:	2180      	movs	r1, #128	@ 0x80
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f004 fe10 	bl	80179d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2201      	movs	r2, #1
 8012db6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2240      	movs	r2, #64	@ 0x40
 8012dbc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012dbe:	2300      	movs	r3, #0
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012dc8:	b480      	push	{r7}
 8012dca:	b083      	sub	sp, #12
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	78fa      	ldrb	r2, [r7, #3]
 8012dd8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012dda:	2300      	movs	r3, #0
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	370c      	adds	r7, #12
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr

08012de8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012df6:	b2da      	uxtb	r2, r3
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2204      	movs	r2, #4
 8012e02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012e06:	2300      	movs	r3, #0
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	370c      	adds	r7, #12
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e12:	4770      	bx	lr

08012e14 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012e14:	b480      	push	{r7}
 8012e16:	b083      	sub	sp, #12
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	2b04      	cmp	r3, #4
 8012e26:	d106      	bne.n	8012e36 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012e2e:	b2da      	uxtb	r2, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012e36:	2300      	movs	r3, #0
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	370c      	adds	r7, #12
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr

08012e44 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d101      	bne.n	8012e5a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012e56:	2303      	movs	r3, #3
 8012e58:	e012      	b.n	8012e80 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e60:	b2db      	uxtb	r3, r3
 8012e62:	2b03      	cmp	r3, #3
 8012e64:	d10b      	bne.n	8012e7e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e6c:	69db      	ldr	r3, [r3, #28]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d005      	beq.n	8012e7e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e78:	69db      	ldr	r3, [r3, #28]
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	460b      	mov	r3, r1
 8012e92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d101      	bne.n	8012ea2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012e9e:	2303      	movs	r3, #3
 8012ea0:	e014      	b.n	8012ecc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	2b03      	cmp	r3, #3
 8012eac:	d10d      	bne.n	8012eca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012eb4:	6a1b      	ldr	r3, [r3, #32]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d007      	beq.n	8012eca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ec0:	6a1b      	ldr	r3, [r3, #32]
 8012ec2:	78fa      	ldrb	r2, [r7, #3]
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012eca:	2300      	movs	r3, #0
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	460b      	mov	r3, r1
 8012ede:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d101      	bne.n	8012eee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012eea:	2303      	movs	r3, #3
 8012eec:	e014      	b.n	8012f18 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ef4:	b2db      	uxtb	r3, r3
 8012ef6:	2b03      	cmp	r3, #3
 8012ef8:	d10d      	bne.n	8012f16 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d007      	beq.n	8012f16 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f0e:	78fa      	ldrb	r2, [r7, #3]
 8012f10:	4611      	mov	r1, r2
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012f16:	2300      	movs	r3, #0
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3708      	adds	r7, #8
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012f20:	b480      	push	{r7}
 8012f22:	b083      	sub	sp, #12
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012f28:	2300      	movs	r3, #0
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	370c      	adds	r7, #12
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr

08012f36 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012f36:	b580      	push	{r7, lr}
 8012f38:	b082      	sub	sp, #8
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2201      	movs	r2, #1
 8012f42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d009      	beq.n	8012f64 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	6852      	ldr	r2, [r2, #4]
 8012f5c:	b2d2      	uxtb	r2, r2
 8012f5e:	4611      	mov	r1, r2
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	4798      	blx	r3
  }

  return USBD_OK;
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3708      	adds	r7, #8
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}

08012f6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012f6e:	b480      	push	{r7}
 8012f70:	b087      	sub	sp, #28
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	3301      	adds	r3, #1
 8012f84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012f8c:	8a3b      	ldrh	r3, [r7, #16]
 8012f8e:	021b      	lsls	r3, r3, #8
 8012f90:	b21a      	sxth	r2, r3
 8012f92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f96:	4313      	orrs	r3, r2
 8012f98:	b21b      	sxth	r3, r3
 8012f9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012f9c:	89fb      	ldrh	r3, [r7, #14]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	371c      	adds	r7, #28
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa8:	4770      	bx	lr
	...

08012fac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b084      	sub	sp, #16
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012fc2:	2b40      	cmp	r3, #64	@ 0x40
 8012fc4:	d005      	beq.n	8012fd2 <USBD_StdDevReq+0x26>
 8012fc6:	2b40      	cmp	r3, #64	@ 0x40
 8012fc8:	d853      	bhi.n	8013072 <USBD_StdDevReq+0xc6>
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d00b      	beq.n	8012fe6 <USBD_StdDevReq+0x3a>
 8012fce:	2b20      	cmp	r3, #32
 8012fd0:	d14f      	bne.n	8013072 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	6839      	ldr	r1, [r7, #0]
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	4798      	blx	r3
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8012fe4:	e04a      	b.n	801307c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	785b      	ldrb	r3, [r3, #1]
 8012fea:	2b09      	cmp	r3, #9
 8012fec:	d83b      	bhi.n	8013066 <USBD_StdDevReq+0xba>
 8012fee:	a201      	add	r2, pc, #4	@ (adr r2, 8012ff4 <USBD_StdDevReq+0x48>)
 8012ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff4:	08013049 	.word	0x08013049
 8012ff8:	0801305d 	.word	0x0801305d
 8012ffc:	08013067 	.word	0x08013067
 8013000:	08013053 	.word	0x08013053
 8013004:	08013067 	.word	0x08013067
 8013008:	08013027 	.word	0x08013027
 801300c:	0801301d 	.word	0x0801301d
 8013010:	08013067 	.word	0x08013067
 8013014:	0801303f 	.word	0x0801303f
 8013018:	08013031 	.word	0x08013031
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801301c:	6839      	ldr	r1, [r7, #0]
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 f9de 	bl	80133e0 <USBD_GetDescriptor>
          break;
 8013024:	e024      	b.n	8013070 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013026:	6839      	ldr	r1, [r7, #0]
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 fb43 	bl	80136b4 <USBD_SetAddress>
          break;
 801302e:	e01f      	b.n	8013070 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013030:	6839      	ldr	r1, [r7, #0]
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 fb82 	bl	801373c <USBD_SetConfig>
 8013038:	4603      	mov	r3, r0
 801303a:	73fb      	strb	r3, [r7, #15]
          break;
 801303c:	e018      	b.n	8013070 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801303e:	6839      	ldr	r1, [r7, #0]
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f000 fc21 	bl	8013888 <USBD_GetConfig>
          break;
 8013046:	e013      	b.n	8013070 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013048:	6839      	ldr	r1, [r7, #0]
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f000 fc52 	bl	80138f4 <USBD_GetStatus>
          break;
 8013050:	e00e      	b.n	8013070 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013052:	6839      	ldr	r1, [r7, #0]
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f000 fc81 	bl	801395c <USBD_SetFeature>
          break;
 801305a:	e009      	b.n	8013070 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801305c:	6839      	ldr	r1, [r7, #0]
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fc90 	bl	8013984 <USBD_ClrFeature>
          break;
 8013064:	e004      	b.n	8013070 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013066:	6839      	ldr	r1, [r7, #0]
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	f000 fce7 	bl	8013a3c <USBD_CtlError>
          break;
 801306e:	bf00      	nop
      }
      break;
 8013070:	e004      	b.n	801307c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013072:	6839      	ldr	r1, [r7, #0]
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f000 fce1 	bl	8013a3c <USBD_CtlError>
      break;
 801307a:	bf00      	nop
  }

  return ret;
 801307c:	7bfb      	ldrb	r3, [r7, #15]
}
 801307e:	4618      	mov	r0, r3
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop

08013088 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013092:	2300      	movs	r3, #0
 8013094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	781b      	ldrb	r3, [r3, #0]
 801309a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801309e:	2b40      	cmp	r3, #64	@ 0x40
 80130a0:	d005      	beq.n	80130ae <USBD_StdItfReq+0x26>
 80130a2:	2b40      	cmp	r3, #64	@ 0x40
 80130a4:	d82f      	bhi.n	8013106 <USBD_StdItfReq+0x7e>
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d001      	beq.n	80130ae <USBD_StdItfReq+0x26>
 80130aa:	2b20      	cmp	r3, #32
 80130ac:	d12b      	bne.n	8013106 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80130b4:	b2db      	uxtb	r3, r3
 80130b6:	3b01      	subs	r3, #1
 80130b8:	2b02      	cmp	r3, #2
 80130ba:	d81d      	bhi.n	80130f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	889b      	ldrh	r3, [r3, #4]
 80130c0:	b2db      	uxtb	r3, r3
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d813      	bhi.n	80130ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80130cc:	689b      	ldr	r3, [r3, #8]
 80130ce:	6839      	ldr	r1, [r7, #0]
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	4798      	blx	r3
 80130d4:	4603      	mov	r3, r0
 80130d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	88db      	ldrh	r3, [r3, #6]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d110      	bne.n	8013102 <USBD_StdItfReq+0x7a>
 80130e0:	7bfb      	ldrb	r3, [r7, #15]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d10d      	bne.n	8013102 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f000 fd73 	bl	8013bd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80130ec:	e009      	b.n	8013102 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80130ee:	6839      	ldr	r1, [r7, #0]
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f000 fca3 	bl	8013a3c <USBD_CtlError>
          break;
 80130f6:	e004      	b.n	8013102 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80130f8:	6839      	ldr	r1, [r7, #0]
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f000 fc9e 	bl	8013a3c <USBD_CtlError>
          break;
 8013100:	e000      	b.n	8013104 <USBD_StdItfReq+0x7c>
          break;
 8013102:	bf00      	nop
      }
      break;
 8013104:	e004      	b.n	8013110 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013106:	6839      	ldr	r1, [r7, #0]
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f000 fc97 	bl	8013a3c <USBD_CtlError>
      break;
 801310e:	bf00      	nop
  }

  return ret;
 8013110:	7bfb      	ldrb	r3, [r7, #15]
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801311a:	b580      	push	{r7, lr}
 801311c:	b084      	sub	sp, #16
 801311e:	af00      	add	r7, sp, #0
 8013120:	6078      	str	r0, [r7, #4]
 8013122:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013124:	2300      	movs	r3, #0
 8013126:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	889b      	ldrh	r3, [r3, #4]
 801312c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013136:	2b40      	cmp	r3, #64	@ 0x40
 8013138:	d007      	beq.n	801314a <USBD_StdEPReq+0x30>
 801313a:	2b40      	cmp	r3, #64	@ 0x40
 801313c:	f200 8145 	bhi.w	80133ca <USBD_StdEPReq+0x2b0>
 8013140:	2b00      	cmp	r3, #0
 8013142:	d00c      	beq.n	801315e <USBD_StdEPReq+0x44>
 8013144:	2b20      	cmp	r3, #32
 8013146:	f040 8140 	bne.w	80133ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013150:	689b      	ldr	r3, [r3, #8]
 8013152:	6839      	ldr	r1, [r7, #0]
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	4798      	blx	r3
 8013158:	4603      	mov	r3, r0
 801315a:	73fb      	strb	r3, [r7, #15]
      break;
 801315c:	e13a      	b.n	80133d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	785b      	ldrb	r3, [r3, #1]
 8013162:	2b03      	cmp	r3, #3
 8013164:	d007      	beq.n	8013176 <USBD_StdEPReq+0x5c>
 8013166:	2b03      	cmp	r3, #3
 8013168:	f300 8129 	bgt.w	80133be <USBD_StdEPReq+0x2a4>
 801316c:	2b00      	cmp	r3, #0
 801316e:	d07f      	beq.n	8013270 <USBD_StdEPReq+0x156>
 8013170:	2b01      	cmp	r3, #1
 8013172:	d03c      	beq.n	80131ee <USBD_StdEPReq+0xd4>
 8013174:	e123      	b.n	80133be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801317c:	b2db      	uxtb	r3, r3
 801317e:	2b02      	cmp	r3, #2
 8013180:	d002      	beq.n	8013188 <USBD_StdEPReq+0x6e>
 8013182:	2b03      	cmp	r3, #3
 8013184:	d016      	beq.n	80131b4 <USBD_StdEPReq+0x9a>
 8013186:	e02c      	b.n	80131e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013188:	7bbb      	ldrb	r3, [r7, #14]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d00d      	beq.n	80131aa <USBD_StdEPReq+0x90>
 801318e:	7bbb      	ldrb	r3, [r7, #14]
 8013190:	2b80      	cmp	r3, #128	@ 0x80
 8013192:	d00a      	beq.n	80131aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013194:	7bbb      	ldrb	r3, [r7, #14]
 8013196:	4619      	mov	r1, r3
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f004 fc5f 	bl	8017a5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801319e:	2180      	movs	r1, #128	@ 0x80
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f004 fc5b 	bl	8017a5c <USBD_LL_StallEP>
 80131a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80131a8:	e020      	b.n	80131ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80131aa:	6839      	ldr	r1, [r7, #0]
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f000 fc45 	bl	8013a3c <USBD_CtlError>
              break;
 80131b2:	e01b      	b.n	80131ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	885b      	ldrh	r3, [r3, #2]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d10e      	bne.n	80131da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80131bc:	7bbb      	ldrb	r3, [r7, #14]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d00b      	beq.n	80131da <USBD_StdEPReq+0xc0>
 80131c2:	7bbb      	ldrb	r3, [r7, #14]
 80131c4:	2b80      	cmp	r3, #128	@ 0x80
 80131c6:	d008      	beq.n	80131da <USBD_StdEPReq+0xc0>
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	88db      	ldrh	r3, [r3, #6]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d104      	bne.n	80131da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80131d0:	7bbb      	ldrb	r3, [r7, #14]
 80131d2:	4619      	mov	r1, r3
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f004 fc41 	bl	8017a5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f000 fcf9 	bl	8013bd2 <USBD_CtlSendStatus>

              break;
 80131e0:	e004      	b.n	80131ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80131e2:	6839      	ldr	r1, [r7, #0]
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f000 fc29 	bl	8013a3c <USBD_CtlError>
              break;
 80131ea:	bf00      	nop
          }
          break;
 80131ec:	e0ec      	b.n	80133c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	2b02      	cmp	r3, #2
 80131f8:	d002      	beq.n	8013200 <USBD_StdEPReq+0xe6>
 80131fa:	2b03      	cmp	r3, #3
 80131fc:	d016      	beq.n	801322c <USBD_StdEPReq+0x112>
 80131fe:	e030      	b.n	8013262 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013200:	7bbb      	ldrb	r3, [r7, #14]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d00d      	beq.n	8013222 <USBD_StdEPReq+0x108>
 8013206:	7bbb      	ldrb	r3, [r7, #14]
 8013208:	2b80      	cmp	r3, #128	@ 0x80
 801320a:	d00a      	beq.n	8013222 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801320c:	7bbb      	ldrb	r3, [r7, #14]
 801320e:	4619      	mov	r1, r3
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f004 fc23 	bl	8017a5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013216:	2180      	movs	r1, #128	@ 0x80
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f004 fc1f 	bl	8017a5c <USBD_LL_StallEP>
 801321e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013220:	e025      	b.n	801326e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013222:	6839      	ldr	r1, [r7, #0]
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 fc09 	bl	8013a3c <USBD_CtlError>
              break;
 801322a:	e020      	b.n	801326e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	885b      	ldrh	r3, [r3, #2]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d11b      	bne.n	801326c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013234:	7bbb      	ldrb	r3, [r7, #14]
 8013236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801323a:	2b00      	cmp	r3, #0
 801323c:	d004      	beq.n	8013248 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801323e:	7bbb      	ldrb	r3, [r7, #14]
 8013240:	4619      	mov	r1, r3
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f004 fc29 	bl	8017a9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f000 fcc2 	bl	8013bd2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013254:	689b      	ldr	r3, [r3, #8]
 8013256:	6839      	ldr	r1, [r7, #0]
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	4798      	blx	r3
 801325c:	4603      	mov	r3, r0
 801325e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013260:	e004      	b.n	801326c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013262:	6839      	ldr	r1, [r7, #0]
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f000 fbe9 	bl	8013a3c <USBD_CtlError>
              break;
 801326a:	e000      	b.n	801326e <USBD_StdEPReq+0x154>
              break;
 801326c:	bf00      	nop
          }
          break;
 801326e:	e0ab      	b.n	80133c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013276:	b2db      	uxtb	r3, r3
 8013278:	2b02      	cmp	r3, #2
 801327a:	d002      	beq.n	8013282 <USBD_StdEPReq+0x168>
 801327c:	2b03      	cmp	r3, #3
 801327e:	d032      	beq.n	80132e6 <USBD_StdEPReq+0x1cc>
 8013280:	e097      	b.n	80133b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013282:	7bbb      	ldrb	r3, [r7, #14]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d007      	beq.n	8013298 <USBD_StdEPReq+0x17e>
 8013288:	7bbb      	ldrb	r3, [r7, #14]
 801328a:	2b80      	cmp	r3, #128	@ 0x80
 801328c:	d004      	beq.n	8013298 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801328e:	6839      	ldr	r1, [r7, #0]
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f000 fbd3 	bl	8013a3c <USBD_CtlError>
                break;
 8013296:	e091      	b.n	80133bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801329c:	2b00      	cmp	r3, #0
 801329e:	da0b      	bge.n	80132b8 <USBD_StdEPReq+0x19e>
 80132a0:	7bbb      	ldrb	r3, [r7, #14]
 80132a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80132a6:	4613      	mov	r3, r2
 80132a8:	009b      	lsls	r3, r3, #2
 80132aa:	4413      	add	r3, r2
 80132ac:	009b      	lsls	r3, r3, #2
 80132ae:	3310      	adds	r3, #16
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	4413      	add	r3, r2
 80132b4:	3304      	adds	r3, #4
 80132b6:	e00b      	b.n	80132d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80132b8:	7bbb      	ldrb	r3, [r7, #14]
 80132ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80132be:	4613      	mov	r3, r2
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	4413      	add	r3, r2
 80132c4:	009b      	lsls	r3, r3, #2
 80132c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80132ca:	687a      	ldr	r2, [r7, #4]
 80132cc:	4413      	add	r3, r2
 80132ce:	3304      	adds	r3, #4
 80132d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	2200      	movs	r2, #0
 80132d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	2202      	movs	r2, #2
 80132dc:	4619      	mov	r1, r3
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f000 fc1d 	bl	8013b1e <USBD_CtlSendData>
              break;
 80132e4:	e06a      	b.n	80133bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80132e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	da11      	bge.n	8013312 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80132ee:	7bbb      	ldrb	r3, [r7, #14]
 80132f0:	f003 020f 	and.w	r2, r3, #15
 80132f4:	6879      	ldr	r1, [r7, #4]
 80132f6:	4613      	mov	r3, r2
 80132f8:	009b      	lsls	r3, r3, #2
 80132fa:	4413      	add	r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	440b      	add	r3, r1
 8013300:	3324      	adds	r3, #36	@ 0x24
 8013302:	881b      	ldrh	r3, [r3, #0]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d117      	bne.n	8013338 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013308:	6839      	ldr	r1, [r7, #0]
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 fb96 	bl	8013a3c <USBD_CtlError>
                  break;
 8013310:	e054      	b.n	80133bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013312:	7bbb      	ldrb	r3, [r7, #14]
 8013314:	f003 020f 	and.w	r2, r3, #15
 8013318:	6879      	ldr	r1, [r7, #4]
 801331a:	4613      	mov	r3, r2
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	4413      	add	r3, r2
 8013320:	009b      	lsls	r3, r3, #2
 8013322:	440b      	add	r3, r1
 8013324:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013328:	881b      	ldrh	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d104      	bne.n	8013338 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801332e:	6839      	ldr	r1, [r7, #0]
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f000 fb83 	bl	8013a3c <USBD_CtlError>
                  break;
 8013336:	e041      	b.n	80133bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801333c:	2b00      	cmp	r3, #0
 801333e:	da0b      	bge.n	8013358 <USBD_StdEPReq+0x23e>
 8013340:	7bbb      	ldrb	r3, [r7, #14]
 8013342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013346:	4613      	mov	r3, r2
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	4413      	add	r3, r2
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	3310      	adds	r3, #16
 8013350:	687a      	ldr	r2, [r7, #4]
 8013352:	4413      	add	r3, r2
 8013354:	3304      	adds	r3, #4
 8013356:	e00b      	b.n	8013370 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013358:	7bbb      	ldrb	r3, [r7, #14]
 801335a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801335e:	4613      	mov	r3, r2
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	4413      	add	r3, r2
 8013364:	009b      	lsls	r3, r3, #2
 8013366:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	4413      	add	r3, r2
 801336e:	3304      	adds	r3, #4
 8013370:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013372:	7bbb      	ldrb	r3, [r7, #14]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <USBD_StdEPReq+0x264>
 8013378:	7bbb      	ldrb	r3, [r7, #14]
 801337a:	2b80      	cmp	r3, #128	@ 0x80
 801337c:	d103      	bne.n	8013386 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	2200      	movs	r2, #0
 8013382:	601a      	str	r2, [r3, #0]
 8013384:	e00e      	b.n	80133a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013386:	7bbb      	ldrb	r3, [r7, #14]
 8013388:	4619      	mov	r1, r3
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f004 fba4 	bl	8017ad8 <USBD_LL_IsStallEP>
 8013390:	4603      	mov	r3, r0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d003      	beq.n	801339e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	2201      	movs	r2, #1
 801339a:	601a      	str	r2, [r3, #0]
 801339c:	e002      	b.n	80133a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	2200      	movs	r2, #0
 80133a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	2202      	movs	r2, #2
 80133a8:	4619      	mov	r1, r3
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f000 fbb7 	bl	8013b1e <USBD_CtlSendData>
              break;
 80133b0:	e004      	b.n	80133bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80133b2:	6839      	ldr	r1, [r7, #0]
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f000 fb41 	bl	8013a3c <USBD_CtlError>
              break;
 80133ba:	bf00      	nop
          }
          break;
 80133bc:	e004      	b.n	80133c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80133be:	6839      	ldr	r1, [r7, #0]
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f000 fb3b 	bl	8013a3c <USBD_CtlError>
          break;
 80133c6:	bf00      	nop
      }
      break;
 80133c8:	e004      	b.n	80133d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80133ca:	6839      	ldr	r1, [r7, #0]
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f000 fb35 	bl	8013a3c <USBD_CtlError>
      break;
 80133d2:	bf00      	nop
  }

  return ret;
 80133d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3710      	adds	r7, #16
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
	...

080133e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80133ea:	2300      	movs	r3, #0
 80133ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80133ee:	2300      	movs	r3, #0
 80133f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80133f2:	2300      	movs	r3, #0
 80133f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	885b      	ldrh	r3, [r3, #2]
 80133fa:	0a1b      	lsrs	r3, r3, #8
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	3b01      	subs	r3, #1
 8013400:	2b06      	cmp	r3, #6
 8013402:	f200 8128 	bhi.w	8013656 <USBD_GetDescriptor+0x276>
 8013406:	a201      	add	r2, pc, #4	@ (adr r2, 801340c <USBD_GetDescriptor+0x2c>)
 8013408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801340c:	08013429 	.word	0x08013429
 8013410:	08013441 	.word	0x08013441
 8013414:	08013481 	.word	0x08013481
 8013418:	08013657 	.word	0x08013657
 801341c:	08013657 	.word	0x08013657
 8013420:	080135f7 	.word	0x080135f7
 8013424:	08013623 	.word	0x08013623
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	687a      	ldr	r2, [r7, #4]
 8013432:	7c12      	ldrb	r2, [r2, #16]
 8013434:	f107 0108 	add.w	r1, r7, #8
 8013438:	4610      	mov	r0, r2
 801343a:	4798      	blx	r3
 801343c:	60f8      	str	r0, [r7, #12]
      break;
 801343e:	e112      	b.n	8013666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	7c1b      	ldrb	r3, [r3, #16]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d10d      	bne.n	8013464 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013450:	f107 0208 	add.w	r2, r7, #8
 8013454:	4610      	mov	r0, r2
 8013456:	4798      	blx	r3
 8013458:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	3301      	adds	r3, #1
 801345e:	2202      	movs	r2, #2
 8013460:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013462:	e100      	b.n	8013666 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801346c:	f107 0208 	add.w	r2, r7, #8
 8013470:	4610      	mov	r0, r2
 8013472:	4798      	blx	r3
 8013474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	3301      	adds	r3, #1
 801347a:	2202      	movs	r2, #2
 801347c:	701a      	strb	r2, [r3, #0]
      break;
 801347e:	e0f2      	b.n	8013666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	885b      	ldrh	r3, [r3, #2]
 8013484:	b2db      	uxtb	r3, r3
 8013486:	2b05      	cmp	r3, #5
 8013488:	f200 80ac 	bhi.w	80135e4 <USBD_GetDescriptor+0x204>
 801348c:	a201      	add	r2, pc, #4	@ (adr r2, 8013494 <USBD_GetDescriptor+0xb4>)
 801348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013492:	bf00      	nop
 8013494:	080134ad 	.word	0x080134ad
 8013498:	080134e1 	.word	0x080134e1
 801349c:	08013515 	.word	0x08013515
 80134a0:	08013549 	.word	0x08013549
 80134a4:	0801357d 	.word	0x0801357d
 80134a8:	080135b1 	.word	0x080135b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00b      	beq.n	80134d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	7c12      	ldrb	r2, [r2, #16]
 80134c4:	f107 0108 	add.w	r1, r7, #8
 80134c8:	4610      	mov	r0, r2
 80134ca:	4798      	blx	r3
 80134cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134ce:	e091      	b.n	80135f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80134d0:	6839      	ldr	r1, [r7, #0]
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f000 fab2 	bl	8013a3c <USBD_CtlError>
            err++;
 80134d8:	7afb      	ldrb	r3, [r7, #11]
 80134da:	3301      	adds	r3, #1
 80134dc:	72fb      	strb	r3, [r7, #11]
          break;
 80134de:	e089      	b.n	80135f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80134e6:	689b      	ldr	r3, [r3, #8]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d00b      	beq.n	8013504 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80134f2:	689b      	ldr	r3, [r3, #8]
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	7c12      	ldrb	r2, [r2, #16]
 80134f8:	f107 0108 	add.w	r1, r7, #8
 80134fc:	4610      	mov	r0, r2
 80134fe:	4798      	blx	r3
 8013500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013502:	e077      	b.n	80135f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013504:	6839      	ldr	r1, [r7, #0]
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 fa98 	bl	8013a3c <USBD_CtlError>
            err++;
 801350c:	7afb      	ldrb	r3, [r7, #11]
 801350e:	3301      	adds	r3, #1
 8013510:	72fb      	strb	r3, [r7, #11]
          break;
 8013512:	e06f      	b.n	80135f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d00b      	beq.n	8013538 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	687a      	ldr	r2, [r7, #4]
 801352a:	7c12      	ldrb	r2, [r2, #16]
 801352c:	f107 0108 	add.w	r1, r7, #8
 8013530:	4610      	mov	r0, r2
 8013532:	4798      	blx	r3
 8013534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013536:	e05d      	b.n	80135f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 fa7e 	bl	8013a3c <USBD_CtlError>
            err++;
 8013540:	7afb      	ldrb	r3, [r7, #11]
 8013542:	3301      	adds	r3, #1
 8013544:	72fb      	strb	r3, [r7, #11]
          break;
 8013546:	e055      	b.n	80135f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801354e:	691b      	ldr	r3, [r3, #16]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00b      	beq.n	801356c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801355a:	691b      	ldr	r3, [r3, #16]
 801355c:	687a      	ldr	r2, [r7, #4]
 801355e:	7c12      	ldrb	r2, [r2, #16]
 8013560:	f107 0108 	add.w	r1, r7, #8
 8013564:	4610      	mov	r0, r2
 8013566:	4798      	blx	r3
 8013568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801356a:	e043      	b.n	80135f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801356c:	6839      	ldr	r1, [r7, #0]
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f000 fa64 	bl	8013a3c <USBD_CtlError>
            err++;
 8013574:	7afb      	ldrb	r3, [r7, #11]
 8013576:	3301      	adds	r3, #1
 8013578:	72fb      	strb	r3, [r7, #11]
          break;
 801357a:	e03b      	b.n	80135f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013582:	695b      	ldr	r3, [r3, #20]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d00b      	beq.n	80135a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801358e:	695b      	ldr	r3, [r3, #20]
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	7c12      	ldrb	r2, [r2, #16]
 8013594:	f107 0108 	add.w	r1, r7, #8
 8013598:	4610      	mov	r0, r2
 801359a:	4798      	blx	r3
 801359c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801359e:	e029      	b.n	80135f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80135a0:	6839      	ldr	r1, [r7, #0]
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f000 fa4a 	bl	8013a3c <USBD_CtlError>
            err++;
 80135a8:	7afb      	ldrb	r3, [r7, #11]
 80135aa:	3301      	adds	r3, #1
 80135ac:	72fb      	strb	r3, [r7, #11]
          break;
 80135ae:	e021      	b.n	80135f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80135b6:	699b      	ldr	r3, [r3, #24]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d00b      	beq.n	80135d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80135c2:	699b      	ldr	r3, [r3, #24]
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	7c12      	ldrb	r2, [r2, #16]
 80135c8:	f107 0108 	add.w	r1, r7, #8
 80135cc:	4610      	mov	r0, r2
 80135ce:	4798      	blx	r3
 80135d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80135d2:	e00f      	b.n	80135f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80135d4:	6839      	ldr	r1, [r7, #0]
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f000 fa30 	bl	8013a3c <USBD_CtlError>
            err++;
 80135dc:	7afb      	ldrb	r3, [r7, #11]
 80135de:	3301      	adds	r3, #1
 80135e0:	72fb      	strb	r3, [r7, #11]
          break;
 80135e2:	e007      	b.n	80135f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80135e4:	6839      	ldr	r1, [r7, #0]
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f000 fa28 	bl	8013a3c <USBD_CtlError>
          err++;
 80135ec:	7afb      	ldrb	r3, [r7, #11]
 80135ee:	3301      	adds	r3, #1
 80135f0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80135f2:	bf00      	nop
      }
      break;
 80135f4:	e037      	b.n	8013666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	7c1b      	ldrb	r3, [r3, #16]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d109      	bne.n	8013612 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013606:	f107 0208 	add.w	r2, r7, #8
 801360a:	4610      	mov	r0, r2
 801360c:	4798      	blx	r3
 801360e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013610:	e029      	b.n	8013666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013612:	6839      	ldr	r1, [r7, #0]
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 fa11 	bl	8013a3c <USBD_CtlError>
        err++;
 801361a:	7afb      	ldrb	r3, [r7, #11]
 801361c:	3301      	adds	r3, #1
 801361e:	72fb      	strb	r3, [r7, #11]
      break;
 8013620:	e021      	b.n	8013666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	7c1b      	ldrb	r3, [r3, #16]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d10d      	bne.n	8013646 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013632:	f107 0208 	add.w	r2, r7, #8
 8013636:	4610      	mov	r0, r2
 8013638:	4798      	blx	r3
 801363a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	3301      	adds	r3, #1
 8013640:	2207      	movs	r2, #7
 8013642:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013644:	e00f      	b.n	8013666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013646:	6839      	ldr	r1, [r7, #0]
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f000 f9f7 	bl	8013a3c <USBD_CtlError>
        err++;
 801364e:	7afb      	ldrb	r3, [r7, #11]
 8013650:	3301      	adds	r3, #1
 8013652:	72fb      	strb	r3, [r7, #11]
      break;
 8013654:	e007      	b.n	8013666 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8013656:	6839      	ldr	r1, [r7, #0]
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f000 f9ef 	bl	8013a3c <USBD_CtlError>
      err++;
 801365e:	7afb      	ldrb	r3, [r7, #11]
 8013660:	3301      	adds	r3, #1
 8013662:	72fb      	strb	r3, [r7, #11]
      break;
 8013664:	bf00      	nop
  }

  if (err != 0U)
 8013666:	7afb      	ldrb	r3, [r7, #11]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d11e      	bne.n	80136aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	88db      	ldrh	r3, [r3, #6]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d016      	beq.n	80136a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8013674:	893b      	ldrh	r3, [r7, #8]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d00e      	beq.n	8013698 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	88da      	ldrh	r2, [r3, #6]
 801367e:	893b      	ldrh	r3, [r7, #8]
 8013680:	4293      	cmp	r3, r2
 8013682:	bf28      	it	cs
 8013684:	4613      	movcs	r3, r2
 8013686:	b29b      	uxth	r3, r3
 8013688:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801368a:	893b      	ldrh	r3, [r7, #8]
 801368c:	461a      	mov	r2, r3
 801368e:	68f9      	ldr	r1, [r7, #12]
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f000 fa44 	bl	8013b1e <USBD_CtlSendData>
 8013696:	e009      	b.n	80136ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013698:	6839      	ldr	r1, [r7, #0]
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f000 f9ce 	bl	8013a3c <USBD_CtlError>
 80136a0:	e004      	b.n	80136ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f000 fa95 	bl	8013bd2 <USBD_CtlSendStatus>
 80136a8:	e000      	b.n	80136ac <USBD_GetDescriptor+0x2cc>
    return;
 80136aa:	bf00      	nop
  }
}
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop

080136b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	889b      	ldrh	r3, [r3, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d131      	bne.n	801372a <USBD_SetAddress+0x76>
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	88db      	ldrh	r3, [r3, #6]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d12d      	bne.n	801372a <USBD_SetAddress+0x76>
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	885b      	ldrh	r3, [r3, #2]
 80136d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80136d4:	d829      	bhi.n	801372a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	885b      	ldrh	r3, [r3, #2]
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80136e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	2b03      	cmp	r3, #3
 80136ec:	d104      	bne.n	80136f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80136ee:	6839      	ldr	r1, [r7, #0]
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f000 f9a3 	bl	8013a3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136f6:	e01d      	b.n	8013734 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	7bfa      	ldrb	r2, [r7, #15]
 80136fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013700:	7bfb      	ldrb	r3, [r7, #15]
 8013702:	4619      	mov	r1, r3
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f004 fa13 	bl	8017b30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f000 fa61 	bl	8013bd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013710:	7bfb      	ldrb	r3, [r7, #15]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d004      	beq.n	8013720 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2202      	movs	r2, #2
 801371a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801371e:	e009      	b.n	8013734 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2201      	movs	r2, #1
 8013724:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013728:	e004      	b.n	8013734 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801372a:	6839      	ldr	r1, [r7, #0]
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f000 f985 	bl	8013a3c <USBD_CtlError>
  }
}
 8013732:	bf00      	nop
 8013734:	bf00      	nop
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013746:	2300      	movs	r3, #0
 8013748:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	885b      	ldrh	r3, [r3, #2]
 801374e:	b2da      	uxtb	r2, r3
 8013750:	4b4c      	ldr	r3, [pc, #304]	@ (8013884 <USBD_SetConfig+0x148>)
 8013752:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013754:	4b4b      	ldr	r3, [pc, #300]	@ (8013884 <USBD_SetConfig+0x148>)
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	2b01      	cmp	r3, #1
 801375a:	d905      	bls.n	8013768 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801375c:	6839      	ldr	r1, [r7, #0]
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f000 f96c 	bl	8013a3c <USBD_CtlError>
    return USBD_FAIL;
 8013764:	2303      	movs	r3, #3
 8013766:	e088      	b.n	801387a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801376e:	b2db      	uxtb	r3, r3
 8013770:	2b02      	cmp	r3, #2
 8013772:	d002      	beq.n	801377a <USBD_SetConfig+0x3e>
 8013774:	2b03      	cmp	r3, #3
 8013776:	d025      	beq.n	80137c4 <USBD_SetConfig+0x88>
 8013778:	e071      	b.n	801385e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801377a:	4b42      	ldr	r3, [pc, #264]	@ (8013884 <USBD_SetConfig+0x148>)
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d01c      	beq.n	80137bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8013782:	4b40      	ldr	r3, [pc, #256]	@ (8013884 <USBD_SetConfig+0x148>)
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	461a      	mov	r2, r3
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801378c:	4b3d      	ldr	r3, [pc, #244]	@ (8013884 <USBD_SetConfig+0x148>)
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	4619      	mov	r1, r3
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f7ff f948 	bl	8012a28 <USBD_SetClassConfig>
 8013798:	4603      	mov	r3, r0
 801379a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801379c:	7bfb      	ldrb	r3, [r7, #15]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d004      	beq.n	80137ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80137a2:	6839      	ldr	r1, [r7, #0]
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f000 f949 	bl	8013a3c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80137aa:	e065      	b.n	8013878 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f000 fa10 	bl	8013bd2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2203      	movs	r2, #3
 80137b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80137ba:	e05d      	b.n	8013878 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f000 fa08 	bl	8013bd2 <USBD_CtlSendStatus>
      break;
 80137c2:	e059      	b.n	8013878 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80137c4:	4b2f      	ldr	r3, [pc, #188]	@ (8013884 <USBD_SetConfig+0x148>)
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d112      	bne.n	80137f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2202      	movs	r2, #2
 80137d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80137d4:	4b2b      	ldr	r3, [pc, #172]	@ (8013884 <USBD_SetConfig+0x148>)
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	461a      	mov	r2, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80137de:	4b29      	ldr	r3, [pc, #164]	@ (8013884 <USBD_SetConfig+0x148>)
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	4619      	mov	r1, r3
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f7ff f93b 	bl	8012a60 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f000 f9f1 	bl	8013bd2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80137f0:	e042      	b.n	8013878 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80137f2:	4b24      	ldr	r3, [pc, #144]	@ (8013884 <USBD_SetConfig+0x148>)
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	461a      	mov	r2, r3
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	685b      	ldr	r3, [r3, #4]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d02a      	beq.n	8013856 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	b2db      	uxtb	r3, r3
 8013806:	4619      	mov	r1, r3
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f7ff f929 	bl	8012a60 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801380e:	4b1d      	ldr	r3, [pc, #116]	@ (8013884 <USBD_SetConfig+0x148>)
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	461a      	mov	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013818:	4b1a      	ldr	r3, [pc, #104]	@ (8013884 <USBD_SetConfig+0x148>)
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	4619      	mov	r1, r3
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7ff f902 	bl	8012a28 <USBD_SetClassConfig>
 8013824:	4603      	mov	r3, r0
 8013826:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013828:	7bfb      	ldrb	r3, [r7, #15]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d00f      	beq.n	801384e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801382e:	6839      	ldr	r1, [r7, #0]
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f000 f903 	bl	8013a3c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	b2db      	uxtb	r3, r3
 801383c:	4619      	mov	r1, r3
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f7ff f90e 	bl	8012a60 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2202      	movs	r2, #2
 8013848:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801384c:	e014      	b.n	8013878 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f000 f9bf 	bl	8013bd2 <USBD_CtlSendStatus>
      break;
 8013854:	e010      	b.n	8013878 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 f9bb 	bl	8013bd2 <USBD_CtlSendStatus>
      break;
 801385c:	e00c      	b.n	8013878 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801385e:	6839      	ldr	r1, [r7, #0]
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 f8eb 	bl	8013a3c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013866:	4b07      	ldr	r3, [pc, #28]	@ (8013884 <USBD_SetConfig+0x148>)
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	4619      	mov	r1, r3
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f7ff f8f7 	bl	8012a60 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013872:	2303      	movs	r3, #3
 8013874:	73fb      	strb	r3, [r7, #15]
      break;
 8013876:	bf00      	nop
  }

  return ret;
 8013878:	7bfb      	ldrb	r3, [r7, #15]
}
 801387a:	4618      	mov	r0, r3
 801387c:	3710      	adds	r7, #16
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	2002939a 	.word	0x2002939a

08013888 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	88db      	ldrh	r3, [r3, #6]
 8013896:	2b01      	cmp	r3, #1
 8013898:	d004      	beq.n	80138a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801389a:	6839      	ldr	r1, [r7, #0]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f000 f8cd 	bl	8013a3c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80138a2:	e023      	b.n	80138ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	2b02      	cmp	r3, #2
 80138ae:	dc02      	bgt.n	80138b6 <USBD_GetConfig+0x2e>
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	dc03      	bgt.n	80138bc <USBD_GetConfig+0x34>
 80138b4:	e015      	b.n	80138e2 <USBD_GetConfig+0x5a>
 80138b6:	2b03      	cmp	r3, #3
 80138b8:	d00b      	beq.n	80138d2 <USBD_GetConfig+0x4a>
 80138ba:	e012      	b.n	80138e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	3308      	adds	r3, #8
 80138c6:	2201      	movs	r2, #1
 80138c8:	4619      	mov	r1, r3
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f000 f927 	bl	8013b1e <USBD_CtlSendData>
        break;
 80138d0:	e00c      	b.n	80138ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	3304      	adds	r3, #4
 80138d6:	2201      	movs	r2, #1
 80138d8:	4619      	mov	r1, r3
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 f91f 	bl	8013b1e <USBD_CtlSendData>
        break;
 80138e0:	e004      	b.n	80138ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80138e2:	6839      	ldr	r1, [r7, #0]
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f000 f8a9 	bl	8013a3c <USBD_CtlError>
        break;
 80138ea:	bf00      	nop
}
 80138ec:	bf00      	nop
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013904:	b2db      	uxtb	r3, r3
 8013906:	3b01      	subs	r3, #1
 8013908:	2b02      	cmp	r3, #2
 801390a:	d81e      	bhi.n	801394a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	88db      	ldrh	r3, [r3, #6]
 8013910:	2b02      	cmp	r3, #2
 8013912:	d004      	beq.n	801391e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013914:	6839      	ldr	r1, [r7, #0]
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f000 f890 	bl	8013a3c <USBD_CtlError>
        break;
 801391c:	e01a      	b.n	8013954 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	2201      	movs	r2, #1
 8013922:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801392a:	2b00      	cmp	r3, #0
 801392c:	d005      	beq.n	801393a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	68db      	ldr	r3, [r3, #12]
 8013932:	f043 0202 	orr.w	r2, r3, #2
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	330c      	adds	r3, #12
 801393e:	2202      	movs	r2, #2
 8013940:	4619      	mov	r1, r3
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f000 f8eb 	bl	8013b1e <USBD_CtlSendData>
      break;
 8013948:	e004      	b.n	8013954 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801394a:	6839      	ldr	r1, [r7, #0]
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f000 f875 	bl	8013a3c <USBD_CtlError>
      break;
 8013952:	bf00      	nop
  }
}
 8013954:	bf00      	nop
 8013956:	3708      	adds	r7, #8
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b082      	sub	sp, #8
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	885b      	ldrh	r3, [r3, #2]
 801396a:	2b01      	cmp	r3, #1
 801396c:	d106      	bne.n	801397c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2201      	movs	r2, #1
 8013972:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f000 f92b 	bl	8013bd2 <USBD_CtlSendStatus>
  }
}
 801397c:	bf00      	nop
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013994:	b2db      	uxtb	r3, r3
 8013996:	3b01      	subs	r3, #1
 8013998:	2b02      	cmp	r3, #2
 801399a:	d80b      	bhi.n	80139b4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	885b      	ldrh	r3, [r3, #2]
 80139a0:	2b01      	cmp	r3, #1
 80139a2:	d10c      	bne.n	80139be <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2200      	movs	r2, #0
 80139a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f000 f910 	bl	8013bd2 <USBD_CtlSendStatus>
      }
      break;
 80139b2:	e004      	b.n	80139be <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80139b4:	6839      	ldr	r1, [r7, #0]
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f000 f840 	bl	8013a3c <USBD_CtlError>
      break;
 80139bc:	e000      	b.n	80139c0 <USBD_ClrFeature+0x3c>
      break;
 80139be:	bf00      	nop
  }
}
 80139c0:	bf00      	nop
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	781a      	ldrb	r2, [r3, #0]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	3301      	adds	r3, #1
 80139e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	781a      	ldrb	r2, [r3, #0]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	3301      	adds	r3, #1
 80139f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80139f2:	68f8      	ldr	r0, [r7, #12]
 80139f4:	f7ff fabb 	bl	8012f6e <SWAPBYTE>
 80139f8:	4603      	mov	r3, r0
 80139fa:	461a      	mov	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	3301      	adds	r3, #1
 8013a04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	3301      	adds	r3, #1
 8013a0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013a0c:	68f8      	ldr	r0, [r7, #12]
 8013a0e:	f7ff faae 	bl	8012f6e <SWAPBYTE>
 8013a12:	4603      	mov	r3, r0
 8013a14:	461a      	mov	r2, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	3301      	adds	r3, #1
 8013a24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013a26:	68f8      	ldr	r0, [r7, #12]
 8013a28:	f7ff faa1 	bl	8012f6e <SWAPBYTE>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	461a      	mov	r2, r3
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	80da      	strh	r2, [r3, #6]
}
 8013a34:	bf00      	nop
 8013a36:	3710      	adds	r7, #16
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a46:	2180      	movs	r1, #128	@ 0x80
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f004 f807 	bl	8017a5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013a4e:	2100      	movs	r1, #0
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f004 f803 	bl	8017a5c <USBD_LL_StallEP>
}
 8013a56:	bf00      	nop
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b086      	sub	sp, #24
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	60f8      	str	r0, [r7, #12]
 8013a66:	60b9      	str	r1, [r7, #8]
 8013a68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d036      	beq.n	8013ae2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8013a78:	6938      	ldr	r0, [r7, #16]
 8013a7a:	f000 f836 	bl	8013aea <USBD_GetLen>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	3301      	adds	r3, #1
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	005b      	lsls	r3, r3, #1
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013a8c:	7dfb      	ldrb	r3, [r7, #23]
 8013a8e:	68ba      	ldr	r2, [r7, #8]
 8013a90:	4413      	add	r3, r2
 8013a92:	687a      	ldr	r2, [r7, #4]
 8013a94:	7812      	ldrb	r2, [r2, #0]
 8013a96:	701a      	strb	r2, [r3, #0]
  idx++;
 8013a98:	7dfb      	ldrb	r3, [r7, #23]
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013a9e:	7dfb      	ldrb	r3, [r7, #23]
 8013aa0:	68ba      	ldr	r2, [r7, #8]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	2203      	movs	r2, #3
 8013aa6:	701a      	strb	r2, [r3, #0]
  idx++;
 8013aa8:	7dfb      	ldrb	r3, [r7, #23]
 8013aaa:	3301      	adds	r3, #1
 8013aac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013aae:	e013      	b.n	8013ad8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013ab0:	7dfb      	ldrb	r3, [r7, #23]
 8013ab2:	68ba      	ldr	r2, [r7, #8]
 8013ab4:	4413      	add	r3, r2
 8013ab6:	693a      	ldr	r2, [r7, #16]
 8013ab8:	7812      	ldrb	r2, [r2, #0]
 8013aba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	3301      	adds	r3, #1
 8013ac0:	613b      	str	r3, [r7, #16]
    idx++;
 8013ac2:	7dfb      	ldrb	r3, [r7, #23]
 8013ac4:	3301      	adds	r3, #1
 8013ac6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013ac8:	7dfb      	ldrb	r3, [r7, #23]
 8013aca:	68ba      	ldr	r2, [r7, #8]
 8013acc:	4413      	add	r3, r2
 8013ace:	2200      	movs	r2, #0
 8013ad0:	701a      	strb	r2, [r3, #0]
    idx++;
 8013ad2:	7dfb      	ldrb	r3, [r7, #23]
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013ad8:	693b      	ldr	r3, [r7, #16]
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d1e7      	bne.n	8013ab0 <USBD_GetString+0x52>
 8013ae0:	e000      	b.n	8013ae4 <USBD_GetString+0x86>
    return;
 8013ae2:	bf00      	nop
  }
}
 8013ae4:	3718      	adds	r7, #24
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013aea:	b480      	push	{r7}
 8013aec:	b085      	sub	sp, #20
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013af2:	2300      	movs	r3, #0
 8013af4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013afa:	e005      	b.n	8013b08 <USBD_GetLen+0x1e>
  {
    len++;
 8013afc:	7bfb      	ldrb	r3, [r7, #15]
 8013afe:	3301      	adds	r3, #1
 8013b00:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	3301      	adds	r3, #1
 8013b06:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d1f5      	bne.n	8013afc <USBD_GetLen+0x12>
  }

  return len;
 8013b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3714      	adds	r7, #20
 8013b16:	46bd      	mov	sp, r7
 8013b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1c:	4770      	bx	lr

08013b1e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013b1e:	b580      	push	{r7, lr}
 8013b20:	b084      	sub	sp, #16
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	60f8      	str	r0, [r7, #12]
 8013b26:	60b9      	str	r1, [r7, #8]
 8013b28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2202      	movs	r2, #2
 8013b2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	687a      	ldr	r2, [r7, #4]
 8013b36:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	687a      	ldr	r2, [r7, #4]
 8013b3c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	68ba      	ldr	r2, [r7, #8]
 8013b42:	2100      	movs	r1, #0
 8013b44:	68f8      	ldr	r0, [r7, #12]
 8013b46:	f004 f812 	bl	8017b6e <USBD_LL_Transmit>

  return USBD_OK;
 8013b4a:	2300      	movs	r3, #0
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3710      	adds	r7, #16
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b084      	sub	sp, #16
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	68ba      	ldr	r2, [r7, #8]
 8013b64:	2100      	movs	r1, #0
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	f004 f801 	bl	8017b6e <USBD_LL_Transmit>

  return USBD_OK;
 8013b6c:	2300      	movs	r3, #0
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3710      	adds	r7, #16
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}

08013b76 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013b76:	b580      	push	{r7, lr}
 8013b78:	b084      	sub	sp, #16
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	60f8      	str	r0, [r7, #12]
 8013b7e:	60b9      	str	r1, [r7, #8]
 8013b80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2203      	movs	r2, #3
 8013b86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	68ba      	ldr	r2, [r7, #8]
 8013b9e:	2100      	movs	r1, #0
 8013ba0:	68f8      	ldr	r0, [r7, #12]
 8013ba2:	f004 f805 	bl	8017bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ba6:	2300      	movs	r3, #0
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3710      	adds	r7, #16
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	68ba      	ldr	r2, [r7, #8]
 8013bc0:	2100      	movs	r1, #0
 8013bc2:	68f8      	ldr	r0, [r7, #12]
 8013bc4:	f003 fff4 	bl	8017bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013bc8:	2300      	movs	r3, #0
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3710      	adds	r7, #16
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}

08013bd2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b082      	sub	sp, #8
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2204      	movs	r2, #4
 8013bde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013be2:	2300      	movs	r3, #0
 8013be4:	2200      	movs	r2, #0
 8013be6:	2100      	movs	r1, #0
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f003 ffc0 	bl	8017b6e <USBD_LL_Transmit>

  return USBD_OK;
 8013bee:	2300      	movs	r3, #0
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2205      	movs	r2, #5
 8013c04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c08:	2300      	movs	r3, #0
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f003 ffce 	bl	8017bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013c14:	2300      	movs	r3, #0
}
 8013c16:	4618      	mov	r0, r3
 8013c18:	3708      	adds	r7, #8
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
	...

08013c20 <__NVIC_SetPriority>:
{
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	4603      	mov	r3, r0
 8013c28:	6039      	str	r1, [r7, #0]
 8013c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	db0a      	blt.n	8013c4a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	b2da      	uxtb	r2, r3
 8013c38:	490c      	ldr	r1, [pc, #48]	@ (8013c6c <__NVIC_SetPriority+0x4c>)
 8013c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c3e:	0112      	lsls	r2, r2, #4
 8013c40:	b2d2      	uxtb	r2, r2
 8013c42:	440b      	add	r3, r1
 8013c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013c48:	e00a      	b.n	8013c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	b2da      	uxtb	r2, r3
 8013c4e:	4908      	ldr	r1, [pc, #32]	@ (8013c70 <__NVIC_SetPriority+0x50>)
 8013c50:	79fb      	ldrb	r3, [r7, #7]
 8013c52:	f003 030f 	and.w	r3, r3, #15
 8013c56:	3b04      	subs	r3, #4
 8013c58:	0112      	lsls	r2, r2, #4
 8013c5a:	b2d2      	uxtb	r2, r2
 8013c5c:	440b      	add	r3, r1
 8013c5e:	761a      	strb	r2, [r3, #24]
}
 8013c60:	bf00      	nop
 8013c62:	370c      	adds	r7, #12
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	e000e100 	.word	0xe000e100
 8013c70:	e000ed00 	.word	0xe000ed00

08013c74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013c74:	b580      	push	{r7, lr}
 8013c76:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8013c78:	4b05      	ldr	r3, [pc, #20]	@ (8013c90 <SysTick_Handler+0x1c>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013c7c:	f002 fc3a 	bl	80164f4 <xTaskGetSchedulerState>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b01      	cmp	r3, #1
 8013c84:	d001      	beq.n	8013c8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013c86:	f003 f8a5 	bl	8016dd4 <xPortSysTickHandler>
  }
}
 8013c8a:	bf00      	nop
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	e000e010 	.word	0xe000e010

08013c94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013c94:	b580      	push	{r7, lr}
 8013c96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8013c98:	2100      	movs	r1, #0
 8013c9a:	f06f 0004 	mvn.w	r0, #4
 8013c9e:	f7ff ffbf 	bl	8013c20 <__NVIC_SetPriority>
#endif
}
 8013ca2:	bf00      	nop
 8013ca4:	bd80      	pop	{r7, pc}

08013ca6 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b086      	sub	sp, #24
 8013caa:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8013cac:	2300      	movs	r3, #0
 8013cae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013cb0:	f3ef 8305 	mrs	r3, IPSR
 8013cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8013cb6:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d002      	beq.n	8013cc2 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	617b      	str	r3, [r7, #20]
 8013cc0:	e013      	b.n	8013cea <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8013cc2:	f002 fc17 	bl	80164f4 <xTaskGetSchedulerState>
 8013cc6:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d00d      	beq.n	8013cea <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013cce:	f3ef 8310 	mrs	r3, PRIMASK
 8013cd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8013cd4:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d105      	bne.n	8013ce6 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013cda:	f3ef 8311 	mrs	r3, BASEPRI
 8013cde:	607b      	str	r3, [r7, #4]
  return(result);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d001      	beq.n	8013cea <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8013ce6:	2301      	movs	r3, #1
 8013ce8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8013cea:	697b      	ldr	r3, [r7, #20]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3718      	adds	r7, #24
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b082      	sub	sp, #8
 8013cf8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8013cfa:	f7ff ffd4 	bl	8013ca6 <IRQ_Context>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d003      	beq.n	8013d0c <osKernelInitialize+0x18>
    stat = osErrorISR;
 8013d04:	f06f 0305 	mvn.w	r3, #5
 8013d08:	607b      	str	r3, [r7, #4]
 8013d0a:	e012      	b.n	8013d32 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8013d0c:	f002 fbf2 	bl	80164f4 <xTaskGetSchedulerState>
 8013d10:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d109      	bne.n	8013d2c <osKernelInitialize+0x38>
 8013d18:	4b08      	ldr	r3, [pc, #32]	@ (8013d3c <osKernelInitialize+0x48>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d105      	bne.n	8013d2c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013d20:	4b06      	ldr	r3, [pc, #24]	@ (8013d3c <osKernelInitialize+0x48>)
 8013d22:	2201      	movs	r2, #1
 8013d24:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013d26:	2300      	movs	r3, #0
 8013d28:	607b      	str	r3, [r7, #4]
 8013d2a:	e002      	b.n	8013d32 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8013d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d30:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8013d32:	687b      	ldr	r3, [r7, #4]
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	2002939c 	.word	0x2002939c

08013d40 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8013d46:	f7ff ffae 	bl	8013ca6 <IRQ_Context>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d003      	beq.n	8013d58 <osKernelStart+0x18>
    stat = osErrorISR;
 8013d50:	f06f 0305 	mvn.w	r3, #5
 8013d54:	607b      	str	r3, [r7, #4]
 8013d56:	e016      	b.n	8013d86 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8013d58:	f002 fbcc 	bl	80164f4 <xTaskGetSchedulerState>
 8013d5c:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d10d      	bne.n	8013d80 <osKernelStart+0x40>
 8013d64:	4b0a      	ldr	r3, [pc, #40]	@ (8013d90 <osKernelStart+0x50>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d109      	bne.n	8013d80 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013d6c:	f7ff ff92 	bl	8013c94 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8013d70:	4b07      	ldr	r3, [pc, #28]	@ (8013d90 <osKernelStart+0x50>)
 8013d72:	2202      	movs	r2, #2
 8013d74:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013d76:	f001 fdb3 	bl	80158e0 <vTaskStartScheduler>
      stat = osOK;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	607b      	str	r3, [r7, #4]
 8013d7e:	e002      	b.n	8013d86 <osKernelStart+0x46>
    } else {
      stat = osError;
 8013d80:	f04f 33ff 	mov.w	r3, #4294967295
 8013d84:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8013d86:	687b      	ldr	r3, [r7, #4]
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3708      	adds	r7, #8
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	2002939c 	.word	0x2002939c

08013d94 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b08e      	sub	sp, #56	@ 0x38
 8013d98:	af04      	add	r7, sp, #16
 8013d9a:	60f8      	str	r0, [r7, #12]
 8013d9c:	60b9      	str	r1, [r7, #8]
 8013d9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013da0:	2300      	movs	r3, #0
 8013da2:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8013da4:	f7ff ff7f 	bl	8013ca6 <IRQ_Context>
 8013da8:	4603      	mov	r3, r0
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d17e      	bne.n	8013eac <osThreadNew+0x118>
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d07b      	beq.n	8013eac <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8013db4:	2380      	movs	r3, #128	@ 0x80
 8013db6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013db8:	2318      	movs	r3, #24
 8013dba:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8013dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8013dc4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d045      	beq.n	8013e58 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d002      	beq.n	8013dda <osThreadNew+0x46>
        name = attr->name;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	699b      	ldr	r3, [r3, #24]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d002      	beq.n	8013de8 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	699b      	ldr	r3, [r3, #24]
 8013de6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013de8:	69fb      	ldr	r3, [r7, #28]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d008      	beq.n	8013e00 <osThreadNew+0x6c>
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	2b38      	cmp	r3, #56	@ 0x38
 8013df2:	d805      	bhi.n	8013e00 <osThreadNew+0x6c>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	f003 0301 	and.w	r3, r3, #1
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d001      	beq.n	8013e04 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8013e00:	2300      	movs	r3, #0
 8013e02:	e054      	b.n	8013eae <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	695b      	ldr	r3, [r3, #20]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d003      	beq.n	8013e14 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	695b      	ldr	r3, [r3, #20]
 8013e10:	089b      	lsrs	r3, r3, #2
 8013e12:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00e      	beq.n	8013e3a <osThreadNew+0xa6>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	2b5b      	cmp	r3, #91	@ 0x5b
 8013e22:	d90a      	bls.n	8013e3a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d006      	beq.n	8013e3a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	695b      	ldr	r3, [r3, #20]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d002      	beq.n	8013e3a <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8013e34:	2301      	movs	r3, #1
 8013e36:	61bb      	str	r3, [r7, #24]
 8013e38:	e010      	b.n	8013e5c <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	689b      	ldr	r3, [r3, #8]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d10c      	bne.n	8013e5c <osThreadNew+0xc8>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	68db      	ldr	r3, [r3, #12]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d108      	bne.n	8013e5c <osThreadNew+0xc8>
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	691b      	ldr	r3, [r3, #16]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d104      	bne.n	8013e5c <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	61bb      	str	r3, [r7, #24]
 8013e56:	e001      	b.n	8013e5c <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013e5c:	69bb      	ldr	r3, [r7, #24]
 8013e5e:	2b01      	cmp	r3, #1
 8013e60:	d110      	bne.n	8013e84 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013e66:	687a      	ldr	r2, [r7, #4]
 8013e68:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013e6a:	9202      	str	r2, [sp, #8]
 8013e6c:	9301      	str	r3, [sp, #4]
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	6a3a      	ldr	r2, [r7, #32]
 8013e76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f001 fb01 	bl	8015480 <xTaskCreateStatic>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	617b      	str	r3, [r7, #20]
 8013e82:	e013      	b.n	8013eac <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8013e84:	69bb      	ldr	r3, [r7, #24]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d110      	bne.n	8013eac <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8013e8a:	6a3b      	ldr	r3, [r7, #32]
 8013e8c:	b29a      	uxth	r2, r3
 8013e8e:	f107 0314 	add.w	r3, r7, #20
 8013e92:	9301      	str	r3, [sp, #4]
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	9300      	str	r3, [sp, #0]
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	f001 fb3c 	bl	801551a <xTaskCreate>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b01      	cmp	r3, #1
 8013ea6:	d001      	beq.n	8013eac <osThreadNew+0x118>
            hTask = NULL;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8013eac:	697b      	ldr	r3, [r7, #20]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3728      	adds	r7, #40	@ 0x28
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

/*
  Terminate execution of current running thread.
*/
__NO_RETURN void osThreadExit (void) {
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8013eba:	2000      	movs	r0, #0
 8013ebc:	f001 fc82 	bl	80157c4 <vTaskDelete>
#endif
  for (;;);
 8013ec0:	bf00      	nop
 8013ec2:	e7fd      	b.n	8013ec0 <osThreadExit+0xa>

08013ec4 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8013ecc:	f7ff feeb 	bl	8013ca6 <IRQ_Context>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d003      	beq.n	8013ede <osDelay+0x1a>
    stat = osErrorISR;
 8013ed6:	f06f 0305 	mvn.w	r3, #5
 8013eda:	60fb      	str	r3, [r7, #12]
 8013edc:	e007      	b.n	8013eee <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d002      	beq.n	8013eee <osDelay+0x2a>
      vTaskDelay(ticks);
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f001 fcd3 	bl	8015894 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8013eee:	68fb      	ldr	r3, [r7, #12]
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3710      	adds	r7, #16
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <osEventFlagsNew>:
  Create and Initialize an Event Flags object.

  Limitations:
  - Event flags are limited to 24 bits.
*/
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013f00:	2300      	movs	r3, #0
 8013f02:	60fb      	str	r3, [r7, #12]

  if (IRQ_Context() == 0U) {
 8013f04:	f7ff fecf 	bl	8013ca6 <IRQ_Context>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d12d      	bne.n	8013f6a <osEventFlagsNew+0x72>
    mem = -1;
 8013f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f12:	60bb      	str	r3, [r7, #8]

    if (attr != NULL) {
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d015      	beq.n	8013f46 <osEventFlagsNew+0x4e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	689b      	ldr	r3, [r3, #8]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d006      	beq.n	8013f30 <osEventFlagsNew+0x38>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	68db      	ldr	r3, [r3, #12]
 8013f26:	2b1f      	cmp	r3, #31
 8013f28:	d902      	bls.n	8013f30 <osEventFlagsNew+0x38>
        /* The memory for control block is provided, use static object */
        mem = 1;
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	60bb      	str	r3, [r7, #8]
 8013f2e:	e00c      	b.n	8013f4a <osEventFlagsNew+0x52>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	689b      	ldr	r3, [r3, #8]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d108      	bne.n	8013f4a <osEventFlagsNew+0x52>
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d104      	bne.n	8013f4a <osEventFlagsNew+0x52>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 8013f40:	2300      	movs	r3, #0
 8013f42:	60bb      	str	r3, [r7, #8]
 8013f44:	e001      	b.n	8013f4a <osEventFlagsNew+0x52>
        }
      }
    }
    else {
      mem = 0;
 8013f46:	2300      	movs	r3, #0
 8013f48:	60bb      	str	r3, [r7, #8]
    }

    if (mem == 1) {
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d106      	bne.n	8013f5e <osEventFlagsNew+0x66>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	689b      	ldr	r3, [r3, #8]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f000 fa0f 	bl	8014378 <xEventGroupCreateStatic>
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	e005      	b.n	8013f6a <osEventFlagsNew+0x72>
      #endif
    }
    else {
      if (mem == 0) {
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d102      	bne.n	8013f6a <osEventFlagsNew+0x72>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013f64:	f000 fa31 	bl	80143ca <xEventGroupCreate>
 8013f68:	60f8      	str	r0, [r7, #12]
      }
    }
  }

  /* Return event flags ID */
  return ((osEventFlagsId_t)hEventGroup);
 8013f6a:	68fb      	ldr	r3, [r7, #12]
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3710      	adds	r7, #16
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <osEventFlagsSet>:
  Set the specified Event Flags.

  Limitations:
  - Event flags are limited to 24 bits.
*/
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b086      	sub	sp, #24
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d003      	beq.n	8013f90 <osEventFlagsSet+0x1c>
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013f8e:	d303      	bcc.n	8013f98 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8013f90:	f06f 0303 	mvn.w	r3, #3
 8013f94:	617b      	str	r3, [r7, #20]
 8013f96:	e029      	b.n	8013fec <osEventFlagsSet+0x78>
  }
  else if (IRQ_Context() != 0U) {
 8013f98:	f7ff fe85 	bl	8013ca6 <IRQ_Context>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d01f      	beq.n	8013fe2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	60fb      	str	r3, [r7, #12]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8013fa6:	f107 030c 	add.w	r3, r7, #12
 8013faa:	461a      	mov	r2, r3
 8013fac:	6839      	ldr	r1, [r7, #0]
 8013fae:	6938      	ldr	r0, [r7, #16]
 8013fb0:	f000 fbd8 	bl	8014764 <xEventGroupSetBitsFromISR>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d103      	bne.n	8013fc2 <osEventFlagsSet+0x4e>
      rflags = (uint32_t)osErrorResource;
 8013fba:	f06f 0302 	mvn.w	r3, #2
 8013fbe:	617b      	str	r3, [r7, #20]
 8013fc0:	e014      	b.n	8013fec <osEventFlagsSet+0x78>
    } else {
      /* Retrieve bits that are already set and add flags to be set in current call */
      rflags  = xEventGroupGetBitsFromISR (hEventGroup);
 8013fc2:	6938      	ldr	r0, [r7, #16]
 8013fc4:	f000 fb02 	bl	80145cc <xEventGroupGetBitsFromISR>
 8013fc8:	6178      	str	r0, [r7, #20]
      rflags |= flags;
 8013fca:	697a      	ldr	r2, [r7, #20]
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d009      	beq.n	8013fec <osEventFlagsSet+0x78>
 8013fd8:	4b07      	ldr	r3, [pc, #28]	@ (8013ff8 <osEventFlagsSet+0x84>)
 8013fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fde:	601a      	str	r2, [r3, #0]
 8013fe0:	e004      	b.n	8013fec <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013fe2:	6839      	ldr	r1, [r7, #0]
 8013fe4:	6938      	ldr	r0, [r7, #16]
 8013fe6:	f000 fb05 	bl	80145f4 <xEventGroupSetBits>
 8013fea:	6178      	str	r0, [r7, #20]
  }

  /* Return event flags after setting */
  return (rflags);
 8013fec:	697b      	ldr	r3, [r7, #20]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3718      	adds	r7, #24
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	e000ed04 	.word	0xe000ed04

08013ffc <osEventFlagsClear>:
  Clear the specified Event Flags.

  Limitations:
  - Event flags are limited to 24 bits.
*/
uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b084      	sub	sp, #16
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	60bb      	str	r3, [r7, #8]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d003      	beq.n	8014018 <osEventFlagsClear+0x1c>
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014016:	d303      	bcc.n	8014020 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8014018:	f06f 0303 	mvn.w	r3, #3
 801401c:	60fb      	str	r3, [r7, #12]
 801401e:	e01d      	b.n	801405c <osEventFlagsClear+0x60>
  }
  else if (IRQ_Context() != 0U) {
 8014020:	f7ff fe41 	bl	8013ca6 <IRQ_Context>
 8014024:	4603      	mov	r3, r0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d013      	beq.n	8014052 <osEventFlagsClear+0x56>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801402a:	68b8      	ldr	r0, [r7, #8]
 801402c:	f000 face 	bl	80145cc <xEventGroupGetBitsFromISR>
 8014030:	60f8      	str	r0, [r7, #12]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	68b8      	ldr	r0, [r7, #8]
 8014036:	f000 fab5 	bl	80145a4 <xEventGroupClearBitsFromISR>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d103      	bne.n	8014048 <osEventFlagsClear+0x4c>
      rflags = (uint32_t)osErrorResource;
 8014040:	f06f 0302 	mvn.w	r3, #2
 8014044:	60fb      	str	r3, [r7, #12]
 8014046:	e009      	b.n	801405c <osEventFlagsClear+0x60>
    }
    else {
      /* xEventGroupClearBitsFromISR only registers clear operation in the timer command queue. */
      /* Yield is required here otherwise clear operation might not execute in the right order. */
      /* See https://github.com/FreeRTOS/FreeRTOS-Kernel/issues/93 for more info.               */
      portYIELD_FROM_ISR (pdTRUE);
 8014048:	4b07      	ldr	r3, [pc, #28]	@ (8014068 <osEventFlagsClear+0x6c>)
 801404a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801404e:	601a      	str	r2, [r3, #0]
 8014050:	e004      	b.n	801405c <osEventFlagsClear+0x60>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8014052:	6839      	ldr	r1, [r7, #0]
 8014054:	68b8      	ldr	r0, [r7, #8]
 8014056:	f000 fa7b 	bl	8014550 <xEventGroupClearBits>
 801405a:	60f8      	str	r0, [r7, #12]
  }

  /* Return event flags before clearing */
  return (rflags);
 801405c:	68fb      	ldr	r3, [r7, #12]
}
 801405e:	4618      	mov	r0, r3
 8014060:	3710      	adds	r7, #16
 8014062:	46bd      	mov	sp, r7
 8014064:	bd80      	pop	{r7, pc}
 8014066:	bf00      	nop
 8014068:	e000ed04 	.word	0xe000ed04

0801406c <osEventFlagsGet>:
  Get the current Event Flags.

  Limitations:
  - Event flags are limited to 24 bits.
*/
uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	60bb      	str	r3, [r7, #8]
  uint32_t rflags;

  if (ef_id == NULL) {
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d102      	bne.n	8014084 <osEventFlagsGet+0x18>
    rflags = 0U;
 801407e:	2300      	movs	r3, #0
 8014080:	60fb      	str	r3, [r7, #12]
 8014082:	e00e      	b.n	80140a2 <osEventFlagsGet+0x36>
  }
  else if (IRQ_Context() != 0U) {
 8014084:	f7ff fe0f 	bl	8013ca6 <IRQ_Context>
 8014088:	4603      	mov	r3, r0
 801408a:	2b00      	cmp	r3, #0
 801408c:	d004      	beq.n	8014098 <osEventFlagsGet+0x2c>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801408e:	68b8      	ldr	r0, [r7, #8]
 8014090:	f000 fa9c 	bl	80145cc <xEventGroupGetBitsFromISR>
 8014094:	60f8      	str	r0, [r7, #12]
 8014096:	e004      	b.n	80140a2 <osEventFlagsGet+0x36>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8014098:	2100      	movs	r1, #0
 801409a:	68b8      	ldr	r0, [r7, #8]
 801409c:	f000 fa58 	bl	8014550 <xEventGroupClearBits>
 80140a0:	60f8      	str	r0, [r7, #12]
  }

  /* Return current event flags */
  return (rflags);
 80140a2:	68fb      	ldr	r3, [r7, #12]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}

080140ac <osEventFlagsWait>:

  Limitations:
  - Event flags are limited to 24 bits.
  - osEventFlagsWait cannot be called from an ISR.
*/
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b08a      	sub	sp, #40	@ 0x28
 80140b0:	af02      	add	r7, sp, #8
 80140b2:	60f8      	str	r0, [r7, #12]
 80140b4:	60b9      	str	r1, [r7, #8]
 80140b6:	607a      	str	r2, [r7, #4]
 80140b8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	613b      	str	r3, [r7, #16]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d003      	beq.n	80140cc <osEventFlagsWait+0x20>
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80140ca:	d303      	bcc.n	80140d4 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80140cc:	f06f 0303 	mvn.w	r3, #3
 80140d0:	617b      	str	r3, [r7, #20]
 80140d2:	e051      	b.n	8014178 <osEventFlagsWait+0xcc>
  }
  else if (IRQ_Context() != 0U) {
 80140d4:	f7ff fde7 	bl	8013ca6 <IRQ_Context>
 80140d8:	4603      	mov	r3, r0
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d00a      	beq.n	80140f4 <osEventFlagsWait+0x48>
    if (timeout == 0U) {
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d103      	bne.n	80140ec <osEventFlagsWait+0x40>
      /* Try semantic is not supported */
      rflags = (uint32_t)osErrorISR;
 80140e4:	f06f 0305 	mvn.w	r3, #5
 80140e8:	617b      	str	r3, [r7, #20]
 80140ea:	e045      	b.n	8014178 <osEventFlagsWait+0xcc>
    } else {
      /* Calling osEventFlagsWait from ISR with non-zero timeout is invalid */
      rflags = (uint32_t)osFlagsErrorParameter;
 80140ec:	f06f 0303 	mvn.w	r3, #3
 80140f0:	617b      	str	r3, [r7, #20]
 80140f2:	e041      	b.n	8014178 <osEventFlagsWait+0xcc>
    }
  }
  else {
    if (options & osFlagsWaitAll) {
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f003 0301 	and.w	r3, r3, #1
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d002      	beq.n	8014104 <osEventFlagsWait+0x58>
      wait_all = pdTRUE;
 80140fe:	2301      	movs	r3, #1
 8014100:	61fb      	str	r3, [r7, #28]
 8014102:	e001      	b.n	8014108 <osEventFlagsWait+0x5c>
    } else {
      wait_all = pdFAIL;
 8014104:	2300      	movs	r3, #0
 8014106:	61fb      	str	r3, [r7, #28]
    }

    if (options & osFlagsNoClear) {
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f003 0302 	and.w	r3, r3, #2
 801410e:	2b00      	cmp	r3, #0
 8014110:	d002      	beq.n	8014118 <osEventFlagsWait+0x6c>
      exit_clr = pdFAIL;
 8014112:	2300      	movs	r3, #0
 8014114:	61bb      	str	r3, [r7, #24]
 8014116:	e001      	b.n	801411c <osEventFlagsWait+0x70>
    } else {
      exit_clr = pdTRUE;
 8014118:	2301      	movs	r3, #1
 801411a:	61bb      	str	r3, [r7, #24]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	9300      	str	r3, [sp, #0]
 8014120:	69fb      	ldr	r3, [r7, #28]
 8014122:	69ba      	ldr	r2, [r7, #24]
 8014124:	68b9      	ldr	r1, [r7, #8]
 8014126:	6938      	ldr	r0, [r7, #16]
 8014128:	f000 f969 	bl	80143fe <xEventGroupWaitBits>
 801412c:	6178      	str	r0, [r7, #20]

    if (options & osFlagsWaitAll) {
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f003 0301 	and.w	r3, r3, #1
 8014134:	2b00      	cmp	r3, #0
 8014136:	d010      	beq.n	801415a <osEventFlagsWait+0xae>
      if ((flags & rflags) != flags) {
 8014138:	68ba      	ldr	r2, [r7, #8]
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	4013      	ands	r3, r2
 801413e:	68ba      	ldr	r2, [r7, #8]
 8014140:	429a      	cmp	r2, r3
 8014142:	d019      	beq.n	8014178 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d003      	beq.n	8014152 <osEventFlagsWait+0xa6>
          rflags = (uint32_t)osErrorTimeout;
 801414a:	f06f 0301 	mvn.w	r3, #1
 801414e:	617b      	str	r3, [r7, #20]
 8014150:	e012      	b.n	8014178 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8014152:	f06f 0302 	mvn.w	r3, #2
 8014156:	617b      	str	r3, [r7, #20]
 8014158:	e00e      	b.n	8014178 <osEventFlagsWait+0xcc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	4013      	ands	r3, r2
 8014160:	2b00      	cmp	r3, #0
 8014162:	d109      	bne.n	8014178 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d003      	beq.n	8014172 <osEventFlagsWait+0xc6>
          rflags = (uint32_t)osErrorTimeout;
 801416a:	f06f 0301 	mvn.w	r3, #1
 801416e:	617b      	str	r3, [r7, #20]
 8014170:	e002      	b.n	8014178 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8014172:	f06f 0302 	mvn.w	r3, #2
 8014176:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return event flags before clearing */
  return (rflags);
 8014178:	697b      	ldr	r3, [r7, #20]
}
 801417a:	4618      	mov	r0, r3
 801417c:	3720      	adds	r7, #32
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014182:	b580      	push	{r7, lr}
 8014184:	b088      	sub	sp, #32
 8014186:	af02      	add	r7, sp, #8
 8014188:	60f8      	str	r0, [r7, #12]
 801418a:	60b9      	str	r1, [r7, #8]
 801418c:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 801418e:	2300      	movs	r3, #0
 8014190:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 8014192:	f7ff fd88 	bl	8013ca6 <IRQ_Context>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d175      	bne.n	8014288 <osSemaphoreNew+0x106>
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d072      	beq.n	8014288 <osSemaphoreNew+0x106>
 80141a2:	68ba      	ldr	r2, [r7, #8]
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d86e      	bhi.n	8014288 <osSemaphoreNew+0x106>
    mem = -1;
 80141aa:	f04f 33ff 	mov.w	r3, #4294967295
 80141ae:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d015      	beq.n	80141e2 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	689b      	ldr	r3, [r3, #8]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d006      	beq.n	80141cc <osSemaphoreNew+0x4a>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80141c4:	d902      	bls.n	80141cc <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 80141c6:	2301      	movs	r3, #1
 80141c8:	613b      	str	r3, [r7, #16]
 80141ca:	e00c      	b.n	80141e6 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	689b      	ldr	r3, [r3, #8]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d108      	bne.n	80141e6 <osSemaphoreNew+0x64>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d104      	bne.n	80141e6 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 80141dc:	2300      	movs	r3, #0
 80141de:	613b      	str	r3, [r7, #16]
 80141e0:	e001      	b.n	80141e6 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 80141e2:	2300      	movs	r3, #0
 80141e4:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ec:	d04c      	beq.n	8014288 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2b01      	cmp	r3, #1
 80141f2:	d128      	bne.n	8014246 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	2b01      	cmp	r3, #1
 80141f8:	d10a      	bne.n	8014210 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	689b      	ldr	r3, [r3, #8]
 80141fe:	2203      	movs	r2, #3
 8014200:	9200      	str	r2, [sp, #0]
 8014202:	2200      	movs	r2, #0
 8014204:	2100      	movs	r1, #0
 8014206:	2001      	movs	r0, #1
 8014208:	f000 fbe8 	bl	80149dc <xQueueGenericCreateStatic>
 801420c:	6178      	str	r0, [r7, #20]
 801420e:	e005      	b.n	801421c <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8014210:	2203      	movs	r2, #3
 8014212:	2100      	movs	r1, #0
 8014214:	2001      	movs	r0, #1
 8014216:	f000 fc2a 	bl	8014a6e <xQueueGenericCreate>
 801421a:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d022      	beq.n	8014268 <osSemaphoreNew+0xe6>
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d01f      	beq.n	8014268 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014228:	2300      	movs	r3, #0
 801422a:	2200      	movs	r2, #0
 801422c:	2100      	movs	r1, #0
 801422e:	6978      	ldr	r0, [r7, #20]
 8014230:	f000 fcdd 	bl	8014bee <xQueueGenericSend>
 8014234:	4603      	mov	r3, r0
 8014236:	2b01      	cmp	r3, #1
 8014238:	d016      	beq.n	8014268 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 801423a:	6978      	ldr	r0, [r7, #20]
 801423c:	f000 ff49 	bl	80150d2 <vQueueDelete>
            hSemaphore = NULL;
 8014240:	2300      	movs	r3, #0
 8014242:	617b      	str	r3, [r7, #20]
 8014244:	e010      	b.n	8014268 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 8014246:	693b      	ldr	r3, [r7, #16]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d108      	bne.n	801425e <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	689b      	ldr	r3, [r3, #8]
 8014250:	461a      	mov	r2, r3
 8014252:	68b9      	ldr	r1, [r7, #8]
 8014254:	68f8      	ldr	r0, [r7, #12]
 8014256:	f000 fc78 	bl	8014b4a <xQueueCreateCountingSemaphoreStatic>
 801425a:	6178      	str	r0, [r7, #20]
 801425c:	e004      	b.n	8014268 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801425e:	68b9      	ldr	r1, [r7, #8]
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	f000 fc9d 	bl	8014ba0 <xQueueCreateCountingSemaphore>
 8014266:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d00c      	beq.n	8014288 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d009      	beq.n	8014288 <osSemaphoreNew+0x106>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d005      	beq.n	8014288 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4619      	mov	r1, r3
 8014282:	6978      	ldr	r0, [r7, #20]
 8014284:	f001 f852 	bl	801532c <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 8014288:	697b      	ldr	r3, [r7, #20]
}
 801428a:	4618      	mov	r0, r3
 801428c:	3718      	adds	r7, #24
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
	...

08014294 <osSemaphoreRelease>:
}

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8014294:	b580      	push	{r7, lr}
 8014296:	b086      	sub	sp, #24
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80142a0:	2300      	movs	r3, #0
 80142a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d103      	bne.n	80142b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80142aa:	f06f 0303 	mvn.w	r3, #3
 80142ae:	617b      	str	r3, [r7, #20]
 80142b0:	e027      	b.n	8014302 <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 80142b2:	f7ff fcf8 	bl	8013ca6 <IRQ_Context>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d016      	beq.n	80142ea <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 80142bc:	2300      	movs	r3, #0
 80142be:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80142c0:	f107 030c 	add.w	r3, r7, #12
 80142c4:	4619      	mov	r1, r3
 80142c6:	6938      	ldr	r0, [r7, #16]
 80142c8:	f000 fdd7 	bl	8014e7a <xQueueGiveFromISR>
 80142cc:	4603      	mov	r3, r0
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	d003      	beq.n	80142da <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 80142d2:	f06f 0302 	mvn.w	r3, #2
 80142d6:	617b      	str	r3, [r7, #20]
 80142d8:	e013      	b.n	8014302 <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d010      	beq.n	8014302 <osSemaphoreRelease+0x6e>
 80142e0:	4b0a      	ldr	r3, [pc, #40]	@ (801430c <osSemaphoreRelease+0x78>)
 80142e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142e6:	601a      	str	r2, [r3, #0]
 80142e8:	e00b      	b.n	8014302 <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80142ea:	2300      	movs	r3, #0
 80142ec:	2200      	movs	r2, #0
 80142ee:	2100      	movs	r1, #0
 80142f0:	6938      	ldr	r0, [r7, #16]
 80142f2:	f000 fc7c 	bl	8014bee <xQueueGenericSend>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d002      	beq.n	8014302 <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 80142fc:	f06f 0302 	mvn.w	r3, #2
 8014300:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 8014302:	697b      	ldr	r3, [r7, #20]
}
 8014304:	4618      	mov	r0, r3
 8014306:	3718      	adds	r7, #24
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	e000ed04 	.word	0xe000ed04

08014310 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014310:	b480      	push	{r7}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	4a07      	ldr	r2, [pc, #28]	@ (801433c <vApplicationGetIdleTaskMemory+0x2c>)
 8014320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	4a06      	ldr	r2, [pc, #24]	@ (8014340 <vApplicationGetIdleTaskMemory+0x30>)
 8014326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2280      	movs	r2, #128	@ 0x80
 801432c:	601a      	str	r2, [r3, #0]
}
 801432e:	bf00      	nop
 8014330:	3714      	adds	r7, #20
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr
 801433a:	bf00      	nop
 801433c:	200293a0 	.word	0x200293a0
 8014340:	200293fc 	.word	0x200293fc

08014344 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014344:	b480      	push	{r7}
 8014346:	b085      	sub	sp, #20
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	4a07      	ldr	r2, [pc, #28]	@ (8014370 <vApplicationGetTimerTaskMemory+0x2c>)
 8014354:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	4a06      	ldr	r2, [pc, #24]	@ (8014374 <vApplicationGetTimerTaskMemory+0x30>)
 801435a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2280      	movs	r2, #128	@ 0x80
 8014360:	601a      	str	r2, [r3, #0]
}
 8014362:	bf00      	nop
 8014364:	3714      	adds	r7, #20
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr
 801436e:	bf00      	nop
 8014370:	200295fc 	.word	0x200295fc
 8014374:	20029658 	.word	0x20029658

08014378 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
    {
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits;

        /* A StaticEventGroup_t object must be provided. */
        configASSERT( pxEventGroupBuffer );
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d103      	bne.n	801438e <xEventGroupCreateStatic+0x16>
 8014386:	f002 fe37 	bl	8016ff8 <ulSetInterruptMask>
 801438a:	bf00      	nop
 801438c:	e7fd      	b.n	801438a <xEventGroupCreateStatic+0x12>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticEventGroup_t equals the size of the real
             * event group structure. */
            volatile size_t xSize = sizeof( StaticEventGroup_t );
 801438e:	2320      	movs	r3, #32
 8014390:	60bb      	str	r3, [r7, #8]
            configASSERT( xSize == sizeof( EventGroup_t ) );
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	2b20      	cmp	r3, #32
 8014396:	d003      	beq.n	80143a0 <xEventGroupCreateStatic+0x28>
 8014398:	f002 fe2e 	bl	8016ff8 <ulSetInterruptMask>
 801439c:	bf00      	nop
 801439e:	e7fd      	b.n	801439c <xEventGroupCreateStatic+0x24>
        } /*lint !e529 xSize is referenced if configASSERT() is defined. */
        #endif /* configASSERT_DEFINED */

        /* The user has provided a statically allocated event group - use it. */
        pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	60fb      	str	r3, [r7, #12]

        if( pxEventBits != NULL )
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00a      	beq.n	80143c0 <xEventGroupCreateStatic+0x48>
        {
            pxEventBits->uxEventBits = 0;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	2200      	movs	r2, #0
 80143ae:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	3304      	adds	r3, #4
 80143b4:	4618      	mov	r0, r3
 80143b6:	f000 f9e9 	bl	801478c <vListInitialise>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Both static and dynamic allocation can be used, so note that
                 * this event group was created statically in case the event group
                 * is later deleted. */
                pxEventBits->ucStaticallyAllocated = pdTRUE;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2201      	movs	r2, #1
 80143be:	771a      	strb	r2, [r3, #28]
             * pxEventGroupBuffer pointing to a pre-allocated (compile time
             * allocated) StaticEventGroup_t variable. */
            traceEVENT_GROUP_CREATE_FAILED();
        }

        return pxEventBits;
 80143c0:	68fb      	ldr	r3, [r7, #12]
    }
 80143c2:	4618      	mov	r0, r3
 80143c4:	3710      	adds	r7, #16
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}

080143ca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 80143ca:	b580      	push	{r7, lr}
 80143cc:	b082      	sub	sp, #8
 80143ce:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80143d0:	2020      	movs	r0, #32
 80143d2:	f002 fe71 	bl	80170b8 <pvPortMalloc>
 80143d6:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d00a      	beq.n	80143f4 <xEventGroupCreate+0x2a>
        {
            pxEventBits->uxEventBits = 0;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	3304      	adds	r3, #4
 80143e8:	4618      	mov	r0, r3
 80143ea:	f000 f9cf 	bl	801478c <vListInitialise>
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                /* Both static and dynamic allocation can be used, so note this
                 * event group was allocated statically in case the event group is
                 * later deleted. */
                pxEventBits->ucStaticallyAllocated = pdFALSE;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2200      	movs	r2, #0
 80143f2:	771a      	strb	r2, [r3, #28]
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80143f4:	687b      	ldr	r3, [r7, #4]
    }
 80143f6:	4618      	mov	r0, r3
 80143f8:	3708      	adds	r7, #8
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}

080143fe <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 80143fe:	b580      	push	{r7, lr}
 8014400:	b08c      	sub	sp, #48	@ 0x30
 8014402:	af00      	add	r7, sp, #0
 8014404:	60f8      	str	r0, [r7, #12]
 8014406:	60b9      	str	r1, [r7, #8]
 8014408:	607a      	str	r2, [r7, #4]
 801440a:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	627b      	str	r3, [r7, #36]	@ 0x24
    EventBits_t uxReturn, uxControlBits = 0;
 8014410:	2300      	movs	r3, #0
 8014412:	62bb      	str	r3, [r7, #40]	@ 0x28
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8014414:	2300      	movs	r3, #0
 8014416:	623b      	str	r3, [r7, #32]

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d103      	bne.n	8014426 <xEventGroupWaitBits+0x28>
 801441e:	f002 fdeb 	bl	8016ff8 <ulSetInterruptMask>
 8014422:	bf00      	nop
 8014424:	e7fd      	b.n	8014422 <xEventGroupWaitBits+0x24>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801442c:	d303      	bcc.n	8014436 <xEventGroupWaitBits+0x38>
 801442e:	f002 fde3 	bl	8016ff8 <ulSetInterruptMask>
 8014432:	bf00      	nop
 8014434:	e7fd      	b.n	8014432 <xEventGroupWaitBits+0x34>
    configASSERT( uxBitsToWaitFor != 0 );
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d103      	bne.n	8014444 <xEventGroupWaitBits+0x46>
 801443c:	f002 fddc 	bl	8016ff8 <ulSetInterruptMask>
 8014440:	bf00      	nop
 8014442:	e7fd      	b.n	8014440 <xEventGroupWaitBits+0x42>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014444:	f002 f856 	bl	80164f4 <xTaskGetSchedulerState>
 8014448:	4603      	mov	r3, r0
 801444a:	2b00      	cmp	r3, #0
 801444c:	d102      	bne.n	8014454 <xEventGroupWaitBits+0x56>
 801444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014450:	2b00      	cmp	r3, #0
 8014452:	d101      	bne.n	8014458 <xEventGroupWaitBits+0x5a>
 8014454:	2301      	movs	r3, #1
 8014456:	e000      	b.n	801445a <xEventGroupWaitBits+0x5c>
 8014458:	2300      	movs	r3, #0
 801445a:	2b00      	cmp	r3, #0
 801445c:	d103      	bne.n	8014466 <xEventGroupWaitBits+0x68>
 801445e:	f002 fdcb 	bl	8016ff8 <ulSetInterruptMask>
 8014462:	bf00      	nop
 8014464:	e7fd      	b.n	8014462 <xEventGroupWaitBits+0x64>
    }
    #endif

    vTaskSuspendAll();
 8014466:	f001 fa97 	bl	8015998 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	61fb      	str	r3, [r7, #28]

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8014470:	683a      	ldr	r2, [r7, #0]
 8014472:	68b9      	ldr	r1, [r7, #8]
 8014474:	69f8      	ldr	r0, [r7, #28]
 8014476:	f000 f953 	bl	8014720 <prvTestWaitCondition>
 801447a:	61b8      	str	r0, [r7, #24]

        if( xWaitConditionMet != pdFALSE )
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d00e      	beq.n	80144a0 <xEventGroupWaitBits+0xa2>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8014482:	69fb      	ldr	r3, [r7, #28]
 8014484:	62fb      	str	r3, [r7, #44]	@ 0x2c
            xTicksToWait = ( TickType_t ) 0;
 8014486:	2300      	movs	r3, #0
 8014488:	63bb      	str	r3, [r7, #56]	@ 0x38

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d028      	beq.n	80144e2 <xEventGroupWaitBits+0xe4>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8014490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	43db      	mvns	r3, r3
 8014498:	401a      	ands	r2, r3
 801449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801449c:	601a      	str	r2, [r3, #0]
 801449e:	e020      	b.n	80144e2 <xEventGroupWaitBits+0xe4>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 80144a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d104      	bne.n	80144b0 <xEventGroupWaitBits+0xb2>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            xTimeoutOccurred = pdTRUE;
 80144aa:	2301      	movs	r3, #1
 80144ac:	623b      	str	r3, [r7, #32]
 80144ae:	e018      	b.n	80144e2 <xEventGroupWaitBits+0xe4>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d003      	beq.n	80144be <xEventGroupWaitBits+0xc0>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80144b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80144bc:	62bb      	str	r3, [r7, #40]	@ 0x28
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d003      	beq.n	80144cc <xEventGroupWaitBits+0xce>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80144c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80144ca:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80144cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144ce:	1d18      	adds	r0, r3, #4
 80144d0:	68ba      	ldr	r2, [r7, #8]
 80144d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144d4:	4313      	orrs	r3, r2
 80144d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144d8:	4619      	mov	r1, r3
 80144da:	f001 fccf 	bl	8015e7c <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 80144e2:	f001 fa67 	bl	80159b4 <xTaskResumeAll>
 80144e6:	6178      	str	r0, [r7, #20]

    if( xTicksToWait != ( TickType_t ) 0 )
 80144e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d02b      	beq.n	8014546 <xEventGroupWaitBits+0x148>
    {
        if( xAlreadyYielded == pdFALSE )
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d101      	bne.n	80144f8 <xEventGroupWaitBits+0xfa>
        {
            portYIELD_WITHIN_API();
 80144f4:	f002 fc30 	bl	8016d58 <vPortYield>

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 80144f8:	f002 f8a2 	bl	8016640 <uxTaskResetEventItemValue>
 80144fc:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80144fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014504:	2b00      	cmp	r3, #0
 8014506:	d11a      	bne.n	801453e <xEventGroupWaitBits+0x140>
        {
            taskENTER_CRITICAL();
 8014508:	f002 fc38 	bl	8016d7c <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 801450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8014512:	683a      	ldr	r2, [r7, #0]
 8014514:	68b9      	ldr	r1, [r7, #8]
 8014516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014518:	f000 f902 	bl	8014720 <prvTestWaitCondition>
 801451c:	4603      	mov	r3, r0
 801451e:	2b00      	cmp	r3, #0
 8014520:	d009      	beq.n	8014536 <xEventGroupWaitBits+0x138>
                {
                    if( xClearOnExit != pdFALSE )
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d006      	beq.n	8014536 <xEventGroupWaitBits+0x138>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8014528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801452a:	681a      	ldr	r2, [r3, #0]
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	43db      	mvns	r3, r3
 8014530:	401a      	ands	r2, r3
 8014532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014534:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8014536:	2301      	movs	r3, #1
 8014538:	623b      	str	r3, [r7, #32]
            }
            taskEXIT_CRITICAL();
 801453a:	f002 fc31 	bl	8016da0 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014540:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8014544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8014546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8014548:	4618      	mov	r0, r3
 801454a:	3730      	adds	r7, #48	@ 0x30
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}

08014550 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b084      	sub	sp, #16
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	60fb      	str	r3, [r7, #12]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d103      	bne.n	801456c <xEventGroupClearBits+0x1c>
 8014564:	f002 fd48 	bl	8016ff8 <ulSetInterruptMask>
 8014568:	bf00      	nop
 801456a:	e7fd      	b.n	8014568 <xEventGroupClearBits+0x18>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014572:	d303      	bcc.n	801457c <xEventGroupClearBits+0x2c>
 8014574:	f002 fd40 	bl	8016ff8 <ulSetInterruptMask>
 8014578:	bf00      	nop
 801457a:	e7fd      	b.n	8014578 <xEventGroupClearBits+0x28>

    taskENTER_CRITICAL();
 801457c:	f002 fbfe 	bl	8016d7c <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	60bb      	str	r3, [r7, #8]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	681a      	ldr	r2, [r3, #0]
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	43db      	mvns	r3, r3
 801458e:	401a      	ands	r2, r3
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 8014594:	f002 fc04 	bl	8016da0 <vPortExitCritical>

    return uxReturn;
 8014598:	68bb      	ldr	r3, [r7, #8]
}
 801459a:	4618      	mov	r0, r3
 801459c:	3710      	adds	r7, #16
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
	...

080145a4 <xEventGroupClearBitsFromISR>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
                                            const EventBits_t uxBitsToClear )
    {
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80145ae:	2300      	movs	r3, #0
 80145b0:	683a      	ldr	r2, [r7, #0]
 80145b2:	6879      	ldr	r1, [r7, #4]
 80145b4:	4804      	ldr	r0, [pc, #16]	@ (80145c8 <xEventGroupClearBitsFromISR+0x24>)
 80145b6:	f002 fb6f 	bl	8016c98 <xTimerPendFunctionCallFromISR>
 80145ba:	60f8      	str	r0, [r7, #12]

        return xReturn;
 80145bc:	68fb      	ldr	r3, [r7, #12]
    }
 80145be:	4618      	mov	r0, r3
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	08014707 	.word	0x08014707

080145cc <xEventGroupGetBitsFromISR>:

#endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b086      	sub	sp, #24
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxSavedInterruptStatus;
    EventGroup_t const * const pxEventBits = xEventGroup;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80145d8:	f002 fd0e 	bl	8016ff8 <ulSetInterruptMask>
 80145dc:	6138      	str	r0, [r7, #16]
    {
        uxReturn = pxEventBits->uxEventBits;
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	60fb      	str	r3, [r7, #12]
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80145e4:	6938      	ldr	r0, [r7, #16]
 80145e6:	f002 fd14 	bl	8017012 <vClearInterruptMask>

    return uxReturn;
 80145ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80145ec:	4618      	mov	r0, r3
 80145ee:	3718      	adds	r7, #24
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b08c      	sub	sp, #48	@ 0x30
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem;
    ListItem_t * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80145fe:	2300      	movs	r3, #0
 8014600:	62bb      	str	r3, [r7, #40]	@ 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 8014606:	2300      	movs	r3, #0
 8014608:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d103      	bne.n	8014618 <xEventGroupSetBits+0x24>
 8014610:	f002 fcf2 	bl	8016ff8 <ulSetInterruptMask>
 8014614:	bf00      	nop
 8014616:	e7fd      	b.n	8014614 <xEventGroupSetBits+0x20>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801461e:	d303      	bcc.n	8014628 <xEventGroupSetBits+0x34>
 8014620:	f002 fcea 	bl	8016ff8 <ulSetInterruptMask>
 8014624:	bf00      	nop
 8014626:	e7fd      	b.n	8014624 <xEventGroupSetBits+0x30>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8014628:	6a3b      	ldr	r3, [r7, #32]
 801462a:	3304      	adds	r3, #4
 801462c:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801462e:	69fb      	ldr	r3, [r7, #28]
 8014630:	3308      	adds	r3, #8
 8014632:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8014634:	f001 f9b0 	bl	8015998 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	68db      	ldr	r3, [r3, #12]
 801463c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 801463e:	6a3b      	ldr	r3, [r7, #32]
 8014640:	681a      	ldr	r2, [r3, #0]
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	431a      	orrs	r2, r3
 8014646:	6a3b      	ldr	r3, [r7, #32]
 8014648:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 801464a:	e03c      	b.n	80146c6 <xEventGroupSetBits+0xd2>
        {
            pxNext = listGET_NEXT( pxListItem );
 801464c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8014652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 8014658:	2300      	movs	r3, #0
 801465a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8014662:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801466a:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014672:	2b00      	cmp	r3, #0
 8014674:	d108      	bne.n	8014688 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8014676:	6a3b      	ldr	r3, [r7, #32]
 8014678:	681a      	ldr	r2, [r3, #0]
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	4013      	ands	r3, r2
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00b      	beq.n	801469a <xEventGroupSetBits+0xa6>
                {
                    xMatchFound = pdTRUE;
 8014682:	2301      	movs	r3, #1
 8014684:	627b      	str	r3, [r7, #36]	@ 0x24
 8014686:	e008      	b.n	801469a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8014688:	6a3b      	ldr	r3, [r7, #32]
 801468a:	681a      	ldr	r2, [r3, #0]
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	4013      	ands	r3, r2
 8014690:	693a      	ldr	r2, [r7, #16]
 8014692:	429a      	cmp	r2, r3
 8014694:	d101      	bne.n	801469a <xEventGroupSetBits+0xa6>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8014696:	2301      	movs	r3, #1
 8014698:	627b      	str	r3, [r7, #36]	@ 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 801469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801469c:	2b00      	cmp	r3, #0
 801469e:	d010      	beq.n	80146c2 <xEventGroupSetBits+0xce>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d003      	beq.n	80146b2 <xEventGroupSetBits+0xbe>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 80146aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	4313      	orrs	r3, r2
 80146b0:	62bb      	str	r3, [r7, #40]	@ 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80146b2:	6a3b      	ldr	r3, [r7, #32]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80146ba:	4619      	mov	r1, r3
 80146bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80146be:	f001 fd31 	bl	8016124 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( pxListItem != pxListEnd )
 80146c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d1be      	bne.n	801464c <xEventGroupSetBits+0x58>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80146ce:	6a3b      	ldr	r3, [r7, #32]
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146d4:	43db      	mvns	r3, r3
 80146d6:	401a      	ands	r2, r3
 80146d8:	6a3b      	ldr	r3, [r7, #32]
 80146da:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 80146dc:	f001 f96a 	bl	80159b4 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 80146e0:	6a3b      	ldr	r3, [r7, #32]
 80146e2:	681b      	ldr	r3, [r3, #0]
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3730      	adds	r7, #48	@ 0x30
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}

080146ec <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
 * an interrupt. */
void vEventGroupSetBitsCallback( void * pvEventGroup,
                                 const uint32_t ulBitsToSet )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
 80146f4:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80146f6:	6839      	ldr	r1, [r7, #0]
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f7ff ff7b 	bl	80145f4 <xEventGroupSetBits>
}
 80146fe:	bf00      	nop
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}

08014706 <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
 8014706:	b580      	push	{r7, lr}
 8014708:	b082      	sub	sp, #8
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
 801470e:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8014710:	6839      	ldr	r1, [r7, #0]
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f7ff ff1c 	bl	8014550 <xEventGroupClearBits>
}
 8014718:	bf00      	nop
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8014720:	b480      	push	{r7}
 8014722:	b087      	sub	sp, #28
 8014724:	af00      	add	r7, sp, #0
 8014726:	60f8      	str	r0, [r7, #12]
 8014728:	60b9      	str	r1, [r7, #8]
 801472a:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 801472c:	2300      	movs	r3, #0
 801472e:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d107      	bne.n	8014746 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8014736:	68fa      	ldr	r2, [r7, #12]
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	4013      	ands	r3, r2
 801473c:	2b00      	cmp	r3, #0
 801473e:	d00a      	beq.n	8014756 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8014740:	2301      	movs	r3, #1
 8014742:	617b      	str	r3, [r7, #20]
 8014744:	e007      	b.n	8014756 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8014746:	68fa      	ldr	r2, [r7, #12]
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	4013      	ands	r3, r2
 801474c:	68ba      	ldr	r2, [r7, #8]
 801474e:	429a      	cmp	r2, r3
 8014750:	d101      	bne.n	8014756 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8014752:	2301      	movs	r3, #1
 8014754:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8014756:	697b      	ldr	r3, [r7, #20]
}
 8014758:	4618      	mov	r0, r3
 801475a:	371c      	adds	r7, #28
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr

08014764 <xEventGroupSetBitsFromISR>:
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                          const EventBits_t uxBitsToSet,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8014764:	b580      	push	{r7, lr}
 8014766:	b086      	sub	sp, #24
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;

        traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	68ba      	ldr	r2, [r7, #8]
 8014774:	68f9      	ldr	r1, [r7, #12]
 8014776:	4804      	ldr	r0, [pc, #16]	@ (8014788 <xEventGroupSetBitsFromISR+0x24>)
 8014778:	f002 fa8e 	bl	8016c98 <xTimerPendFunctionCallFromISR>
 801477c:	6178      	str	r0, [r7, #20]

        return xReturn;
 801477e:	697b      	ldr	r3, [r7, #20]
    }
 8014780:	4618      	mov	r0, r3
 8014782:	3718      	adds	r7, #24
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}
 8014788:	080146ed 	.word	0x080146ed

0801478c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801478c:	b480      	push	{r7}
 801478e:	b083      	sub	sp, #12
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f103 0208 	add.w	r2, r3, #8
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f04f 32ff 	mov.w	r2, #4294967295
 80147a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f103 0208 	add.w	r2, r3, #8
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f103 0208 	add.w	r2, r3, #8
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2200      	movs	r2, #0
 80147be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80147c0:	bf00      	nop
 80147c2:	370c      	adds	r7, #12
 80147c4:	46bd      	mov	sp, r7
 80147c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ca:	4770      	bx	lr

080147cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80147cc:	b480      	push	{r7}
 80147ce:	b083      	sub	sp, #12
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2200      	movs	r2, #0
 80147d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80147da:	bf00      	nop
 80147dc:	370c      	adds	r7, #12
 80147de:	46bd      	mov	sp, r7
 80147e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e4:	4770      	bx	lr

080147e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80147e6:	b480      	push	{r7}
 80147e8:	b085      	sub	sp, #20
 80147ea:	af00      	add	r7, sp, #0
 80147ec:	6078      	str	r0, [r7, #4]
 80147ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	68fa      	ldr	r2, [r7, #12]
 80147fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	689a      	ldr	r2, [r3, #8]
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	689b      	ldr	r3, [r3, #8]
 8014808:	683a      	ldr	r2, [r7, #0]
 801480a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	683a      	ldr	r2, [r7, #0]
 8014810:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	687a      	ldr	r2, [r7, #4]
 8014816:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	1c5a      	adds	r2, r3, #1
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	601a      	str	r2, [r3, #0]
}
 8014822:	bf00      	nop
 8014824:	3714      	adds	r7, #20
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr

0801482e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 801482e:	b480      	push	{r7}
 8014830:	b085      	sub	sp, #20
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
 8014836:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014844:	d103      	bne.n	801484e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	691b      	ldr	r3, [r3, #16]
 801484a:	60fb      	str	r3, [r7, #12]
 801484c:	e00c      	b.n	8014868 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	3308      	adds	r3, #8
 8014852:	60fb      	str	r3, [r7, #12]
 8014854:	e002      	b.n	801485c <vListInsert+0x2e>
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	60fb      	str	r3, [r7, #12]
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	68ba      	ldr	r2, [r7, #8]
 8014864:	429a      	cmp	r2, r3
 8014866:	d2f6      	bcs.n	8014856 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	685a      	ldr	r2, [r3, #4]
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	685b      	ldr	r3, [r3, #4]
 8014874:	683a      	ldr	r2, [r7, #0]
 8014876:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	68fa      	ldr	r2, [r7, #12]
 801487c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	683a      	ldr	r2, [r7, #0]
 8014882:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	687a      	ldr	r2, [r7, #4]
 8014888:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	1c5a      	adds	r2, r3, #1
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	601a      	str	r2, [r3, #0]
}
 8014894:	bf00      	nop
 8014896:	3714      	adds	r7, #20
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80148a0:	b480      	push	{r7}
 80148a2:	b085      	sub	sp, #20
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	691b      	ldr	r3, [r3, #16]
 80148ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	6892      	ldr	r2, [r2, #8]
 80148b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	689b      	ldr	r3, [r3, #8]
 80148bc:	687a      	ldr	r2, [r7, #4]
 80148be:	6852      	ldr	r2, [r2, #4]
 80148c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d103      	bne.n	80148d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	689a      	ldr	r2, [r3, #8]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2200      	movs	r2, #0
 80148d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	1e5a      	subs	r2, r3, #1
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	681b      	ldr	r3, [r3, #0]
}
 80148e8:	4618      	mov	r0, r3
 80148ea:	3714      	adds	r7, #20
 80148ec:	46bd      	mov	sp, r7
 80148ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f2:	4770      	bx	lr

080148f4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
 80148fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80148fe:	2301      	movs	r3, #1
 8014900:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d103      	bne.n	8014914 <xQueueGenericReset+0x20>
 801490c:	f002 fb74 	bl	8016ff8 <ulSetInterruptMask>
 8014910:	bf00      	nop
 8014912:	e7fd      	b.n	8014910 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d052      	beq.n	80149c0 <xQueueGenericReset+0xcc>
        ( pxQueue->uxLength >= 1U ) &&
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 801491e:	2b00      	cmp	r3, #0
 8014920:	d04e      	beq.n	80149c0 <xQueueGenericReset+0xcc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801492a:	2100      	movs	r1, #0
 801492c:	fba3 2302 	umull	r2, r3, r3, r2
 8014930:	2b00      	cmp	r3, #0
 8014932:	d000      	beq.n	8014936 <xQueueGenericReset+0x42>
 8014934:	2101      	movs	r1, #1
 8014936:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8014938:	2b00      	cmp	r3, #0
 801493a:	d141      	bne.n	80149c0 <xQueueGenericReset+0xcc>
    {
        taskENTER_CRITICAL();
 801493c:	f002 fa1e 	bl	8016d7c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014948:	68b9      	ldr	r1, [r7, #8]
 801494a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801494c:	fb01 f303 	mul.w	r3, r1, r3
 8014950:	441a      	add	r2, r3
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	2200      	movs	r2, #0
 801495a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801496c:	3b01      	subs	r3, #1
 801496e:	68b9      	ldr	r1, [r7, #8]
 8014970:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014972:	fb01 f303 	mul.w	r3, r1, r3
 8014976:	441a      	add	r2, r3
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	22ff      	movs	r2, #255	@ 0xff
 8014980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	22ff      	movs	r2, #255	@ 0xff
 8014988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d109      	bne.n	80149a6 <xQueueGenericReset+0xb2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	691b      	ldr	r3, [r3, #16]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d00f      	beq.n	80149ba <xQueueGenericReset+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	3310      	adds	r3, #16
 801499e:	4618      	mov	r0, r3
 80149a0:	f001 faf2 	bl	8015f88 <xTaskRemoveFromEventList>
 80149a4:	e009      	b.n	80149ba <xQueueGenericReset+0xc6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	3310      	adds	r3, #16
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7ff feee 	bl	801478c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	3324      	adds	r3, #36	@ 0x24
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7ff fee9 	bl	801478c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80149ba:	f002 f9f1 	bl	8016da0 <vPortExitCritical>
 80149be:	e001      	b.n	80149c4 <xQueueGenericReset+0xd0>
    }
    else
    {
        xReturn = pdFAIL;
 80149c0:	2300      	movs	r3, #0
 80149c2:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d103      	bne.n	80149d2 <xQueueGenericReset+0xde>
 80149ca:	f002 fb15 	bl	8016ff8 <ulSetInterruptMask>
 80149ce:	bf00      	nop
 80149d0:	e7fd      	b.n	80149ce <xQueueGenericReset+0xda>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80149d2:	68fb      	ldr	r3, [r7, #12]
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3710      	adds	r7, #16
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80149dc:	b580      	push	{r7, lr}
 80149de:	b088      	sub	sp, #32
 80149e0:	af02      	add	r7, sp, #8
 80149e2:	60f8      	str	r0, [r7, #12]
 80149e4:	60b9      	str	r1, [r7, #8]
 80149e6:	607a      	str	r2, [r7, #4]
 80149e8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80149ea:	2300      	movs	r3, #0
 80149ec:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d103      	bne.n	80149fc <xQueueGenericCreateStatic+0x20>
 80149f4:	f002 fb00 	bl	8016ff8 <ulSetInterruptMask>
 80149f8:	bf00      	nop
 80149fa:	e7fd      	b.n	80149f8 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d029      	beq.n	8014a56 <xQueueGenericCreateStatic+0x7a>
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d026      	beq.n	8014a56 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d002      	beq.n	8014a14 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d020      	beq.n	8014a56 <xQueueGenericCreateStatic+0x7a>
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d102      	bne.n	8014a20 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d11a      	bne.n	8014a56 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8014a20:	2350      	movs	r3, #80	@ 0x50
 8014a22:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	2b50      	cmp	r3, #80	@ 0x50
 8014a28:	d003      	beq.n	8014a32 <xQueueGenericCreateStatic+0x56>
 8014a2a:	f002 fae5 	bl	8016ff8 <ulSetInterruptMask>
 8014a2e:	bf00      	nop
 8014a30:	e7fd      	b.n	8014a2e <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8014a32:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014a40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	4613      	mov	r3, r2
 8014a4a:	687a      	ldr	r2, [r7, #4]
 8014a4c:	68b9      	ldr	r1, [r7, #8]
 8014a4e:	68f8      	ldr	r0, [r7, #12]
 8014a50:	f000 f858 	bl	8014b04 <prvInitialiseNewQueue>
 8014a54:	e006      	b.n	8014a64 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d103      	bne.n	8014a64 <xQueueGenericCreateStatic+0x88>
 8014a5c:	f002 facc 	bl	8016ff8 <ulSetInterruptMask>
 8014a60:	bf00      	nop
 8014a62:	e7fd      	b.n	8014a60 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8014a64:	697b      	ldr	r3, [r7, #20]
    }
 8014a66:	4618      	mov	r0, r3
 8014a68:	3718      	adds	r7, #24
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b08a      	sub	sp, #40	@ 0x28
 8014a72:	af02      	add	r7, sp, #8
 8014a74:	60f8      	str	r0, [r7, #12]
 8014a76:	60b9      	str	r1, [r7, #8]
 8014a78:	4613      	mov	r3, r2
 8014a7a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d032      	beq.n	8014aec <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8014a86:	2100      	movs	r1, #0
 8014a88:	68ba      	ldr	r2, [r7, #8]
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	fba3 2302 	umull	r2, r3, r3, r2
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d000      	beq.n	8014a96 <xQueueGenericCreate+0x28>
 8014a94:	2101      	movs	r1, #1
 8014a96:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d127      	bne.n	8014aec <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	68ba      	ldr	r2, [r7, #8]
 8014aa0:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8014aa4:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8014aa8:	d820      	bhi.n	8014aec <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	68ba      	ldr	r2, [r7, #8]
 8014aae:	fb02 f303 	mul.w	r3, r2, r3
 8014ab2:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014ab4:	69bb      	ldr	r3, [r7, #24]
 8014ab6:	3350      	adds	r3, #80	@ 0x50
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f002 fafd 	bl	80170b8 <pvPortMalloc>
 8014abe:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d019      	beq.n	8014afa <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	3350      	adds	r3, #80	@ 0x50
 8014ace:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014ad8:	79fa      	ldrb	r2, [r7, #7]
 8014ada:	69fb      	ldr	r3, [r7, #28]
 8014adc:	9300      	str	r3, [sp, #0]
 8014ade:	4613      	mov	r3, r2
 8014ae0:	697a      	ldr	r2, [r7, #20]
 8014ae2:	68b9      	ldr	r1, [r7, #8]
 8014ae4:	68f8      	ldr	r0, [r7, #12]
 8014ae6:	f000 f80d 	bl	8014b04 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8014aea:	e006      	b.n	8014afa <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d103      	bne.n	8014afa <xQueueGenericCreate+0x8c>
 8014af2:	f002 fa81 	bl	8016ff8 <ulSetInterruptMask>
 8014af6:	bf00      	nop
 8014af8:	e7fd      	b.n	8014af6 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8014afa:	69fb      	ldr	r3, [r7, #28]
    }
 8014afc:	4618      	mov	r0, r3
 8014afe:	3720      	adds	r7, #32
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}

08014b04 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	60f8      	str	r0, [r7, #12]
 8014b0c:	60b9      	str	r1, [r7, #8]
 8014b0e:	607a      	str	r2, [r7, #4]
 8014b10:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d103      	bne.n	8014b20 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014b18:	69bb      	ldr	r3, [r7, #24]
 8014b1a:	69ba      	ldr	r2, [r7, #24]
 8014b1c:	601a      	str	r2, [r3, #0]
 8014b1e:	e002      	b.n	8014b26 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014b20:	69bb      	ldr	r3, [r7, #24]
 8014b22:	687a      	ldr	r2, [r7, #4]
 8014b24:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8014b26:	69bb      	ldr	r3, [r7, #24]
 8014b28:	68fa      	ldr	r2, [r7, #12]
 8014b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8014b2c:	69bb      	ldr	r3, [r7, #24]
 8014b2e:	68ba      	ldr	r2, [r7, #8]
 8014b30:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014b32:	2101      	movs	r1, #1
 8014b34:	69b8      	ldr	r0, [r7, #24]
 8014b36:	f7ff fedd 	bl	80148f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	78fa      	ldrb	r2, [r7, #3]
 8014b3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8014b42:	bf00      	nop
 8014b44:	3710      	adds	r7, #16
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}

08014b4a <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 8014b4a:	b580      	push	{r7, lr}
 8014b4c:	b088      	sub	sp, #32
 8014b4e:	af02      	add	r7, sp, #8
 8014b50:	60f8      	str	r0, [r7, #12]
 8014b52:	60b9      	str	r1, [r7, #8]
 8014b54:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8014b56:	2300      	movs	r3, #0
 8014b58:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d013      	beq.n	8014b88 <xQueueCreateCountingSemaphoreStatic+0x3e>
 8014b60:	68ba      	ldr	r2, [r7, #8]
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d80f      	bhi.n	8014b88 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014b68:	2302      	movs	r3, #2
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	2100      	movs	r1, #0
 8014b72:	68f8      	ldr	r0, [r7, #12]
 8014b74:	f7ff ff32 	bl	80149dc <xQueueGenericCreateStatic>
 8014b78:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d00a      	beq.n	8014b96 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8014b86:	e006      	b.n	8014b96 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d103      	bne.n	8014b96 <xQueueCreateCountingSemaphoreStatic+0x4c>
 8014b8e:	f002 fa33 	bl	8016ff8 <ulSetInterruptMask>
 8014b92:	bf00      	nop
 8014b94:	e7fd      	b.n	8014b92 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8014b96:	697b      	ldr	r3, [r7, #20]
    }
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3718      	adds	r7, #24
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8014baa:	2300      	movs	r3, #0
 8014bac:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d010      	beq.n	8014bd6 <xQueueCreateCountingSemaphore+0x36>
 8014bb4:	683a      	ldr	r2, [r7, #0]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d80c      	bhi.n	8014bd6 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014bbc:	2202      	movs	r2, #2
 8014bbe:	2100      	movs	r1, #0
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f7ff ff54 	bl	8014a6e <xQueueGenericCreate>
 8014bc6:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d00a      	beq.n	8014be4 <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	683a      	ldr	r2, [r7, #0]
 8014bd2:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8014bd4:	e006      	b.n	8014be4 <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d103      	bne.n	8014be4 <xQueueCreateCountingSemaphore+0x44>
 8014bdc:	f002 fa0c 	bl	8016ff8 <ulSetInterruptMask>
 8014be0:	bf00      	nop
 8014be2:	e7fd      	b.n	8014be0 <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8014be4:	68fb      	ldr	r3, [r7, #12]
    }
 8014be6:	4618      	mov	r0, r3
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}

08014bee <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8014bee:	b580      	push	{r7, lr}
 8014bf0:	b08a      	sub	sp, #40	@ 0x28
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	60f8      	str	r0, [r7, #12]
 8014bf6:	60b9      	str	r1, [r7, #8]
 8014bf8:	607a      	str	r2, [r7, #4]
 8014bfa:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8014c04:	6a3b      	ldr	r3, [r7, #32]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d103      	bne.n	8014c12 <xQueueGenericSend+0x24>
 8014c0a:	f002 f9f5 	bl	8016ff8 <ulSetInterruptMask>
 8014c0e:	bf00      	nop
 8014c10:	e7fd      	b.n	8014c0e <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d103      	bne.n	8014c20 <xQueueGenericSend+0x32>
 8014c18:	6a3b      	ldr	r3, [r7, #32]
 8014c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d101      	bne.n	8014c24 <xQueueGenericSend+0x36>
 8014c20:	2301      	movs	r3, #1
 8014c22:	e000      	b.n	8014c26 <xQueueGenericSend+0x38>
 8014c24:	2300      	movs	r3, #0
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d103      	bne.n	8014c32 <xQueueGenericSend+0x44>
 8014c2a:	f002 f9e5 	bl	8016ff8 <ulSetInterruptMask>
 8014c2e:	bf00      	nop
 8014c30:	e7fd      	b.n	8014c2e <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	2b02      	cmp	r3, #2
 8014c36:	d103      	bne.n	8014c40 <xQueueGenericSend+0x52>
 8014c38:	6a3b      	ldr	r3, [r7, #32]
 8014c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	d101      	bne.n	8014c44 <xQueueGenericSend+0x56>
 8014c40:	2301      	movs	r3, #1
 8014c42:	e000      	b.n	8014c46 <xQueueGenericSend+0x58>
 8014c44:	2300      	movs	r3, #0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d103      	bne.n	8014c52 <xQueueGenericSend+0x64>
 8014c4a:	f002 f9d5 	bl	8016ff8 <ulSetInterruptMask>
 8014c4e:	bf00      	nop
 8014c50:	e7fd      	b.n	8014c4e <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c52:	f001 fc4f 	bl	80164f4 <xTaskGetSchedulerState>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d102      	bne.n	8014c62 <xQueueGenericSend+0x74>
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d101      	bne.n	8014c66 <xQueueGenericSend+0x78>
 8014c62:	2301      	movs	r3, #1
 8014c64:	e000      	b.n	8014c68 <xQueueGenericSend+0x7a>
 8014c66:	2300      	movs	r3, #0
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d103      	bne.n	8014c74 <xQueueGenericSend+0x86>
 8014c6c:	f002 f9c4 	bl	8016ff8 <ulSetInterruptMask>
 8014c70:	bf00      	nop
 8014c72:	e7fd      	b.n	8014c70 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8014c74:	f002 f882 	bl	8016d7c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014c78:	6a3b      	ldr	r3, [r7, #32]
 8014c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c7c:	6a3b      	ldr	r3, [r7, #32]
 8014c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d302      	bcc.n	8014c8a <xQueueGenericSend+0x9c>
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	2b02      	cmp	r3, #2
 8014c88:	d112      	bne.n	8014cb0 <xQueueGenericSend+0xc2>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014c8a:	683a      	ldr	r2, [r7, #0]
 8014c8c:	68b9      	ldr	r1, [r7, #8]
 8014c8e:	6a38      	ldr	r0, [r7, #32]
 8014c90:	f000 fa3b 	bl	801510a <prvCopyDataToQueue>
 8014c94:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014c96:	6a3b      	ldr	r3, [r7, #32]
 8014c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d004      	beq.n	8014ca8 <xQueueGenericSend+0xba>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014c9e:	6a3b      	ldr	r3, [r7, #32]
 8014ca0:	3324      	adds	r3, #36	@ 0x24
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f001 f970 	bl	8015f88 <xTaskRemoveFromEventList>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8014ca8:	f002 f87a 	bl	8016da0 <vPortExitCritical>
                return pdPASS;
 8014cac:	2301      	movs	r3, #1
 8014cae:	e05c      	b.n	8014d6a <xQueueGenericSend+0x17c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d103      	bne.n	8014cbe <xQueueGenericSend+0xd0>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8014cb6:	f002 f873 	bl	8016da0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	e055      	b.n	8014d6a <xQueueGenericSend+0x17c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8014cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d106      	bne.n	8014cd2 <xQueueGenericSend+0xe4>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8014cc4:	f107 0314 	add.w	r3, r7, #20
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f001 fadd 	bl	8016288 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8014cce:	2301      	movs	r3, #1
 8014cd0:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8014cd2:	f002 f865 	bl	8016da0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8014cd6:	f000 fe5f 	bl	8015998 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8014cda:	f002 f84f 	bl	8016d7c <vPortEnterCritical>
 8014cde:	6a3b      	ldr	r3, [r7, #32]
 8014ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014ce4:	b25b      	sxtb	r3, r3
 8014ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cea:	d103      	bne.n	8014cf4 <xQueueGenericSend+0x106>
 8014cec:	6a3b      	ldr	r3, [r7, #32]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014cf4:	6a3b      	ldr	r3, [r7, #32]
 8014cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014cfa:	b25b      	sxtb	r3, r3
 8014cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d00:	d103      	bne.n	8014d0a <xQueueGenericSend+0x11c>
 8014d02:	6a3b      	ldr	r3, [r7, #32]
 8014d04:	2200      	movs	r2, #0
 8014d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014d0a:	f002 f849 	bl	8016da0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014d0e:	1d3a      	adds	r2, r7, #4
 8014d10:	f107 0314 	add.w	r3, r7, #20
 8014d14:	4611      	mov	r1, r2
 8014d16:	4618      	mov	r0, r3
 8014d18:	f001 facc 	bl	80162b4 <xTaskCheckForTimeOut>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d11d      	bne.n	8014d5e <xQueueGenericSend+0x170>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014d22:	6a38      	ldr	r0, [r7, #32]
 8014d24:	f000 fae9 	bl	80152fa <prvIsQueueFull>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d011      	beq.n	8014d52 <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014d2e:	6a3b      	ldr	r3, [r7, #32]
 8014d30:	3310      	adds	r3, #16
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	4611      	mov	r1, r2
 8014d36:	4618      	mov	r0, r3
 8014d38:	f001 f882 	bl	8015e40 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8014d3c:	6a38      	ldr	r0, [r7, #32]
 8014d3e:	f000 fa74 	bl	801522a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8014d42:	f000 fe37 	bl	80159b4 <xTaskResumeAll>
 8014d46:	4603      	mov	r3, r0
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d193      	bne.n	8014c74 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 8014d4c:	f002 f804 	bl	8016d58 <vPortYield>
 8014d50:	e790      	b.n	8014c74 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8014d52:	6a38      	ldr	r0, [r7, #32]
 8014d54:	f000 fa69 	bl	801522a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8014d58:	f000 fe2c 	bl	80159b4 <xTaskResumeAll>
 8014d5c:	e78a      	b.n	8014c74 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8014d5e:	6a38      	ldr	r0, [r7, #32]
 8014d60:	f000 fa63 	bl	801522a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8014d64:	f000 fe26 	bl	80159b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8014d68:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3728      	adds	r7, #40	@ 0x28
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}

08014d72 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8014d72:	b580      	push	{r7, lr}
 8014d74:	b08a      	sub	sp, #40	@ 0x28
 8014d76:	af00      	add	r7, sp, #0
 8014d78:	60f8      	str	r0, [r7, #12]
 8014d7a:	60b9      	str	r1, [r7, #8]
 8014d7c:	607a      	str	r2, [r7, #4]
 8014d7e:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8014d84:	6a3b      	ldr	r3, [r7, #32]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d103      	bne.n	8014d92 <xQueueGenericSendFromISR+0x20>
 8014d8a:	f002 f935 	bl	8016ff8 <ulSetInterruptMask>
 8014d8e:	bf00      	nop
 8014d90:	e7fd      	b.n	8014d8e <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d103      	bne.n	8014da0 <xQueueGenericSendFromISR+0x2e>
 8014d98:	6a3b      	ldr	r3, [r7, #32]
 8014d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d101      	bne.n	8014da4 <xQueueGenericSendFromISR+0x32>
 8014da0:	2301      	movs	r3, #1
 8014da2:	e000      	b.n	8014da6 <xQueueGenericSendFromISR+0x34>
 8014da4:	2300      	movs	r3, #0
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d103      	bne.n	8014db2 <xQueueGenericSendFromISR+0x40>
 8014daa:	f002 f925 	bl	8016ff8 <ulSetInterruptMask>
 8014dae:	bf00      	nop
 8014db0:	e7fd      	b.n	8014dae <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	2b02      	cmp	r3, #2
 8014db6:	d103      	bne.n	8014dc0 <xQueueGenericSendFromISR+0x4e>
 8014db8:	6a3b      	ldr	r3, [r7, #32]
 8014dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d101      	bne.n	8014dc4 <xQueueGenericSendFromISR+0x52>
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e000      	b.n	8014dc6 <xQueueGenericSendFromISR+0x54>
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d103      	bne.n	8014dd2 <xQueueGenericSendFromISR+0x60>
 8014dca:	f002 f915 	bl	8016ff8 <ulSetInterruptMask>
 8014dce:	bf00      	nop
 8014dd0:	e7fd      	b.n	8014dce <xQueueGenericSendFromISR+0x5c>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014dd2:	f002 f911 	bl	8016ff8 <ulSetInterruptMask>
 8014dd6:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014dd8:	6a3b      	ldr	r3, [r7, #32]
 8014dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014ddc:	6a3b      	ldr	r3, [r7, #32]
 8014dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d302      	bcc.n	8014dea <xQueueGenericSendFromISR+0x78>
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	2b02      	cmp	r3, #2
 8014de8:	d13d      	bne.n	8014e66 <xQueueGenericSendFromISR+0xf4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014df0:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014df2:	6a3b      	ldr	r3, [r7, #32]
 8014df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014df6:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014df8:	683a      	ldr	r2, [r7, #0]
 8014dfa:	68b9      	ldr	r1, [r7, #8]
 8014dfc:	6a38      	ldr	r0, [r7, #32]
 8014dfe:	f000 f984 	bl	801510a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8014e02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e0a:	d112      	bne.n	8014e32 <xQueueGenericSendFromISR+0xc0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e0c:	6a3b      	ldr	r3, [r7, #32]
 8014e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d025      	beq.n	8014e60 <xQueueGenericSendFromISR+0xee>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e14:	6a3b      	ldr	r3, [r7, #32]
 8014e16:	3324      	adds	r3, #36	@ 0x24
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f001 f8b5 	bl	8015f88 <xTaskRemoveFromEventList>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d01d      	beq.n	8014e60 <xQueueGenericSendFromISR+0xee>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d01a      	beq.n	8014e60 <xQueueGenericSendFromISR+0xee>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	601a      	str	r2, [r3, #0]
 8014e30:	e016      	b.n	8014e60 <xQueueGenericSendFromISR+0xee>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8014e32:	f000 feb7 	bl	8015ba4 <uxTaskGetNumberOfTasks>
 8014e36:	6138      	str	r0, [r7, #16]
 8014e38:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014e3c:	693a      	ldr	r2, [r7, #16]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d90e      	bls.n	8014e60 <xQueueGenericSendFromISR+0xee>
 8014e42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014e46:	2b7f      	cmp	r3, #127	@ 0x7f
 8014e48:	d103      	bne.n	8014e52 <xQueueGenericSendFromISR+0xe0>
 8014e4a:	f002 f8d5 	bl	8016ff8 <ulSetInterruptMask>
 8014e4e:	bf00      	nop
 8014e50:	e7fd      	b.n	8014e4e <xQueueGenericSendFromISR+0xdc>
 8014e52:	7efb      	ldrb	r3, [r7, #27]
 8014e54:	3301      	adds	r3, #1
 8014e56:	b2db      	uxtb	r3, r3
 8014e58:	b25a      	sxtb	r2, r3
 8014e5a:	6a3b      	ldr	r3, [r7, #32]
 8014e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8014e60:	2301      	movs	r3, #1
 8014e62:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 8014e64:	e001      	b.n	8014e6a <xQueueGenericSendFromISR+0xf8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8014e66:	2300      	movs	r3, #0
 8014e68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8014e6a:	69f8      	ldr	r0, [r7, #28]
 8014e6c:	f002 f8d1 	bl	8017012 <vClearInterruptMask>

    return xReturn;
 8014e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3728      	adds	r7, #40	@ 0x28
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014e7a:	b580      	push	{r7, lr}
 8014e7c:	b088      	sub	sp, #32
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8014e88:	69bb      	ldr	r3, [r7, #24]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d103      	bne.n	8014e96 <xQueueGiveFromISR+0x1c>
 8014e8e:	f002 f8b3 	bl	8016ff8 <ulSetInterruptMask>
 8014e92:	bf00      	nop
 8014e94:	e7fd      	b.n	8014e92 <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d003      	beq.n	8014ea6 <xQueueGiveFromISR+0x2c>
 8014e9e:	f002 f8ab 	bl	8016ff8 <ulSetInterruptMask>
 8014ea2:	bf00      	nop
 8014ea4:	e7fd      	b.n	8014ea2 <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d103      	bne.n	8014eb6 <xQueueGiveFromISR+0x3c>
 8014eae:	69bb      	ldr	r3, [r7, #24]
 8014eb0:	689b      	ldr	r3, [r3, #8]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d101      	bne.n	8014eba <xQueueGiveFromISR+0x40>
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	e000      	b.n	8014ebc <xQueueGiveFromISR+0x42>
 8014eba:	2300      	movs	r3, #0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d103      	bne.n	8014ec8 <xQueueGiveFromISR+0x4e>
 8014ec0:	f002 f89a 	bl	8016ff8 <ulSetInterruptMask>
 8014ec4:	bf00      	nop
 8014ec6:	e7fd      	b.n	8014ec4 <xQueueGiveFromISR+0x4a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ec8:	f002 f896 	bl	8016ff8 <ulSetInterruptMask>
 8014ecc:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ece:	69bb      	ldr	r3, [r7, #24]
 8014ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ed2:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ed8:	693a      	ldr	r2, [r7, #16]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d239      	bcs.n	8014f52 <xQueueGiveFromISR+0xd8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8014ede:	69bb      	ldr	r3, [r7, #24]
 8014ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014ee4:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	1c5a      	adds	r2, r3, #1
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8014eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ef6:	d112      	bne.n	8014f1e <xQueueGiveFromISR+0xa4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ef8:	69bb      	ldr	r3, [r7, #24]
 8014efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d025      	beq.n	8014f4c <xQueueGiveFromISR+0xd2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	3324      	adds	r3, #36	@ 0x24
 8014f04:	4618      	mov	r0, r3
 8014f06:	f001 f83f 	bl	8015f88 <xTaskRemoveFromEventList>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d01d      	beq.n	8014f4c <xQueueGiveFromISR+0xd2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d01a      	beq.n	8014f4c <xQueueGiveFromISR+0xd2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	2201      	movs	r2, #1
 8014f1a:	601a      	str	r2, [r3, #0]
 8014f1c:	e016      	b.n	8014f4c <xQueueGiveFromISR+0xd2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8014f1e:	f000 fe41 	bl	8015ba4 <uxTaskGetNumberOfTasks>
 8014f22:	60b8      	str	r0, [r7, #8]
 8014f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f28:	68ba      	ldr	r2, [r7, #8]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d90e      	bls.n	8014f4c <xQueueGiveFromISR+0xd2>
 8014f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8014f34:	d103      	bne.n	8014f3e <xQueueGiveFromISR+0xc4>
 8014f36:	f002 f85f 	bl	8016ff8 <ulSetInterruptMask>
 8014f3a:	bf00      	nop
 8014f3c:	e7fd      	b.n	8014f3a <xQueueGiveFromISR+0xc0>
 8014f3e:	7bfb      	ldrb	r3, [r7, #15]
 8014f40:	3301      	adds	r3, #1
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	b25a      	sxtb	r2, r3
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	61fb      	str	r3, [r7, #28]
 8014f50:	e001      	b.n	8014f56 <xQueueGiveFromISR+0xdc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8014f52:	2300      	movs	r3, #0
 8014f54:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8014f56:	6978      	ldr	r0, [r7, #20]
 8014f58:	f002 f85b 	bl	8017012 <vClearInterruptMask>

    return xReturn;
 8014f5c:	69fb      	ldr	r3, [r7, #28]
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3720      	adds	r7, #32
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}

08014f66 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8014f66:	b580      	push	{r7, lr}
 8014f68:	b08a      	sub	sp, #40	@ 0x28
 8014f6a:	af00      	add	r7, sp, #0
 8014f6c:	60f8      	str	r0, [r7, #12]
 8014f6e:	60b9      	str	r1, [r7, #8]
 8014f70:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8014f72:	2300      	movs	r3, #0
 8014f74:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8014f7a:	6a3b      	ldr	r3, [r7, #32]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d103      	bne.n	8014f88 <xQueueReceive+0x22>
 8014f80:	f002 f83a 	bl	8016ff8 <ulSetInterruptMask>
 8014f84:	bf00      	nop
 8014f86:	e7fd      	b.n	8014f84 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d103      	bne.n	8014f96 <xQueueReceive+0x30>
 8014f8e:	6a3b      	ldr	r3, [r7, #32]
 8014f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d101      	bne.n	8014f9a <xQueueReceive+0x34>
 8014f96:	2301      	movs	r3, #1
 8014f98:	e000      	b.n	8014f9c <xQueueReceive+0x36>
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d103      	bne.n	8014fa8 <xQueueReceive+0x42>
 8014fa0:	f002 f82a 	bl	8016ff8 <ulSetInterruptMask>
 8014fa4:	bf00      	nop
 8014fa6:	e7fd      	b.n	8014fa4 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014fa8:	f001 faa4 	bl	80164f4 <xTaskGetSchedulerState>
 8014fac:	4603      	mov	r3, r0
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d102      	bne.n	8014fb8 <xQueueReceive+0x52>
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d101      	bne.n	8014fbc <xQueueReceive+0x56>
 8014fb8:	2301      	movs	r3, #1
 8014fba:	e000      	b.n	8014fbe <xQueueReceive+0x58>
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d103      	bne.n	8014fca <xQueueReceive+0x64>
 8014fc2:	f002 f819 	bl	8016ff8 <ulSetInterruptMask>
 8014fc6:	bf00      	nop
 8014fc8:	e7fd      	b.n	8014fc6 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8014fca:	f001 fed7 	bl	8016d7c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014fce:	6a3b      	ldr	r3, [r7, #32]
 8014fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014fd2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d014      	beq.n	8015004 <xQueueReceive+0x9e>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014fda:	68b9      	ldr	r1, [r7, #8]
 8014fdc:	6a38      	ldr	r0, [r7, #32]
 8014fde:	f000 f8fe 	bl	80151de <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	1e5a      	subs	r2, r3, #1
 8014fe6:	6a3b      	ldr	r3, [r7, #32]
 8014fe8:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014fea:	6a3b      	ldr	r3, [r7, #32]
 8014fec:	691b      	ldr	r3, [r3, #16]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d004      	beq.n	8014ffc <xQueueReceive+0x96>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ff2:	6a3b      	ldr	r3, [r7, #32]
 8014ff4:	3310      	adds	r3, #16
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f000 ffc6 	bl	8015f88 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8014ffc:	f001 fed0 	bl	8016da0 <vPortExitCritical>
                return pdPASS;
 8015000:	2301      	movs	r3, #1
 8015002:	e062      	b.n	80150ca <xQueueReceive+0x164>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d103      	bne.n	8015012 <xQueueReceive+0xac>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 801500a:	f001 fec9 	bl	8016da0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 801500e:	2300      	movs	r3, #0
 8015010:	e05b      	b.n	80150ca <xQueueReceive+0x164>
                }
                else if( xEntryTimeSet == pdFALSE )
 8015012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015014:	2b00      	cmp	r3, #0
 8015016:	d106      	bne.n	8015026 <xQueueReceive+0xc0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8015018:	f107 0314 	add.w	r3, r7, #20
 801501c:	4618      	mov	r0, r3
 801501e:	f001 f933 	bl	8016288 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8015022:	2301      	movs	r3, #1
 8015024:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8015026:	f001 febb 	bl	8016da0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801502a:	f000 fcb5 	bl	8015998 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 801502e:	f001 fea5 	bl	8016d7c <vPortEnterCritical>
 8015032:	6a3b      	ldr	r3, [r7, #32]
 8015034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015038:	b25b      	sxtb	r3, r3
 801503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801503e:	d103      	bne.n	8015048 <xQueueReceive+0xe2>
 8015040:	6a3b      	ldr	r3, [r7, #32]
 8015042:	2200      	movs	r2, #0
 8015044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015048:	6a3b      	ldr	r3, [r7, #32]
 801504a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801504e:	b25b      	sxtb	r3, r3
 8015050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015054:	d103      	bne.n	801505e <xQueueReceive+0xf8>
 8015056:	6a3b      	ldr	r3, [r7, #32]
 8015058:	2200      	movs	r2, #0
 801505a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801505e:	f001 fe9f 	bl	8016da0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015062:	1d3a      	adds	r2, r7, #4
 8015064:	f107 0314 	add.w	r3, r7, #20
 8015068:	4611      	mov	r1, r2
 801506a:	4618      	mov	r0, r3
 801506c:	f001 f922 	bl	80162b4 <xTaskCheckForTimeOut>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d11d      	bne.n	80150b2 <xQueueReceive+0x14c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015076:	6a38      	ldr	r0, [r7, #32]
 8015078:	f000 f929 	bl	80152ce <prvIsQueueEmpty>
 801507c:	4603      	mov	r3, r0
 801507e:	2b00      	cmp	r3, #0
 8015080:	d011      	beq.n	80150a6 <xQueueReceive+0x140>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015082:	6a3b      	ldr	r3, [r7, #32]
 8015084:	3324      	adds	r3, #36	@ 0x24
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	4611      	mov	r1, r2
 801508a:	4618      	mov	r0, r3
 801508c:	f000 fed8 	bl	8015e40 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8015090:	6a38      	ldr	r0, [r7, #32]
 8015092:	f000 f8ca 	bl	801522a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8015096:	f000 fc8d 	bl	80159b4 <xTaskResumeAll>
 801509a:	4603      	mov	r3, r0
 801509c:	2b00      	cmp	r3, #0
 801509e:	d194      	bne.n	8014fca <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 80150a0:	f001 fe5a 	bl	8016d58 <vPortYield>
 80150a4:	e791      	b.n	8014fca <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80150a6:	6a38      	ldr	r0, [r7, #32]
 80150a8:	f000 f8bf 	bl	801522a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80150ac:	f000 fc82 	bl	80159b4 <xTaskResumeAll>
 80150b0:	e78b      	b.n	8014fca <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80150b2:	6a38      	ldr	r0, [r7, #32]
 80150b4:	f000 f8b9 	bl	801522a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80150b8:	f000 fc7c 	bl	80159b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150bc:	6a38      	ldr	r0, [r7, #32]
 80150be:	f000 f906 	bl	80152ce <prvIsQueueEmpty>
 80150c2:	4603      	mov	r3, r0
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d080      	beq.n	8014fca <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80150c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80150ca:	4618      	mov	r0, r3
 80150cc:	3728      	adds	r7, #40	@ 0x28
 80150ce:	46bd      	mov	sp, r7
 80150d0:	bd80      	pop	{r7, pc}

080150d2 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80150d2:	b580      	push	{r7, lr}
 80150d4:	b084      	sub	sp, #16
 80150d6:	af00      	add	r7, sp, #0
 80150d8:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d103      	bne.n	80150ec <vQueueDelete+0x1a>
 80150e4:	f001 ff88 	bl	8016ff8 <ulSetInterruptMask>
 80150e8:	bf00      	nop
 80150ea:	e7fd      	b.n	80150e8 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 80150ec:	68f8      	ldr	r0, [r7, #12]
 80150ee:	f000 f963 	bl	80153b8 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d102      	bne.n	8015102 <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 80150fc:	68f8      	ldr	r0, [r7, #12]
 80150fe:	f002 f887 	bl	8017210 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015102:	bf00      	nop
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}

0801510a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b086      	sub	sp, #24
 801510e:	af00      	add	r7, sp, #0
 8015110:	60f8      	str	r0, [r7, #12]
 8015112:	60b9      	str	r1, [r7, #8]
 8015114:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8015116:	2300      	movs	r3, #0
 8015118:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801511e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015124:	2b00      	cmp	r3, #0
 8015126:	d10d      	bne.n	8015144 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d14d      	bne.n	80151cc <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	689b      	ldr	r3, [r3, #8]
 8015134:	4618      	mov	r0, r3
 8015136:	f001 f9fb 	bl	8016530 <xTaskPriorityDisinherit>
 801513a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2200      	movs	r2, #0
 8015140:	609a      	str	r2, [r3, #8]
 8015142:	e043      	b.n	80151cc <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d119      	bne.n	801517e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6858      	ldr	r0, [r3, #4]
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015152:	461a      	mov	r2, r3
 8015154:	68b9      	ldr	r1, [r7, #8]
 8015156:	f002 fdcf 	bl	8017cf8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	685a      	ldr	r2, [r3, #4]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015162:	441a      	add	r2, r3
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	685a      	ldr	r2, [r3, #4]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	689b      	ldr	r3, [r3, #8]
 8015170:	429a      	cmp	r2, r3
 8015172:	d32b      	bcc.n	80151cc <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	605a      	str	r2, [r3, #4]
 801517c:	e026      	b.n	80151cc <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	68d8      	ldr	r0, [r3, #12]
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015186:	461a      	mov	r2, r3
 8015188:	68b9      	ldr	r1, [r7, #8]
 801518a:	f002 fdb5 	bl	8017cf8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	68da      	ldr	r2, [r3, #12]
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015196:	425b      	negs	r3, r3
 8015198:	441a      	add	r2, r3
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	68da      	ldr	r2, [r3, #12]
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d207      	bcs.n	80151ba <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	689a      	ldr	r2, [r3, #8]
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151b2:	425b      	negs	r3, r3
 80151b4:	441a      	add	r2, r3
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2b02      	cmp	r3, #2
 80151be:	d105      	bne.n	80151cc <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d002      	beq.n	80151cc <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	3b01      	subs	r3, #1
 80151ca:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	1c5a      	adds	r2, r3, #1
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80151d4:	697b      	ldr	r3, [r7, #20]
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3718      	adds	r7, #24
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80151de:	b580      	push	{r7, lr}
 80151e0:	b082      	sub	sp, #8
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
 80151e6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d018      	beq.n	8015222 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	68da      	ldr	r2, [r3, #12]
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151f8:	441a      	add	r2, r3
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	68da      	ldr	r2, [r3, #12]
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	689b      	ldr	r3, [r3, #8]
 8015206:	429a      	cmp	r2, r3
 8015208:	d303      	bcc.n	8015212 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681a      	ldr	r2, [r3, #0]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	68d9      	ldr	r1, [r3, #12]
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801521a:	461a      	mov	r2, r3
 801521c:	6838      	ldr	r0, [r7, #0]
 801521e:	f002 fd6b 	bl	8017cf8 <memcpy>
    }
}
 8015222:	bf00      	nop
 8015224:	3708      	adds	r7, #8
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}

0801522a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801522a:	b580      	push	{r7, lr}
 801522c:	b084      	sub	sp, #16
 801522e:	af00      	add	r7, sp, #0
 8015230:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8015232:	f001 fda3 	bl	8016d7c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801523c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 801523e:	e011      	b.n	8015264 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015244:	2b00      	cmp	r3, #0
 8015246:	d012      	beq.n	801526e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	3324      	adds	r3, #36	@ 0x24
 801524c:	4618      	mov	r0, r3
 801524e:	f000 fe9b 	bl	8015f88 <xTaskRemoveFromEventList>
 8015252:	4603      	mov	r3, r0
 8015254:	2b00      	cmp	r3, #0
 8015256:	d001      	beq.n	801525c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8015258:	f001 f884 	bl	8016364 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 801525c:	7bfb      	ldrb	r3, [r7, #15]
 801525e:	3b01      	subs	r3, #1
 8015260:	b2db      	uxtb	r3, r3
 8015262:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8015264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015268:	2b00      	cmp	r3, #0
 801526a:	dce9      	bgt.n	8015240 <prvUnlockQueue+0x16>
 801526c:	e000      	b.n	8015270 <prvUnlockQueue+0x46>
                    break;
 801526e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	22ff      	movs	r2, #255	@ 0xff
 8015274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8015278:	f001 fd92 	bl	8016da0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 801527c:	f001 fd7e 	bl	8016d7c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015286:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8015288:	e011      	b.n	80152ae <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	691b      	ldr	r3, [r3, #16]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d012      	beq.n	80152b8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	3310      	adds	r3, #16
 8015296:	4618      	mov	r0, r3
 8015298:	f000 fe76 	bl	8015f88 <xTaskRemoveFromEventList>
 801529c:	4603      	mov	r3, r0
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d001      	beq.n	80152a6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80152a2:	f001 f85f 	bl	8016364 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80152a6:	7bbb      	ldrb	r3, [r7, #14]
 80152a8:	3b01      	subs	r3, #1
 80152aa:	b2db      	uxtb	r3, r3
 80152ac:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80152ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	dce9      	bgt.n	801528a <prvUnlockQueue+0x60>
 80152b6:	e000      	b.n	80152ba <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80152b8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	22ff      	movs	r2, #255	@ 0xff
 80152be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80152c2:	f001 fd6d 	bl	8016da0 <vPortExitCritical>
}
 80152c6:	bf00      	nop
 80152c8:	3710      	adds	r7, #16
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}

080152ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80152ce:	b580      	push	{r7, lr}
 80152d0:	b084      	sub	sp, #16
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80152d6:	f001 fd51 	bl	8016d7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d102      	bne.n	80152e8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80152e2:	2301      	movs	r3, #1
 80152e4:	60fb      	str	r3, [r7, #12]
 80152e6:	e001      	b.n	80152ec <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80152e8:	2300      	movs	r3, #0
 80152ea:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80152ec:	f001 fd58 	bl	8016da0 <vPortExitCritical>

    return xReturn;
 80152f0:	68fb      	ldr	r3, [r7, #12]
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3710      	adds	r7, #16
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80152fa:	b580      	push	{r7, lr}
 80152fc:	b084      	sub	sp, #16
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8015302:	f001 fd3b 	bl	8016d7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801530e:	429a      	cmp	r2, r3
 8015310:	d102      	bne.n	8015318 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8015312:	2301      	movs	r3, #1
 8015314:	60fb      	str	r3, [r7, #12]
 8015316:	e001      	b.n	801531c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8015318:	2300      	movs	r3, #0
 801531a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 801531c:	f001 fd40 	bl	8016da0 <vPortExitCritical>

    return xReturn;
 8015320:	68fb      	ldr	r3, [r7, #12]
}
 8015322:	4618      	mov	r0, r3
 8015324:	3710      	adds	r7, #16
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
	...

0801532c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 801532c:	b580      	push	{r7, lr}
 801532e:	b084      	sub	sp, #16
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
 8015334:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8015336:	2300      	movs	r3, #0
 8015338:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d103      	bne.n	8015348 <vQueueAddToRegistry+0x1c>
 8015340:	f001 fe5a 	bl	8016ff8 <ulSetInterruptMask>
 8015344:	bf00      	nop
 8015346:	e7fd      	b.n	8015344 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d024      	beq.n	8015398 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801534e:	2300      	movs	r3, #0
 8015350:	60fb      	str	r3, [r7, #12]
 8015352:	e01e      	b.n	8015392 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8015354:	4a17      	ldr	r2, [pc, #92]	@ (80153b4 <vQueueAddToRegistry+0x88>)
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	00db      	lsls	r3, r3, #3
 801535a:	4413      	add	r3, r2
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	429a      	cmp	r2, r3
 8015362:	d105      	bne.n	8015370 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	00db      	lsls	r3, r3, #3
 8015368:	4a12      	ldr	r2, [pc, #72]	@ (80153b4 <vQueueAddToRegistry+0x88>)
 801536a:	4413      	add	r3, r2
 801536c:	60bb      	str	r3, [r7, #8]
                    break;
 801536e:	e013      	b.n	8015398 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d10a      	bne.n	801538c <vQueueAddToRegistry+0x60>
 8015376:	4a0f      	ldr	r2, [pc, #60]	@ (80153b4 <vQueueAddToRegistry+0x88>)
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d104      	bne.n	801538c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	00db      	lsls	r3, r3, #3
 8015386:	4a0b      	ldr	r2, [pc, #44]	@ (80153b4 <vQueueAddToRegistry+0x88>)
 8015388:	4413      	add	r3, r2
 801538a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	3301      	adds	r3, #1
 8015390:	60fb      	str	r3, [r7, #12]
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	2b07      	cmp	r3, #7
 8015396:	d9dd      	bls.n	8015354 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d005      	beq.n	80153aa <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	683a      	ldr	r2, [r7, #0]
 80153a2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	687a      	ldr	r2, [r7, #4]
 80153a8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80153aa:	bf00      	nop
 80153ac:	3710      	adds	r7, #16
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	20029858 	.word	0x20029858

080153b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d103      	bne.n	80153ce <vQueueUnregisterQueue+0x16>
 80153c6:	f001 fe17 	bl	8016ff8 <ulSetInterruptMask>
 80153ca:	bf00      	nop
 80153cc:	e7fd      	b.n	80153ca <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80153ce:	2300      	movs	r3, #0
 80153d0:	60fb      	str	r3, [r7, #12]
 80153d2:	e016      	b.n	8015402 <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80153d4:	4a0f      	ldr	r2, [pc, #60]	@ (8015414 <vQueueUnregisterQueue+0x5c>)
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	00db      	lsls	r3, r3, #3
 80153da:	4413      	add	r3, r2
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d10b      	bne.n	80153fc <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80153e4:	4a0b      	ldr	r2, [pc, #44]	@ (8015414 <vQueueUnregisterQueue+0x5c>)
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2100      	movs	r1, #0
 80153ea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80153ee:	4a09      	ldr	r2, [pc, #36]	@ (8015414 <vQueueUnregisterQueue+0x5c>)
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	00db      	lsls	r3, r3, #3
 80153f4:	4413      	add	r3, r2
 80153f6:	2200      	movs	r2, #0
 80153f8:	605a      	str	r2, [r3, #4]
                break;
 80153fa:	e006      	b.n	801540a <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	3301      	adds	r3, #1
 8015400:	60fb      	str	r3, [r7, #12]
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	2b07      	cmp	r3, #7
 8015406:	d9e5      	bls.n	80153d4 <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015408:	bf00      	nop
 801540a:	bf00      	nop
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	20029858 	.word	0x20029858

08015418 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8015418:	b580      	push	{r7, lr}
 801541a:	b086      	sub	sp, #24
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8015428:	f001 fca8 	bl	8016d7c <vPortEnterCritical>
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015432:	b25b      	sxtb	r3, r3
 8015434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015438:	d103      	bne.n	8015442 <vQueueWaitForMessageRestricted+0x2a>
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	2200      	movs	r2, #0
 801543e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015448:	b25b      	sxtb	r3, r3
 801544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801544e:	d103      	bne.n	8015458 <vQueueWaitForMessageRestricted+0x40>
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	2200      	movs	r2, #0
 8015454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015458:	f001 fca2 	bl	8016da0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015460:	2b00      	cmp	r3, #0
 8015462:	d106      	bne.n	8015472 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015464:	697b      	ldr	r3, [r7, #20]
 8015466:	3324      	adds	r3, #36	@ 0x24
 8015468:	687a      	ldr	r2, [r7, #4]
 801546a:	68b9      	ldr	r1, [r7, #8]
 801546c:	4618      	mov	r0, r3
 801546e:	f000 fd4d 	bl	8015f0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8015472:	6978      	ldr	r0, [r7, #20]
 8015474:	f7ff fed9 	bl	801522a <prvUnlockQueue>
    }
 8015478:	bf00      	nop
 801547a:	3718      	adds	r7, #24
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}

08015480 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8015480:	b580      	push	{r7, lr}
 8015482:	b08c      	sub	sp, #48	@ 0x30
 8015484:	af04      	add	r7, sp, #16
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	607a      	str	r2, [r7, #4]
 801548c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 801548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015490:	2b00      	cmp	r3, #0
 8015492:	d103      	bne.n	801549c <xTaskCreateStatic+0x1c>
 8015494:	f001 fdb0 	bl	8016ff8 <ulSetInterruptMask>
 8015498:	bf00      	nop
 801549a:	e7fd      	b.n	8015498 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 801549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d103      	bne.n	80154aa <xTaskCreateStatic+0x2a>
 80154a2:	f001 fda9 	bl	8016ff8 <ulSetInterruptMask>
 80154a6:	bf00      	nop
 80154a8:	e7fd      	b.n	80154a6 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80154aa:	235c      	movs	r3, #92	@ 0x5c
 80154ac:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80154b2:	d003      	beq.n	80154bc <xTaskCreateStatic+0x3c>
 80154b4:	f001 fda0 	bl	8016ff8 <ulSetInterruptMask>
 80154b8:	bf00      	nop
 80154ba:	e7fd      	b.n	80154b8 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80154bc:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80154be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d023      	beq.n	801550c <xTaskCreateStatic+0x8c>
 80154c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d020      	beq.n	801550c <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80154ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154cc:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80154ce:	225c      	movs	r2, #92	@ 0x5c
 80154d0:	2100      	movs	r1, #0
 80154d2:	69f8      	ldr	r0, [r7, #28]
 80154d4:	f002 fbe4 	bl	8017ca0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80154d8:	69fb      	ldr	r3, [r7, #28]
 80154da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154dc:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80154de:	69fb      	ldr	r3, [r7, #28]
 80154e0:	2202      	movs	r2, #2
 80154e2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80154e6:	2300      	movs	r3, #0
 80154e8:	9303      	str	r3, [sp, #12]
 80154ea:	69fb      	ldr	r3, [r7, #28]
 80154ec:	9302      	str	r3, [sp, #8]
 80154ee:	f107 0318 	add.w	r3, r7, #24
 80154f2:	9301      	str	r3, [sp, #4]
 80154f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	68b9      	ldr	r1, [r7, #8]
 80154fe:	68f8      	ldr	r0, [r7, #12]
 8015500:	f000 f855 	bl	80155ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8015504:	69f8      	ldr	r0, [r7, #28]
 8015506:	f000 f8d5 	bl	80156b4 <prvAddNewTaskToReadyList>
 801550a:	e001      	b.n	8015510 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 801550c:	2300      	movs	r3, #0
 801550e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8015510:	69bb      	ldr	r3, [r7, #24]
    }
 8015512:	4618      	mov	r0, r3
 8015514:	3720      	adds	r7, #32
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}

0801551a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 801551a:	b580      	push	{r7, lr}
 801551c:	b08c      	sub	sp, #48	@ 0x30
 801551e:	af04      	add	r7, sp, #16
 8015520:	60f8      	str	r0, [r7, #12]
 8015522:	60b9      	str	r1, [r7, #8]
 8015524:	603b      	str	r3, [r7, #0]
 8015526:	4613      	mov	r3, r2
 8015528:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801552a:	88fb      	ldrh	r3, [r7, #6]
 801552c:	009b      	lsls	r3, r3, #2
 801552e:	4618      	mov	r0, r3
 8015530:	f001 fdc2 	bl	80170b8 <pvPortMalloc>
 8015534:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d013      	beq.n	8015564 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801553c:	205c      	movs	r0, #92	@ 0x5c
 801553e:	f001 fdbb 	bl	80170b8 <pvPortMalloc>
 8015542:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d008      	beq.n	801555c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 801554a:	225c      	movs	r2, #92	@ 0x5c
 801554c:	2100      	movs	r1, #0
 801554e:	69f8      	ldr	r0, [r7, #28]
 8015550:	f002 fba6 	bl	8017ca0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8015554:	69fb      	ldr	r3, [r7, #28]
 8015556:	697a      	ldr	r2, [r7, #20]
 8015558:	631a      	str	r2, [r3, #48]	@ 0x30
 801555a:	e005      	b.n	8015568 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 801555c:	6978      	ldr	r0, [r7, #20]
 801555e:	f001 fe57 	bl	8017210 <vPortFree>
 8015562:	e001      	b.n	8015568 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8015564:	2300      	movs	r3, #0
 8015566:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d017      	beq.n	801559e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801556e:	69fb      	ldr	r3, [r7, #28]
 8015570:	2200      	movs	r2, #0
 8015572:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015576:	88fa      	ldrh	r2, [r7, #6]
 8015578:	2300      	movs	r3, #0
 801557a:	9303      	str	r3, [sp, #12]
 801557c:	69fb      	ldr	r3, [r7, #28]
 801557e:	9302      	str	r3, [sp, #8]
 8015580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015582:	9301      	str	r3, [sp, #4]
 8015584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015586:	9300      	str	r3, [sp, #0]
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	68b9      	ldr	r1, [r7, #8]
 801558c:	68f8      	ldr	r0, [r7, #12]
 801558e:	f000 f80e 	bl	80155ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8015592:	69f8      	ldr	r0, [r7, #28]
 8015594:	f000 f88e 	bl	80156b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8015598:	2301      	movs	r3, #1
 801559a:	61bb      	str	r3, [r7, #24]
 801559c:	e002      	b.n	80155a4 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801559e:	f04f 33ff 	mov.w	r3, #4294967295
 80155a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80155a4:	69bb      	ldr	r3, [r7, #24]
    }
 80155a6:	4618      	mov	r0, r3
 80155a8:	3720      	adds	r7, #32
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b086      	sub	sp, #24
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	60f8      	str	r0, [r7, #12]
 80155b6:	60b9      	str	r1, [r7, #8]
 80155b8:	607a      	str	r2, [r7, #4]
 80155ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80155bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	461a      	mov	r2, r3
 80155c6:	21a5      	movs	r1, #165	@ 0xa5
 80155c8:	f002 fb6a 	bl	8017ca0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80155cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80155d6:	3b01      	subs	r3, #1
 80155d8:	009b      	lsls	r3, r3, #2
 80155da:	4413      	add	r3, r2
 80155dc:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	f023 0307 	bic.w	r3, r3, #7
 80155e4:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	f003 0307 	and.w	r3, r3, #7
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d003      	beq.n	80155f8 <prvInitialiseNewTask+0x4a>
 80155f0:	f001 fd02 	bl	8016ff8 <ulSetInterruptMask>
 80155f4:	bf00      	nop
 80155f6:	e7fd      	b.n	80155f4 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d01e      	beq.n	801563c <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80155fe:	2300      	movs	r3, #0
 8015600:	617b      	str	r3, [r7, #20]
 8015602:	e012      	b.n	801562a <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015604:	68ba      	ldr	r2, [r7, #8]
 8015606:	697b      	ldr	r3, [r7, #20]
 8015608:	4413      	add	r3, r2
 801560a:	7819      	ldrb	r1, [r3, #0]
 801560c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	4413      	add	r3, r2
 8015612:	3334      	adds	r3, #52	@ 0x34
 8015614:	460a      	mov	r2, r1
 8015616:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8015618:	68ba      	ldr	r2, [r7, #8]
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	4413      	add	r3, r2
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d006      	beq.n	8015632 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	3301      	adds	r3, #1
 8015628:	617b      	str	r3, [r7, #20]
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	2b0f      	cmp	r3, #15
 801562e:	d9e9      	bls.n	8015604 <prvInitialiseNewTask+0x56>
 8015630:	e000      	b.n	8015634 <prvInitialiseNewTask+0x86>
            {
                break;
 8015632:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015636:	2200      	movs	r2, #0
 8015638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 801563c:	6a3b      	ldr	r3, [r7, #32]
 801563e:	2b37      	cmp	r3, #55	@ 0x37
 8015640:	d903      	bls.n	801564a <prvInitialiseNewTask+0x9c>
 8015642:	f001 fcd9 	bl	8016ff8 <ulSetInterruptMask>
 8015646:	bf00      	nop
 8015648:	e7fd      	b.n	8015646 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801564a:	6a3b      	ldr	r3, [r7, #32]
 801564c:	2b37      	cmp	r3, #55	@ 0x37
 801564e:	d901      	bls.n	8015654 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015650:	2337      	movs	r3, #55	@ 0x37
 8015652:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8015654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015656:	6a3a      	ldr	r2, [r7, #32]
 8015658:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 801565a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801565c:	6a3a      	ldr	r2, [r7, #32]
 801565e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015662:	3304      	adds	r3, #4
 8015664:	4618      	mov	r0, r3
 8015666:	f7ff f8b1 	bl	80147cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801566c:	3318      	adds	r3, #24
 801566e:	4618      	mov	r0, r3
 8015670:	f7ff f8ac 	bl	80147cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015678:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801567a:	6a3b      	ldr	r3, [r7, #32]
 801567c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015682:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015688:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801568a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801568c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	68fa      	ldr	r2, [r7, #12]
 8015692:	6938      	ldr	r0, [r7, #16]
 8015694:	f001 fbd0 	bl	8016e38 <pxPortInitialiseStack>
 8015698:	4602      	mov	r2, r0
 801569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801569c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 801569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d002      	beq.n	80156aa <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80156a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80156a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80156aa:	bf00      	nop
 80156ac:	3718      	adds	r7, #24
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}
	...

080156b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80156bc:	f001 fb5e 	bl	8016d7c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80156c0:	4b3a      	ldr	r3, [pc, #232]	@ (80157ac <prvAddNewTaskToReadyList+0xf8>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	3301      	adds	r3, #1
 80156c6:	4a39      	ldr	r2, [pc, #228]	@ (80157ac <prvAddNewTaskToReadyList+0xf8>)
 80156c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80156ca:	4b39      	ldr	r3, [pc, #228]	@ (80157b0 <prvAddNewTaskToReadyList+0xfc>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d109      	bne.n	80156e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80156d2:	4a37      	ldr	r2, [pc, #220]	@ (80157b0 <prvAddNewTaskToReadyList+0xfc>)
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80156d8:	4b34      	ldr	r3, [pc, #208]	@ (80157ac <prvAddNewTaskToReadyList+0xf8>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d110      	bne.n	8015702 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80156e0:	f000 fe56 	bl	8016390 <prvInitialiseTaskLists>
 80156e4:	e00d      	b.n	8015702 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80156e6:	4b33      	ldr	r3, [pc, #204]	@ (80157b4 <prvAddNewTaskToReadyList+0x100>)
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d109      	bne.n	8015702 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80156ee:	4b30      	ldr	r3, [pc, #192]	@ (80157b0 <prvAddNewTaskToReadyList+0xfc>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d802      	bhi.n	8015702 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80156fc:	4a2c      	ldr	r2, [pc, #176]	@ (80157b0 <prvAddNewTaskToReadyList+0xfc>)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8015702:	4b2d      	ldr	r3, [pc, #180]	@ (80157b8 <prvAddNewTaskToReadyList+0x104>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	3301      	adds	r3, #1
 8015708:	4a2b      	ldr	r2, [pc, #172]	@ (80157b8 <prvAddNewTaskToReadyList+0x104>)
 801570a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 801570c:	4b2a      	ldr	r3, [pc, #168]	@ (80157b8 <prvAddNewTaskToReadyList+0x104>)
 801570e:	681a      	ldr	r2, [r3, #0]
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015718:	4b28      	ldr	r3, [pc, #160]	@ (80157bc <prvAddNewTaskToReadyList+0x108>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	429a      	cmp	r2, r3
 801571e:	d903      	bls.n	8015728 <prvAddNewTaskToReadyList+0x74>
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015724:	4a25      	ldr	r2, [pc, #148]	@ (80157bc <prvAddNewTaskToReadyList+0x108>)
 8015726:	6013      	str	r3, [r2, #0]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801572c:	4924      	ldr	r1, [pc, #144]	@ (80157c0 <prvAddNewTaskToReadyList+0x10c>)
 801572e:	4613      	mov	r3, r2
 8015730:	009b      	lsls	r3, r3, #2
 8015732:	4413      	add	r3, r2
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	440b      	add	r3, r1
 8015738:	3304      	adds	r3, #4
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	60fb      	str	r3, [r7, #12]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	68fa      	ldr	r2, [r7, #12]
 8015742:	609a      	str	r2, [r3, #8]
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	689a      	ldr	r2, [r3, #8]
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	60da      	str	r2, [r3, #12]
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	689b      	ldr	r3, [r3, #8]
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	3204      	adds	r2, #4
 8015754:	605a      	str	r2, [r3, #4]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	1d1a      	adds	r2, r3, #4
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	609a      	str	r2, [r3, #8]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015762:	4613      	mov	r3, r2
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	4413      	add	r3, r2
 8015768:	009b      	lsls	r3, r3, #2
 801576a:	4a15      	ldr	r2, [pc, #84]	@ (80157c0 <prvAddNewTaskToReadyList+0x10c>)
 801576c:	441a      	add	r2, r3
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	615a      	str	r2, [r3, #20]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015776:	4912      	ldr	r1, [pc, #72]	@ (80157c0 <prvAddNewTaskToReadyList+0x10c>)
 8015778:	4613      	mov	r3, r2
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	4413      	add	r3, r2
 801577e:	009b      	lsls	r3, r3, #2
 8015780:	440b      	add	r3, r1
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	1c59      	adds	r1, r3, #1
 8015786:	480e      	ldr	r0, [pc, #56]	@ (80157c0 <prvAddNewTaskToReadyList+0x10c>)
 8015788:	4613      	mov	r3, r2
 801578a:	009b      	lsls	r3, r3, #2
 801578c:	4413      	add	r3, r2
 801578e:	009b      	lsls	r3, r3, #2
 8015790:	4403      	add	r3, r0
 8015792:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8015794:	f001 fb04 	bl	8016da0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8015798:	4b06      	ldr	r3, [pc, #24]	@ (80157b4 <prvAddNewTaskToReadyList+0x100>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d001      	beq.n	80157a4 <prvAddNewTaskToReadyList+0xf0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80157a0:	4b03      	ldr	r3, [pc, #12]	@ (80157b0 <prvAddNewTaskToReadyList+0xfc>)
 80157a2:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80157a4:	bf00      	nop
 80157a6:	3710      	adds	r7, #16
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	20029d6c 	.word	0x20029d6c
 80157b0:	20029898 	.word	0x20029898
 80157b4:	20029d78 	.word	0x20029d78
 80157b8:	20029d88 	.word	0x20029d88
 80157bc:	20029d74 	.word	0x20029d74
 80157c0:	2002989c 	.word	0x2002989c

080157c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80157cc:	f001 fad6 	bl	8016d7c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d102      	bne.n	80157dc <vTaskDelete+0x18>
 80157d6:	4b28      	ldr	r3, [pc, #160]	@ (8015878 <vTaskDelete+0xb4>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	e000      	b.n	80157de <vTaskDelete+0x1a>
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	3304      	adds	r3, #4
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7ff f85b 	bl	80148a0 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d004      	beq.n	80157fc <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	3318      	adds	r3, #24
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7ff f852 	bl	80148a0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80157fc:	4b1f      	ldr	r3, [pc, #124]	@ (801587c <vTaskDelete+0xb8>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	3301      	adds	r3, #1
 8015802:	4a1e      	ldr	r2, [pc, #120]	@ (801587c <vTaskDelete+0xb8>)
 8015804:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8015806:	4b1c      	ldr	r3, [pc, #112]	@ (8015878 <vTaskDelete+0xb4>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	68fa      	ldr	r2, [r7, #12]
 801580c:	429a      	cmp	r2, r3
 801580e:	d10b      	bne.n	8015828 <vTaskDelete+0x64>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	3304      	adds	r3, #4
 8015814:	4619      	mov	r1, r3
 8015816:	481a      	ldr	r0, [pc, #104]	@ (8015880 <vTaskDelete+0xbc>)
 8015818:	f7fe ffe5 	bl	80147e6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 801581c:	4b19      	ldr	r3, [pc, #100]	@ (8015884 <vTaskDelete+0xc0>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	3301      	adds	r3, #1
 8015822:	4a18      	ldr	r2, [pc, #96]	@ (8015884 <vTaskDelete+0xc0>)
 8015824:	6013      	str	r3, [r2, #0]
 8015826:	e006      	b.n	8015836 <vTaskDelete+0x72>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8015828:	4b17      	ldr	r3, [pc, #92]	@ (8015888 <vTaskDelete+0xc4>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	3b01      	subs	r3, #1
 801582e:	4a16      	ldr	r2, [pc, #88]	@ (8015888 <vTaskDelete+0xc4>)
 8015830:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8015832:	f000 fe43 	bl	80164bc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8015836:	f001 fab3 	bl	8016da0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 801583a:	4b0f      	ldr	r3, [pc, #60]	@ (8015878 <vTaskDelete+0xb4>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	68fa      	ldr	r2, [r7, #12]
 8015840:	429a      	cmp	r2, r3
 8015842:	d002      	beq.n	801584a <vTaskDelete+0x86>
        {
            prvDeleteTCB( pxTCB );
 8015844:	68f8      	ldr	r0, [r7, #12]
 8015846:	f000 fe11 	bl	801646c <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 801584a:	4b10      	ldr	r3, [pc, #64]	@ (801588c <vTaskDelete+0xc8>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d00e      	beq.n	8015870 <vTaskDelete+0xac>
        {
            if( pxTCB == pxCurrentTCB )
 8015852:	4b09      	ldr	r3, [pc, #36]	@ (8015878 <vTaskDelete+0xb4>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	68fa      	ldr	r2, [r7, #12]
 8015858:	429a      	cmp	r2, r3
 801585a:	d109      	bne.n	8015870 <vTaskDelete+0xac>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 801585c:	4b0c      	ldr	r3, [pc, #48]	@ (8015890 <vTaskDelete+0xcc>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d003      	beq.n	801586c <vTaskDelete+0xa8>
 8015864:	f001 fbc8 	bl	8016ff8 <ulSetInterruptMask>
 8015868:	bf00      	nop
 801586a:	e7fd      	b.n	8015868 <vTaskDelete+0xa4>
                portYIELD_WITHIN_API();
 801586c:	f001 fa74 	bl	8016d58 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8015870:	bf00      	nop
 8015872:	3710      	adds	r7, #16
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}
 8015878:	20029898 	.word	0x20029898
 801587c:	20029d88 	.word	0x20029d88
 8015880:	20029d40 	.word	0x20029d40
 8015884:	20029d54 	.word	0x20029d54
 8015888:	20029d6c 	.word	0x20029d6c
 801588c:	20029d78 	.word	0x20029d78
 8015890:	20029d94 	.word	0x20029d94

08015894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8015894:	b580      	push	{r7, lr}
 8015896:	b084      	sub	sp, #16
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 801589c:	2300      	movs	r3, #0
 801589e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d010      	beq.n	80158c8 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80158a6:	4b0d      	ldr	r3, [pc, #52]	@ (80158dc <vTaskDelay+0x48>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d003      	beq.n	80158b6 <vTaskDelay+0x22>
 80158ae:	f001 fba3 	bl	8016ff8 <ulSetInterruptMask>
 80158b2:	bf00      	nop
 80158b4:	e7fd      	b.n	80158b2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 80158b6:	f000 f86f 	bl	8015998 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80158ba:	2100      	movs	r1, #0
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f000 fed7 	bl	8016670 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80158c2:	f000 f877 	bl	80159b4 <xTaskResumeAll>
 80158c6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d101      	bne.n	80158d2 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 80158ce:	f001 fa43 	bl	8016d58 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80158d2:	bf00      	nop
 80158d4:	3710      	adds	r7, #16
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
 80158da:	bf00      	nop
 80158dc:	20029d94 	.word	0x20029d94

080158e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b088      	sub	sp, #32
 80158e4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80158e6:	2300      	movs	r3, #0
 80158e8:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 80158ea:	2300      	movs	r3, #0
 80158ec:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80158ee:	463a      	mov	r2, r7
 80158f0:	1d39      	adds	r1, r7, #4
 80158f2:	f107 0308 	add.w	r3, r7, #8
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fe fd0a 	bl	8014310 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80158fc:	6839      	ldr	r1, [r7, #0]
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	68ba      	ldr	r2, [r7, #8]
 8015902:	9202      	str	r2, [sp, #8]
 8015904:	9301      	str	r3, [sp, #4]
 8015906:	2300      	movs	r3, #0
 8015908:	9300      	str	r3, [sp, #0]
 801590a:	2300      	movs	r3, #0
 801590c:	460a      	mov	r2, r1
 801590e:	491b      	ldr	r1, [pc, #108]	@ (801597c <vTaskStartScheduler+0x9c>)
 8015910:	481b      	ldr	r0, [pc, #108]	@ (8015980 <vTaskStartScheduler+0xa0>)
 8015912:	f7ff fdb5 	bl	8015480 <xTaskCreateStatic>
 8015916:	4603      	mov	r3, r0
 8015918:	4a1a      	ldr	r2, [pc, #104]	@ (8015984 <vTaskStartScheduler+0xa4>)
 801591a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 801591c:	4b19      	ldr	r3, [pc, #100]	@ (8015984 <vTaskStartScheduler+0xa4>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d002      	beq.n	801592a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8015924:	2301      	movs	r3, #1
 8015926:	60fb      	str	r3, [r7, #12]
 8015928:	e001      	b.n	801592e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 801592a:	2300      	movs	r3, #0
 801592c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	2b01      	cmp	r3, #1
 8015932:	d102      	bne.n	801593a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8015934:	f000 ff0a 	bl	801674c <xTimerCreateTimerTask>
 8015938:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	2b01      	cmp	r3, #1
 801593e:	d10e      	bne.n	801595e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8015940:	f001 fb5a 	bl	8016ff8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8015944:	4b10      	ldr	r3, [pc, #64]	@ (8015988 <vTaskStartScheduler+0xa8>)
 8015946:	f04f 32ff 	mov.w	r2, #4294967295
 801594a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 801594c:	4b0f      	ldr	r3, [pc, #60]	@ (801598c <vTaskStartScheduler+0xac>)
 801594e:	2201      	movs	r2, #1
 8015950:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015952:	4b0f      	ldr	r3, [pc, #60]	@ (8015990 <vTaskStartScheduler+0xb0>)
 8015954:	2200      	movs	r2, #0
 8015956:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8015958:	f001 faf8 	bl	8016f4c <xPortStartScheduler>
 801595c:	e007      	b.n	801596e <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015964:	d103      	bne.n	801596e <vTaskStartScheduler+0x8e>
 8015966:	f001 fb47 	bl	8016ff8 <ulSetInterruptMask>
 801596a:	bf00      	nop
 801596c:	e7fd      	b.n	801596a <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 801596e:	4b09      	ldr	r3, [pc, #36]	@ (8015994 <vTaskStartScheduler+0xb4>)
 8015970:	681b      	ldr	r3, [r3, #0]
}
 8015972:	bf00      	nop
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop
 801597c:	08017da0 	.word	0x08017da0
 8015980:	0801637d 	.word	0x0801637d
 8015984:	20029d90 	.word	0x20029d90
 8015988:	20029d8c 	.word	0x20029d8c
 801598c:	20029d78 	.word	0x20029d78
 8015990:	20029d70 	.word	0x20029d70
 8015994:	2000016c 	.word	0x2000016c

08015998 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015998:	b480      	push	{r7}
 801599a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 801599c:	4b04      	ldr	r3, [pc, #16]	@ (80159b0 <vTaskSuspendAll+0x18>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	3301      	adds	r3, #1
 80159a2:	4a03      	ldr	r2, [pc, #12]	@ (80159b0 <vTaskSuspendAll+0x18>)
 80159a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80159a6:	bf00      	nop
 80159a8:	46bd      	mov	sp, r7
 80159aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ae:	4770      	bx	lr
 80159b0:	20029d94 	.word	0x20029d94

080159b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b086      	sub	sp, #24
 80159b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80159ba:	2300      	movs	r3, #0
 80159bc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80159be:	2300      	movs	r3, #0
 80159c0:	60fb      	str	r3, [r7, #12]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80159c2:	4b68      	ldr	r3, [pc, #416]	@ (8015b64 <xTaskResumeAll+0x1b0>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d103      	bne.n	80159d2 <xTaskResumeAll+0x1e>
 80159ca:	f001 fb15 	bl	8016ff8 <ulSetInterruptMask>
 80159ce:	bf00      	nop
 80159d0:	e7fd      	b.n	80159ce <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80159d2:	f001 f9d3 	bl	8016d7c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80159d6:	4b63      	ldr	r3, [pc, #396]	@ (8015b64 <xTaskResumeAll+0x1b0>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	3b01      	subs	r3, #1
 80159dc:	4a61      	ldr	r2, [pc, #388]	@ (8015b64 <xTaskResumeAll+0x1b0>)
 80159de:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159e0:	4b60      	ldr	r3, [pc, #384]	@ (8015b64 <xTaskResumeAll+0x1b0>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	f040 80b5 	bne.w	8015b54 <xTaskResumeAll+0x1a0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80159ea:	4b5f      	ldr	r3, [pc, #380]	@ (8015b68 <xTaskResumeAll+0x1b4>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	f000 80b0 	beq.w	8015b54 <xTaskResumeAll+0x1a0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159f4:	e08b      	b.n	8015b0e <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159f6:	4b5d      	ldr	r3, [pc, #372]	@ (8015b6c <xTaskResumeAll+0x1b8>)
 80159f8:	68db      	ldr	r3, [r3, #12]
 80159fa:	68db      	ldr	r3, [r3, #12]
 80159fc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a02:	60bb      	str	r3, [r7, #8]
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	69db      	ldr	r3, [r3, #28]
 8015a08:	697a      	ldr	r2, [r7, #20]
 8015a0a:	6a12      	ldr	r2, [r2, #32]
 8015a0c:	609a      	str	r2, [r3, #8]
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	6a1b      	ldr	r3, [r3, #32]
 8015a12:	697a      	ldr	r2, [r7, #20]
 8015a14:	69d2      	ldr	r2, [r2, #28]
 8015a16:	605a      	str	r2, [r3, #4]
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	685a      	ldr	r2, [r3, #4]
 8015a1c:	697b      	ldr	r3, [r7, #20]
 8015a1e:	3318      	adds	r3, #24
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d103      	bne.n	8015a2c <xTaskResumeAll+0x78>
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	6a1a      	ldr	r2, [r3, #32]
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	605a      	str	r2, [r3, #4]
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	629a      	str	r2, [r3, #40]	@ 0x28
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	1e5a      	subs	r2, r3, #1
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	695b      	ldr	r3, [r3, #20]
 8015a40:	607b      	str	r3, [r7, #4]
 8015a42:	697b      	ldr	r3, [r7, #20]
 8015a44:	689b      	ldr	r3, [r3, #8]
 8015a46:	697a      	ldr	r2, [r7, #20]
 8015a48:	68d2      	ldr	r2, [r2, #12]
 8015a4a:	609a      	str	r2, [r3, #8]
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	697a      	ldr	r2, [r7, #20]
 8015a52:	6892      	ldr	r2, [r2, #8]
 8015a54:	605a      	str	r2, [r3, #4]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	685a      	ldr	r2, [r3, #4]
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	3304      	adds	r3, #4
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	d103      	bne.n	8015a6a <xTaskResumeAll+0xb6>
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	68da      	ldr	r2, [r3, #12]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	605a      	str	r2, [r3, #4]
 8015a6a:	697b      	ldr	r3, [r7, #20]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	615a      	str	r2, [r3, #20]
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	1e5a      	subs	r2, r3, #1
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8015a7a:	697b      	ldr	r3, [r7, #20]
 8015a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8015b70 <xTaskResumeAll+0x1bc>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d903      	bls.n	8015a8e <xTaskResumeAll+0xda>
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a8a:	4a39      	ldr	r2, [pc, #228]	@ (8015b70 <xTaskResumeAll+0x1bc>)
 8015a8c:	6013      	str	r3, [r2, #0]
 8015a8e:	697b      	ldr	r3, [r7, #20]
 8015a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a92:	4938      	ldr	r1, [pc, #224]	@ (8015b74 <xTaskResumeAll+0x1c0>)
 8015a94:	4613      	mov	r3, r2
 8015a96:	009b      	lsls	r3, r3, #2
 8015a98:	4413      	add	r3, r2
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	440b      	add	r3, r1
 8015a9e:	3304      	adds	r3, #4
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	603b      	str	r3, [r7, #0]
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	683a      	ldr	r2, [r7, #0]
 8015aa8:	609a      	str	r2, [r3, #8]
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	689a      	ldr	r2, [r3, #8]
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	60da      	str	r2, [r3, #12]
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	689b      	ldr	r3, [r3, #8]
 8015ab6:	697a      	ldr	r2, [r7, #20]
 8015ab8:	3204      	adds	r2, #4
 8015aba:	605a      	str	r2, [r3, #4]
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	1d1a      	adds	r2, r3, #4
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	609a      	str	r2, [r3, #8]
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ac8:	4613      	mov	r3, r2
 8015aca:	009b      	lsls	r3, r3, #2
 8015acc:	4413      	add	r3, r2
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	4a28      	ldr	r2, [pc, #160]	@ (8015b74 <xTaskResumeAll+0x1c0>)
 8015ad2:	441a      	add	r2, r3
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	615a      	str	r2, [r3, #20]
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015adc:	4925      	ldr	r1, [pc, #148]	@ (8015b74 <xTaskResumeAll+0x1c0>)
 8015ade:	4613      	mov	r3, r2
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	4413      	add	r3, r2
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	440b      	add	r3, r1
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	1c59      	adds	r1, r3, #1
 8015aec:	4821      	ldr	r0, [pc, #132]	@ (8015b74 <xTaskResumeAll+0x1c0>)
 8015aee:	4613      	mov	r3, r2
 8015af0:	009b      	lsls	r3, r3, #2
 8015af2:	4413      	add	r3, r2
 8015af4:	009b      	lsls	r3, r3, #2
 8015af6:	4403      	add	r3, r0
 8015af8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015afe:	4b1e      	ldr	r3, [pc, #120]	@ (8015b78 <xTaskResumeAll+0x1c4>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d302      	bcc.n	8015b0e <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8015b08:	4b1c      	ldr	r3, [pc, #112]	@ (8015b7c <xTaskResumeAll+0x1c8>)
 8015b0a:	2201      	movs	r2, #1
 8015b0c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015b0e:	4b17      	ldr	r3, [pc, #92]	@ (8015b6c <xTaskResumeAll+0x1b8>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	f47f af6f 	bne.w	80159f6 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d001      	beq.n	8015b22 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8015b1e:	f000 fccd 	bl	80164bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015b22:	4b17      	ldr	r3, [pc, #92]	@ (8015b80 <xTaskResumeAll+0x1cc>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	613b      	str	r3, [r7, #16]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d010      	beq.n	8015b50 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8015b2e:	f000 f845 	bl	8015bbc <xTaskIncrementTick>
 8015b32:	4603      	mov	r3, r0
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d002      	beq.n	8015b3e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8015b38:	4b10      	ldr	r3, [pc, #64]	@ (8015b7c <xTaskResumeAll+0x1c8>)
 8015b3a:	2201      	movs	r2, #1
 8015b3c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	3b01      	subs	r3, #1
 8015b42:	613b      	str	r3, [r7, #16]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d1f1      	bne.n	8015b2e <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8015b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8015b80 <xTaskResumeAll+0x1cc>)
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8015b50:	4b0a      	ldr	r3, [pc, #40]	@ (8015b7c <xTaskResumeAll+0x1c8>)
 8015b52:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8015b54:	f001 f924 	bl	8016da0 <vPortExitCritical>

    return xAlreadyYielded;
 8015b58:	68fb      	ldr	r3, [r7, #12]
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3718      	adds	r7, #24
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
 8015b62:	bf00      	nop
 8015b64:	20029d94 	.word	0x20029d94
 8015b68:	20029d6c 	.word	0x20029d6c
 8015b6c:	20029d2c 	.word	0x20029d2c
 8015b70:	20029d74 	.word	0x20029d74
 8015b74:	2002989c 	.word	0x2002989c
 8015b78:	20029898 	.word	0x20029898
 8015b7c:	20029d80 	.word	0x20029d80
 8015b80:	20029d7c 	.word	0x20029d7c

08015b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015b84:	b480      	push	{r7}
 8015b86:	b083      	sub	sp, #12
 8015b88:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8015b8a:	4b05      	ldr	r3, [pc, #20]	@ (8015ba0 <xTaskGetTickCount+0x1c>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8015b90:	687b      	ldr	r3, [r7, #4]
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	370c      	adds	r7, #12
 8015b96:	46bd      	mov	sp, r7
 8015b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9c:	4770      	bx	lr
 8015b9e:	bf00      	nop
 8015ba0:	20029d70 	.word	0x20029d70

08015ba4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8015ba8:	4b03      	ldr	r3, [pc, #12]	@ (8015bb8 <uxTaskGetNumberOfTasks+0x14>)
 8015baa:	681b      	ldr	r3, [r3, #0]
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb4:	4770      	bx	lr
 8015bb6:	bf00      	nop
 8015bb8:	20029d6c 	.word	0x20029d6c

08015bbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b088      	sub	sp, #32
 8015bc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015bc6:	4b6b      	ldr	r3, [pc, #428]	@ (8015d74 <xTaskIncrementTick+0x1b8>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	f040 80c7 	bne.w	8015d5e <xTaskIncrementTick+0x1a2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015bd0:	4b69      	ldr	r3, [pc, #420]	@ (8015d78 <xTaskIncrementTick+0x1bc>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	3301      	adds	r3, #1
 8015bd6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8015bd8:	4a67      	ldr	r2, [pc, #412]	@ (8015d78 <xTaskIncrementTick+0x1bc>)
 8015bda:	69bb      	ldr	r3, [r7, #24]
 8015bdc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015bde:	69bb      	ldr	r3, [r7, #24]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d119      	bne.n	8015c18 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8015be4:	4b65      	ldr	r3, [pc, #404]	@ (8015d7c <xTaskIncrementTick+0x1c0>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d003      	beq.n	8015bf6 <xTaskIncrementTick+0x3a>
 8015bee:	f001 fa03 	bl	8016ff8 <ulSetInterruptMask>
 8015bf2:	bf00      	nop
 8015bf4:	e7fd      	b.n	8015bf2 <xTaskIncrementTick+0x36>
 8015bf6:	4b61      	ldr	r3, [pc, #388]	@ (8015d7c <xTaskIncrementTick+0x1c0>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	617b      	str	r3, [r7, #20]
 8015bfc:	4b60      	ldr	r3, [pc, #384]	@ (8015d80 <xTaskIncrementTick+0x1c4>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	4a5e      	ldr	r2, [pc, #376]	@ (8015d7c <xTaskIncrementTick+0x1c0>)
 8015c02:	6013      	str	r3, [r2, #0]
 8015c04:	4a5e      	ldr	r2, [pc, #376]	@ (8015d80 <xTaskIncrementTick+0x1c4>)
 8015c06:	697b      	ldr	r3, [r7, #20]
 8015c08:	6013      	str	r3, [r2, #0]
 8015c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8015d84 <xTaskIncrementTick+0x1c8>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	3301      	adds	r3, #1
 8015c10:	4a5c      	ldr	r2, [pc, #368]	@ (8015d84 <xTaskIncrementTick+0x1c8>)
 8015c12:	6013      	str	r3, [r2, #0]
 8015c14:	f000 fc52 	bl	80164bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8015c18:	4b5b      	ldr	r3, [pc, #364]	@ (8015d88 <xTaskIncrementTick+0x1cc>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	69ba      	ldr	r2, [r7, #24]
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	f0c0 80a2 	bcc.w	8015d68 <xTaskIncrementTick+0x1ac>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015c24:	4b55      	ldr	r3, [pc, #340]	@ (8015d7c <xTaskIncrementTick+0x1c0>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d104      	bne.n	8015c38 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c2e:	4b56      	ldr	r3, [pc, #344]	@ (8015d88 <xTaskIncrementTick+0x1cc>)
 8015c30:	f04f 32ff 	mov.w	r2, #4294967295
 8015c34:	601a      	str	r2, [r3, #0]
                    break;
 8015c36:	e097      	b.n	8015d68 <xTaskIncrementTick+0x1ac>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c38:	4b50      	ldr	r3, [pc, #320]	@ (8015d7c <xTaskIncrementTick+0x1c0>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	68db      	ldr	r3, [r3, #12]
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	685b      	ldr	r3, [r3, #4]
 8015c46:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8015c48:	69ba      	ldr	r2, [r7, #24]
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d203      	bcs.n	8015c58 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8015c50:	4a4d      	ldr	r2, [pc, #308]	@ (8015d88 <xTaskIncrementTick+0x1cc>)
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8015c56:	e087      	b.n	8015d68 <xTaskIncrementTick+0x1ac>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8015c58:	693b      	ldr	r3, [r7, #16]
 8015c5a:	695b      	ldr	r3, [r3, #20]
 8015c5c:	60bb      	str	r3, [r7, #8]
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	689b      	ldr	r3, [r3, #8]
 8015c62:	693a      	ldr	r2, [r7, #16]
 8015c64:	68d2      	ldr	r2, [r2, #12]
 8015c66:	609a      	str	r2, [r3, #8]
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	68db      	ldr	r3, [r3, #12]
 8015c6c:	693a      	ldr	r2, [r7, #16]
 8015c6e:	6892      	ldr	r2, [r2, #8]
 8015c70:	605a      	str	r2, [r3, #4]
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	685a      	ldr	r2, [r3, #4]
 8015c76:	693b      	ldr	r3, [r7, #16]
 8015c78:	3304      	adds	r3, #4
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d103      	bne.n	8015c86 <xTaskIncrementTick+0xca>
 8015c7e:	693b      	ldr	r3, [r7, #16]
 8015c80:	68da      	ldr	r2, [r3, #12]
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	605a      	str	r2, [r3, #4]
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	615a      	str	r2, [r3, #20]
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	1e5a      	subs	r2, r3, #1
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d01e      	beq.n	8015cdc <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ca2:	607b      	str	r3, [r7, #4]
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	69db      	ldr	r3, [r3, #28]
 8015ca8:	693a      	ldr	r2, [r7, #16]
 8015caa:	6a12      	ldr	r2, [r2, #32]
 8015cac:	609a      	str	r2, [r3, #8]
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	6a1b      	ldr	r3, [r3, #32]
 8015cb2:	693a      	ldr	r2, [r7, #16]
 8015cb4:	69d2      	ldr	r2, [r2, #28]
 8015cb6:	605a      	str	r2, [r3, #4]
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	685a      	ldr	r2, [r3, #4]
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	3318      	adds	r3, #24
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d103      	bne.n	8015ccc <xTaskIncrementTick+0x110>
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	6a1a      	ldr	r2, [r3, #32]
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	605a      	str	r2, [r3, #4]
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	1e5a      	subs	r2, r3, #1
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8015d8c <xTaskIncrementTick+0x1d0>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	d903      	bls.n	8015cf0 <xTaskIncrementTick+0x134>
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cec:	4a27      	ldr	r2, [pc, #156]	@ (8015d8c <xTaskIncrementTick+0x1d0>)
 8015cee:	6013      	str	r3, [r2, #0]
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cf4:	4926      	ldr	r1, [pc, #152]	@ (8015d90 <xTaskIncrementTick+0x1d4>)
 8015cf6:	4613      	mov	r3, r2
 8015cf8:	009b      	lsls	r3, r3, #2
 8015cfa:	4413      	add	r3, r2
 8015cfc:	009b      	lsls	r3, r3, #2
 8015cfe:	440b      	add	r3, r1
 8015d00:	3304      	adds	r3, #4
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	603b      	str	r3, [r7, #0]
 8015d06:	693b      	ldr	r3, [r7, #16]
 8015d08:	683a      	ldr	r2, [r7, #0]
 8015d0a:	609a      	str	r2, [r3, #8]
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	689a      	ldr	r2, [r3, #8]
 8015d10:	693b      	ldr	r3, [r7, #16]
 8015d12:	60da      	str	r2, [r3, #12]
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	689b      	ldr	r3, [r3, #8]
 8015d18:	693a      	ldr	r2, [r7, #16]
 8015d1a:	3204      	adds	r2, #4
 8015d1c:	605a      	str	r2, [r3, #4]
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	1d1a      	adds	r2, r3, #4
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	609a      	str	r2, [r3, #8]
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d2a:	4613      	mov	r3, r2
 8015d2c:	009b      	lsls	r3, r3, #2
 8015d2e:	4413      	add	r3, r2
 8015d30:	009b      	lsls	r3, r3, #2
 8015d32:	4a17      	ldr	r2, [pc, #92]	@ (8015d90 <xTaskIncrementTick+0x1d4>)
 8015d34:	441a      	add	r2, r3
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	615a      	str	r2, [r3, #20]
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d3e:	4914      	ldr	r1, [pc, #80]	@ (8015d90 <xTaskIncrementTick+0x1d4>)
 8015d40:	4613      	mov	r3, r2
 8015d42:	009b      	lsls	r3, r3, #2
 8015d44:	4413      	add	r3, r2
 8015d46:	009b      	lsls	r3, r3, #2
 8015d48:	440b      	add	r3, r1
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	1c59      	adds	r1, r3, #1
 8015d4e:	4810      	ldr	r0, [pc, #64]	@ (8015d90 <xTaskIncrementTick+0x1d4>)
 8015d50:	4613      	mov	r3, r2
 8015d52:	009b      	lsls	r3, r3, #2
 8015d54:	4413      	add	r3, r2
 8015d56:	009b      	lsls	r3, r3, #2
 8015d58:	4403      	add	r3, r0
 8015d5a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015d5c:	e762      	b.n	8015c24 <xTaskIncrementTick+0x68>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8015d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8015d94 <xTaskIncrementTick+0x1d8>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	3301      	adds	r3, #1
 8015d64:	4a0b      	ldr	r2, [pc, #44]	@ (8015d94 <xTaskIncrementTick+0x1d8>)
 8015d66:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8015d68:	69fb      	ldr	r3, [r7, #28]
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3720      	adds	r7, #32
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	20029d94 	.word	0x20029d94
 8015d78:	20029d70 	.word	0x20029d70
 8015d7c:	20029d24 	.word	0x20029d24
 8015d80:	20029d28 	.word	0x20029d28
 8015d84:	20029d84 	.word	0x20029d84
 8015d88:	20029d8c 	.word	0x20029d8c
 8015d8c:	20029d74 	.word	0x20029d74
 8015d90:	2002989c 	.word	0x2002989c
 8015d94:	20029d7c 	.word	0x20029d7c

08015d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015d9e:	4b23      	ldr	r3, [pc, #140]	@ (8015e2c <vTaskSwitchContext+0x94>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d003      	beq.n	8015dae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8015da6:	4b22      	ldr	r3, [pc, #136]	@ (8015e30 <vTaskSwitchContext+0x98>)
 8015da8:	2201      	movs	r2, #1
 8015daa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8015dac:	e03a      	b.n	8015e24 <vTaskSwitchContext+0x8c>
        xYieldPending = pdFALSE;
 8015dae:	4b20      	ldr	r3, [pc, #128]	@ (8015e30 <vTaskSwitchContext+0x98>)
 8015db0:	2200      	movs	r2, #0
 8015db2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015db4:	4b1f      	ldr	r3, [pc, #124]	@ (8015e34 <vTaskSwitchContext+0x9c>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	607b      	str	r3, [r7, #4]
 8015dba:	e009      	b.n	8015dd0 <vTaskSwitchContext+0x38>
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d103      	bne.n	8015dca <vTaskSwitchContext+0x32>
 8015dc2:	f001 f919 	bl	8016ff8 <ulSetInterruptMask>
 8015dc6:	bf00      	nop
 8015dc8:	e7fd      	b.n	8015dc6 <vTaskSwitchContext+0x2e>
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	3b01      	subs	r3, #1
 8015dce:	607b      	str	r3, [r7, #4]
 8015dd0:	4919      	ldr	r1, [pc, #100]	@ (8015e38 <vTaskSwitchContext+0xa0>)
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	4613      	mov	r3, r2
 8015dd6:	009b      	lsls	r3, r3, #2
 8015dd8:	4413      	add	r3, r2
 8015dda:	009b      	lsls	r3, r3, #2
 8015ddc:	440b      	add	r3, r1
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d0eb      	beq.n	8015dbc <vTaskSwitchContext+0x24>
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	4613      	mov	r3, r2
 8015de8:	009b      	lsls	r3, r3, #2
 8015dea:	4413      	add	r3, r2
 8015dec:	009b      	lsls	r3, r3, #2
 8015dee:	4a12      	ldr	r2, [pc, #72]	@ (8015e38 <vTaskSwitchContext+0xa0>)
 8015df0:	4413      	add	r3, r2
 8015df2:	603b      	str	r3, [r7, #0]
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	685a      	ldr	r2, [r3, #4]
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	605a      	str	r2, [r3, #4]
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	685a      	ldr	r2, [r3, #4]
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	3308      	adds	r3, #8
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d104      	bne.n	8015e14 <vTaskSwitchContext+0x7c>
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	685a      	ldr	r2, [r3, #4]
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	605a      	str	r2, [r3, #4]
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	68db      	ldr	r3, [r3, #12]
 8015e1a:	4a08      	ldr	r2, [pc, #32]	@ (8015e3c <vTaskSwitchContext+0xa4>)
 8015e1c:	6013      	str	r3, [r2, #0]
 8015e1e:	4a05      	ldr	r2, [pc, #20]	@ (8015e34 <vTaskSwitchContext+0x9c>)
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	6013      	str	r3, [r2, #0]
}
 8015e24:	bf00      	nop
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	20029d94 	.word	0x20029d94
 8015e30:	20029d80 	.word	0x20029d80
 8015e34:	20029d74 	.word	0x20029d74
 8015e38:	2002989c 	.word	0x2002989c
 8015e3c:	20029898 	.word	0x20029898

08015e40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d103      	bne.n	8015e58 <vTaskPlaceOnEventList+0x18>
 8015e50:	f001 f8d2 	bl	8016ff8 <ulSetInterruptMask>
 8015e54:	bf00      	nop
 8015e56:	e7fd      	b.n	8015e54 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015e58:	4b07      	ldr	r3, [pc, #28]	@ (8015e78 <vTaskPlaceOnEventList+0x38>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	3318      	adds	r3, #24
 8015e5e:	4619      	mov	r1, r3
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f7fe fce4 	bl	801482e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015e66:	2101      	movs	r1, #1
 8015e68:	6838      	ldr	r0, [r7, #0]
 8015e6a:	f000 fc01 	bl	8016670 <prvAddCurrentTaskToDelayedList>
}
 8015e6e:	bf00      	nop
 8015e70:	3708      	adds	r7, #8
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}
 8015e76:	bf00      	nop
 8015e78:	20029898 	.word	0x20029898

08015e7c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b086      	sub	sp, #24
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	60f8      	str	r0, [r7, #12]
 8015e84:	60b9      	str	r1, [r7, #8]
 8015e86:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d103      	bne.n	8015e96 <vTaskPlaceOnUnorderedEventList+0x1a>
 8015e8e:	f001 f8b3 	bl	8016ff8 <ulSetInterruptMask>
 8015e92:	bf00      	nop
 8015e94:	e7fd      	b.n	8015e92 <vTaskPlaceOnUnorderedEventList+0x16>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 8015e96:	4b1b      	ldr	r3, [pc, #108]	@ (8015f04 <vTaskPlaceOnUnorderedEventList+0x88>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d103      	bne.n	8015ea6 <vTaskPlaceOnUnorderedEventList+0x2a>
 8015e9e:	f001 f8ab 	bl	8016ff8 <ulSetInterruptMask>
 8015ea2:	bf00      	nop
 8015ea4:	e7fd      	b.n	8015ea2 <vTaskPlaceOnUnorderedEventList+0x26>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015ea6:	4b18      	ldr	r3, [pc, #96]	@ (8015f08 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	68ba      	ldr	r2, [r7, #8]
 8015eac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8015eb0:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	685b      	ldr	r3, [r3, #4]
 8015eb6:	617b      	str	r3, [r7, #20]
 8015eb8:	4b13      	ldr	r3, [pc, #76]	@ (8015f08 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	697a      	ldr	r2, [r7, #20]
 8015ebe:	61da      	str	r2, [r3, #28]
 8015ec0:	4b11      	ldr	r3, [pc, #68]	@ (8015f08 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	697a      	ldr	r2, [r7, #20]
 8015ec6:	6892      	ldr	r2, [r2, #8]
 8015ec8:	621a      	str	r2, [r3, #32]
 8015eca:	4b0f      	ldr	r3, [pc, #60]	@ (8015f08 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8015ecc:	681a      	ldr	r2, [r3, #0]
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	689b      	ldr	r3, [r3, #8]
 8015ed2:	3218      	adds	r2, #24
 8015ed4:	605a      	str	r2, [r3, #4]
 8015ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8015f08 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	f103 0218 	add.w	r2, r3, #24
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	609a      	str	r2, [r3, #8]
 8015ee2:	4b09      	ldr	r3, [pc, #36]	@ (8015f08 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	68fa      	ldr	r2, [r7, #12]
 8015ee8:	629a      	str	r2, [r3, #40]	@ 0x28
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	1c5a      	adds	r2, r3, #1
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f000 fbba 	bl	8016670 <prvAddCurrentTaskToDelayedList>
}
 8015efc:	bf00      	nop
 8015efe:	3718      	adds	r7, #24
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}
 8015f04:	20029d94 	.word	0x20029d94
 8015f08:	20029898 	.word	0x20029898

08015f0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b086      	sub	sp, #24
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d103      	bne.n	8015f26 <vTaskPlaceOnEventListRestricted+0x1a>
 8015f1e:	f001 f86b 	bl	8016ff8 <ulSetInterruptMask>
 8015f22:	bf00      	nop
 8015f24:	e7fd      	b.n	8015f22 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	685b      	ldr	r3, [r3, #4]
 8015f2a:	617b      	str	r3, [r7, #20]
 8015f2c:	4b15      	ldr	r3, [pc, #84]	@ (8015f84 <vTaskPlaceOnEventListRestricted+0x78>)
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	697a      	ldr	r2, [r7, #20]
 8015f32:	61da      	str	r2, [r3, #28]
 8015f34:	4b13      	ldr	r3, [pc, #76]	@ (8015f84 <vTaskPlaceOnEventListRestricted+0x78>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	697a      	ldr	r2, [r7, #20]
 8015f3a:	6892      	ldr	r2, [r2, #8]
 8015f3c:	621a      	str	r2, [r3, #32]
 8015f3e:	4b11      	ldr	r3, [pc, #68]	@ (8015f84 <vTaskPlaceOnEventListRestricted+0x78>)
 8015f40:	681a      	ldr	r2, [r3, #0]
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	689b      	ldr	r3, [r3, #8]
 8015f46:	3218      	adds	r2, #24
 8015f48:	605a      	str	r2, [r3, #4]
 8015f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8015f84 <vTaskPlaceOnEventListRestricted+0x78>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	f103 0218 	add.w	r2, r3, #24
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	609a      	str	r2, [r3, #8]
 8015f56:	4b0b      	ldr	r3, [pc, #44]	@ (8015f84 <vTaskPlaceOnEventListRestricted+0x78>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	68fa      	ldr	r2, [r7, #12]
 8015f5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	1c5a      	adds	r2, r3, #1
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d002      	beq.n	8015f74 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 8015f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f72:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015f74:	6879      	ldr	r1, [r7, #4]
 8015f76:	68b8      	ldr	r0, [r7, #8]
 8015f78:	f000 fb7a 	bl	8016670 <prvAddCurrentTaskToDelayedList>
    }
 8015f7c:	bf00      	nop
 8015f7e:	3718      	adds	r7, #24
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	20029898 	.word	0x20029898

08015f88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b088      	sub	sp, #32
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	68db      	ldr	r3, [r3, #12]
 8015f94:	68db      	ldr	r3, [r3, #12]
 8015f96:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8015f98:	69bb      	ldr	r3, [r7, #24]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d103      	bne.n	8015fa6 <xTaskRemoveFromEventList+0x1e>
 8015f9e:	f001 f82b 	bl	8016ff8 <ulSetInterruptMask>
 8015fa2:	bf00      	nop
 8015fa4:	e7fd      	b.n	8015fa2 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015faa:	617b      	str	r3, [r7, #20]
 8015fac:	69bb      	ldr	r3, [r7, #24]
 8015fae:	69db      	ldr	r3, [r3, #28]
 8015fb0:	69ba      	ldr	r2, [r7, #24]
 8015fb2:	6a12      	ldr	r2, [r2, #32]
 8015fb4:	609a      	str	r2, [r3, #8]
 8015fb6:	69bb      	ldr	r3, [r7, #24]
 8015fb8:	6a1b      	ldr	r3, [r3, #32]
 8015fba:	69ba      	ldr	r2, [r7, #24]
 8015fbc:	69d2      	ldr	r2, [r2, #28]
 8015fbe:	605a      	str	r2, [r3, #4]
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	685a      	ldr	r2, [r3, #4]
 8015fc4:	69bb      	ldr	r3, [r7, #24]
 8015fc6:	3318      	adds	r3, #24
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	d103      	bne.n	8015fd4 <xTaskRemoveFromEventList+0x4c>
 8015fcc:	69bb      	ldr	r3, [r7, #24]
 8015fce:	6a1a      	ldr	r2, [r3, #32]
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	605a      	str	r2, [r3, #4]
 8015fd4:	69bb      	ldr	r3, [r7, #24]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	1e5a      	subs	r2, r3, #1
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015fe4:	4b49      	ldr	r3, [pc, #292]	@ (801610c <xTaskRemoveFromEventList+0x184>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d15f      	bne.n	80160ac <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8015fec:	69bb      	ldr	r3, [r7, #24]
 8015fee:	695b      	ldr	r3, [r3, #20]
 8015ff0:	60fb      	str	r3, [r7, #12]
 8015ff2:	69bb      	ldr	r3, [r7, #24]
 8015ff4:	689b      	ldr	r3, [r3, #8]
 8015ff6:	69ba      	ldr	r2, [r7, #24]
 8015ff8:	68d2      	ldr	r2, [r2, #12]
 8015ffa:	609a      	str	r2, [r3, #8]
 8015ffc:	69bb      	ldr	r3, [r7, #24]
 8015ffe:	68db      	ldr	r3, [r3, #12]
 8016000:	69ba      	ldr	r2, [r7, #24]
 8016002:	6892      	ldr	r2, [r2, #8]
 8016004:	605a      	str	r2, [r3, #4]
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	685a      	ldr	r2, [r3, #4]
 801600a:	69bb      	ldr	r3, [r7, #24]
 801600c:	3304      	adds	r3, #4
 801600e:	429a      	cmp	r2, r3
 8016010:	d103      	bne.n	801601a <xTaskRemoveFromEventList+0x92>
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	68da      	ldr	r2, [r3, #12]
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	605a      	str	r2, [r3, #4]
 801601a:	69bb      	ldr	r3, [r7, #24]
 801601c:	2200      	movs	r2, #0
 801601e:	615a      	str	r2, [r3, #20]
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	1e5a      	subs	r2, r3, #1
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 801602a:	69bb      	ldr	r3, [r7, #24]
 801602c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801602e:	4b38      	ldr	r3, [pc, #224]	@ (8016110 <xTaskRemoveFromEventList+0x188>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	429a      	cmp	r2, r3
 8016034:	d903      	bls.n	801603e <xTaskRemoveFromEventList+0xb6>
 8016036:	69bb      	ldr	r3, [r7, #24]
 8016038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801603a:	4a35      	ldr	r2, [pc, #212]	@ (8016110 <xTaskRemoveFromEventList+0x188>)
 801603c:	6013      	str	r3, [r2, #0]
 801603e:	69bb      	ldr	r3, [r7, #24]
 8016040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016042:	4934      	ldr	r1, [pc, #208]	@ (8016114 <xTaskRemoveFromEventList+0x18c>)
 8016044:	4613      	mov	r3, r2
 8016046:	009b      	lsls	r3, r3, #2
 8016048:	4413      	add	r3, r2
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	440b      	add	r3, r1
 801604e:	3304      	adds	r3, #4
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	60bb      	str	r3, [r7, #8]
 8016054:	69bb      	ldr	r3, [r7, #24]
 8016056:	68ba      	ldr	r2, [r7, #8]
 8016058:	609a      	str	r2, [r3, #8]
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	689a      	ldr	r2, [r3, #8]
 801605e:	69bb      	ldr	r3, [r7, #24]
 8016060:	60da      	str	r2, [r3, #12]
 8016062:	68bb      	ldr	r3, [r7, #8]
 8016064:	689b      	ldr	r3, [r3, #8]
 8016066:	69ba      	ldr	r2, [r7, #24]
 8016068:	3204      	adds	r2, #4
 801606a:	605a      	str	r2, [r3, #4]
 801606c:	69bb      	ldr	r3, [r7, #24]
 801606e:	1d1a      	adds	r2, r3, #4
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	609a      	str	r2, [r3, #8]
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016078:	4613      	mov	r3, r2
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	4413      	add	r3, r2
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	4a24      	ldr	r2, [pc, #144]	@ (8016114 <xTaskRemoveFromEventList+0x18c>)
 8016082:	441a      	add	r2, r3
 8016084:	69bb      	ldr	r3, [r7, #24]
 8016086:	615a      	str	r2, [r3, #20]
 8016088:	69bb      	ldr	r3, [r7, #24]
 801608a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801608c:	4921      	ldr	r1, [pc, #132]	@ (8016114 <xTaskRemoveFromEventList+0x18c>)
 801608e:	4613      	mov	r3, r2
 8016090:	009b      	lsls	r3, r3, #2
 8016092:	4413      	add	r3, r2
 8016094:	009b      	lsls	r3, r3, #2
 8016096:	440b      	add	r3, r1
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	1c59      	adds	r1, r3, #1
 801609c:	481d      	ldr	r0, [pc, #116]	@ (8016114 <xTaskRemoveFromEventList+0x18c>)
 801609e:	4613      	mov	r3, r2
 80160a0:	009b      	lsls	r3, r3, #2
 80160a2:	4413      	add	r3, r2
 80160a4:	009b      	lsls	r3, r3, #2
 80160a6:	4403      	add	r3, r0
 80160a8:	6019      	str	r1, [r3, #0]
 80160aa:	e01b      	b.n	80160e4 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80160ac:	4b1a      	ldr	r3, [pc, #104]	@ (8016118 <xTaskRemoveFromEventList+0x190>)
 80160ae:	685b      	ldr	r3, [r3, #4]
 80160b0:	613b      	str	r3, [r7, #16]
 80160b2:	69bb      	ldr	r3, [r7, #24]
 80160b4:	693a      	ldr	r2, [r7, #16]
 80160b6:	61da      	str	r2, [r3, #28]
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	689a      	ldr	r2, [r3, #8]
 80160bc:	69bb      	ldr	r3, [r7, #24]
 80160be:	621a      	str	r2, [r3, #32]
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	689b      	ldr	r3, [r3, #8]
 80160c4:	69ba      	ldr	r2, [r7, #24]
 80160c6:	3218      	adds	r2, #24
 80160c8:	605a      	str	r2, [r3, #4]
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	f103 0218 	add.w	r2, r3, #24
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	609a      	str	r2, [r3, #8]
 80160d4:	69bb      	ldr	r3, [r7, #24]
 80160d6:	4a10      	ldr	r2, [pc, #64]	@ (8016118 <xTaskRemoveFromEventList+0x190>)
 80160d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80160da:	4b0f      	ldr	r3, [pc, #60]	@ (8016118 <xTaskRemoveFromEventList+0x190>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	3301      	adds	r3, #1
 80160e0:	4a0d      	ldr	r2, [pc, #52]	@ (8016118 <xTaskRemoveFromEventList+0x190>)
 80160e2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80160e4:	69bb      	ldr	r3, [r7, #24]
 80160e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160e8:	4b0c      	ldr	r3, [pc, #48]	@ (801611c <xTaskRemoveFromEventList+0x194>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160ee:	429a      	cmp	r2, r3
 80160f0:	d905      	bls.n	80160fe <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80160f2:	2301      	movs	r3, #1
 80160f4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80160f6:	4b0a      	ldr	r3, [pc, #40]	@ (8016120 <xTaskRemoveFromEventList+0x198>)
 80160f8:	2201      	movs	r2, #1
 80160fa:	601a      	str	r2, [r3, #0]
 80160fc:	e001      	b.n	8016102 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 80160fe:	2300      	movs	r3, #0
 8016100:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8016102:	69fb      	ldr	r3, [r7, #28]
}
 8016104:	4618      	mov	r0, r3
 8016106:	3720      	adds	r7, #32
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}
 801610c:	20029d94 	.word	0x20029d94
 8016110:	20029d74 	.word	0x20029d74
 8016114:	2002989c 	.word	0x2002989c
 8016118:	20029d2c 	.word	0x20029d2c
 801611c:	20029898 	.word	0x20029898
 8016120:	20029d80 	.word	0x20029d80

08016124 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b086      	sub	sp, #24
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 801612e:	4b51      	ldr	r3, [pc, #324]	@ (8016274 <vTaskRemoveFromUnorderedEventList+0x150>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d103      	bne.n	801613e <vTaskRemoveFromUnorderedEventList+0x1a>
 8016136:	f000 ff5f 	bl	8016ff8 <ulSetInterruptMask>
 801613a:	bf00      	nop
 801613c:	e7fd      	b.n	801613a <vTaskRemoveFromUnorderedEventList+0x16>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	68db      	ldr	r3, [r3, #12]
 801614c:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 801614e:	697b      	ldr	r3, [r7, #20]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d103      	bne.n	801615c <vTaskRemoveFromUnorderedEventList+0x38>
 8016154:	f000 ff50 	bl	8016ff8 <ulSetInterruptMask>
 8016158:	bf00      	nop
 801615a:	e7fd      	b.n	8016158 <vTaskRemoveFromUnorderedEventList+0x34>
    listREMOVE_ITEM( pxEventListItem );
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	691b      	ldr	r3, [r3, #16]
 8016160:	613b      	str	r3, [r7, #16]
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	687a      	ldr	r2, [r7, #4]
 8016168:	6892      	ldr	r2, [r2, #8]
 801616a:	609a      	str	r2, [r3, #8]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	687a      	ldr	r2, [r7, #4]
 8016172:	6852      	ldr	r2, [r2, #4]
 8016174:	605a      	str	r2, [r3, #4]
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	687a      	ldr	r2, [r7, #4]
 801617c:	429a      	cmp	r2, r3
 801617e:	d103      	bne.n	8016188 <vTaskRemoveFromUnorderedEventList+0x64>
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	689a      	ldr	r2, [r3, #8]
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	605a      	str	r2, [r3, #4]
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2200      	movs	r2, #0
 801618c:	611a      	str	r2, [r3, #16]
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	1e5a      	subs	r2, r3, #1
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	695b      	ldr	r3, [r3, #20]
 801619c:	60fb      	str	r3, [r7, #12]
 801619e:	697b      	ldr	r3, [r7, #20]
 80161a0:	689b      	ldr	r3, [r3, #8]
 80161a2:	697a      	ldr	r2, [r7, #20]
 80161a4:	68d2      	ldr	r2, [r2, #12]
 80161a6:	609a      	str	r2, [r3, #8]
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	68db      	ldr	r3, [r3, #12]
 80161ac:	697a      	ldr	r2, [r7, #20]
 80161ae:	6892      	ldr	r2, [r2, #8]
 80161b0:	605a      	str	r2, [r3, #4]
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	685a      	ldr	r2, [r3, #4]
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	3304      	adds	r3, #4
 80161ba:	429a      	cmp	r2, r3
 80161bc:	d103      	bne.n	80161c6 <vTaskRemoveFromUnorderedEventList+0xa2>
 80161be:	697b      	ldr	r3, [r7, #20]
 80161c0:	68da      	ldr	r2, [r3, #12]
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	605a      	str	r2, [r3, #4]
 80161c6:	697b      	ldr	r3, [r7, #20]
 80161c8:	2200      	movs	r2, #0
 80161ca:	615a      	str	r2, [r3, #20]
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	1e5a      	subs	r2, r3, #1
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 80161d6:	697b      	ldr	r3, [r7, #20]
 80161d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161da:	4b27      	ldr	r3, [pc, #156]	@ (8016278 <vTaskRemoveFromUnorderedEventList+0x154>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	429a      	cmp	r2, r3
 80161e0:	d903      	bls.n	80161ea <vTaskRemoveFromUnorderedEventList+0xc6>
 80161e2:	697b      	ldr	r3, [r7, #20]
 80161e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161e6:	4a24      	ldr	r2, [pc, #144]	@ (8016278 <vTaskRemoveFromUnorderedEventList+0x154>)
 80161e8:	6013      	str	r3, [r2, #0]
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161ee:	4923      	ldr	r1, [pc, #140]	@ (801627c <vTaskRemoveFromUnorderedEventList+0x158>)
 80161f0:	4613      	mov	r3, r2
 80161f2:	009b      	lsls	r3, r3, #2
 80161f4:	4413      	add	r3, r2
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	440b      	add	r3, r1
 80161fa:	3304      	adds	r3, #4
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	60bb      	str	r3, [r7, #8]
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	68ba      	ldr	r2, [r7, #8]
 8016204:	609a      	str	r2, [r3, #8]
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	689a      	ldr	r2, [r3, #8]
 801620a:	697b      	ldr	r3, [r7, #20]
 801620c:	60da      	str	r2, [r3, #12]
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	689b      	ldr	r3, [r3, #8]
 8016212:	697a      	ldr	r2, [r7, #20]
 8016214:	3204      	adds	r2, #4
 8016216:	605a      	str	r2, [r3, #4]
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	1d1a      	adds	r2, r3, #4
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	609a      	str	r2, [r3, #8]
 8016220:	697b      	ldr	r3, [r7, #20]
 8016222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016224:	4613      	mov	r3, r2
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	4413      	add	r3, r2
 801622a:	009b      	lsls	r3, r3, #2
 801622c:	4a13      	ldr	r2, [pc, #76]	@ (801627c <vTaskRemoveFromUnorderedEventList+0x158>)
 801622e:	441a      	add	r2, r3
 8016230:	697b      	ldr	r3, [r7, #20]
 8016232:	615a      	str	r2, [r3, #20]
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016238:	4910      	ldr	r1, [pc, #64]	@ (801627c <vTaskRemoveFromUnorderedEventList+0x158>)
 801623a:	4613      	mov	r3, r2
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	4413      	add	r3, r2
 8016240:	009b      	lsls	r3, r3, #2
 8016242:	440b      	add	r3, r1
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	1c59      	adds	r1, r3, #1
 8016248:	480c      	ldr	r0, [pc, #48]	@ (801627c <vTaskRemoveFromUnorderedEventList+0x158>)
 801624a:	4613      	mov	r3, r2
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	4413      	add	r3, r2
 8016250:	009b      	lsls	r3, r3, #2
 8016252:	4403      	add	r3, r0
 8016254:	6019      	str	r1, [r3, #0]

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016256:	697b      	ldr	r3, [r7, #20]
 8016258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801625a:	4b09      	ldr	r3, [pc, #36]	@ (8016280 <vTaskRemoveFromUnorderedEventList+0x15c>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016260:	429a      	cmp	r2, r3
 8016262:	d902      	bls.n	801626a <vTaskRemoveFromUnorderedEventList+0x146>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8016264:	4b07      	ldr	r3, [pc, #28]	@ (8016284 <vTaskRemoveFromUnorderedEventList+0x160>)
 8016266:	2201      	movs	r2, #1
 8016268:	601a      	str	r2, [r3, #0]
    }
}
 801626a:	bf00      	nop
 801626c:	3718      	adds	r7, #24
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	20029d94 	.word	0x20029d94
 8016278:	20029d74 	.word	0x20029d74
 801627c:	2002989c 	.word	0x2002989c
 8016280:	20029898 	.word	0x20029898
 8016284:	20029d80 	.word	0x20029d80

08016288 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016288:	b480      	push	{r7}
 801628a:	b083      	sub	sp, #12
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016290:	4b06      	ldr	r3, [pc, #24]	@ (80162ac <vTaskInternalSetTimeOutState+0x24>)
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8016298:	4b05      	ldr	r3, [pc, #20]	@ (80162b0 <vTaskInternalSetTimeOutState+0x28>)
 801629a:	681a      	ldr	r2, [r3, #0]
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	605a      	str	r2, [r3, #4]
}
 80162a0:	bf00      	nop
 80162a2:	370c      	adds	r7, #12
 80162a4:	46bd      	mov	sp, r7
 80162a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162aa:	4770      	bx	lr
 80162ac:	20029d84 	.word	0x20029d84
 80162b0:	20029d70 	.word	0x20029d70

080162b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
 80162bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d103      	bne.n	80162cc <xTaskCheckForTimeOut+0x18>
 80162c4:	f000 fe98 	bl	8016ff8 <ulSetInterruptMask>
 80162c8:	bf00      	nop
 80162ca:	e7fd      	b.n	80162c8 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d103      	bne.n	80162da <xTaskCheckForTimeOut+0x26>
 80162d2:	f000 fe91 	bl	8016ff8 <ulSetInterruptMask>
 80162d6:	bf00      	nop
 80162d8:	e7fd      	b.n	80162d6 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 80162da:	f000 fd4f 	bl	8016d7c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80162de:	4b1f      	ldr	r3, [pc, #124]	@ (801635c <xTaskCheckForTimeOut+0xa8>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	693a      	ldr	r2, [r7, #16]
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162f6:	d102      	bne.n	80162fe <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80162f8:	2300      	movs	r3, #0
 80162fa:	617b      	str	r3, [r7, #20]
 80162fc:	e026      	b.n	801634c <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681a      	ldr	r2, [r3, #0]
 8016302:	4b17      	ldr	r3, [pc, #92]	@ (8016360 <xTaskCheckForTimeOut+0xac>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	429a      	cmp	r2, r3
 8016308:	d00a      	beq.n	8016320 <xTaskCheckForTimeOut+0x6c>
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	693a      	ldr	r2, [r7, #16]
 8016310:	429a      	cmp	r2, r3
 8016312:	d305      	bcc.n	8016320 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8016314:	2301      	movs	r3, #1
 8016316:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	2200      	movs	r2, #0
 801631c:	601a      	str	r2, [r3, #0]
 801631e:	e015      	b.n	801634c <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016320:	683b      	ldr	r3, [r7, #0]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	68fa      	ldr	r2, [r7, #12]
 8016326:	429a      	cmp	r2, r3
 8016328:	d20b      	bcs.n	8016342 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	1ad2      	subs	r2, r2, r3
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f7ff ffa6 	bl	8016288 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 801633c:	2300      	movs	r3, #0
 801633e:	617b      	str	r3, [r7, #20]
 8016340:	e004      	b.n	801634c <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	2200      	movs	r2, #0
 8016346:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8016348:	2301      	movs	r3, #1
 801634a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 801634c:	f000 fd28 	bl	8016da0 <vPortExitCritical>

    return xReturn;
 8016350:	697b      	ldr	r3, [r7, #20]
}
 8016352:	4618      	mov	r0, r3
 8016354:	3718      	adds	r7, #24
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}
 801635a:	bf00      	nop
 801635c:	20029d70 	.word	0x20029d70
 8016360:	20029d84 	.word	0x20029d84

08016364 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016364:	b480      	push	{r7}
 8016366:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8016368:	4b03      	ldr	r3, [pc, #12]	@ (8016378 <vTaskMissedYield+0x14>)
 801636a:	2201      	movs	r2, #1
 801636c:	601a      	str	r2, [r3, #0]
}
 801636e:	bf00      	nop
 8016370:	46bd      	mov	sp, r7
 8016372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016376:	4770      	bx	lr
 8016378:	20029d80 	.word	0x20029d80

0801637c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b082      	sub	sp, #8
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8016384:	f000 f844 	bl	8016410 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8016388:	f000 fce6 	bl	8016d58 <vPortYield>
        prvCheckTasksWaitingTermination();
 801638c:	bf00      	nop
 801638e:	e7f9      	b.n	8016384 <prvIdleTask+0x8>

08016390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016396:	2300      	movs	r3, #0
 8016398:	607b      	str	r3, [r7, #4]
 801639a:	e00c      	b.n	80163b6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801639c:	687a      	ldr	r2, [r7, #4]
 801639e:	4613      	mov	r3, r2
 80163a0:	009b      	lsls	r3, r3, #2
 80163a2:	4413      	add	r3, r2
 80163a4:	009b      	lsls	r3, r3, #2
 80163a6:	4a12      	ldr	r2, [pc, #72]	@ (80163f0 <prvInitialiseTaskLists+0x60>)
 80163a8:	4413      	add	r3, r2
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7fe f9ee 	bl	801478c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	3301      	adds	r3, #1
 80163b4:	607b      	str	r3, [r7, #4]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	2b37      	cmp	r3, #55	@ 0x37
 80163ba:	d9ef      	bls.n	801639c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80163bc:	480d      	ldr	r0, [pc, #52]	@ (80163f4 <prvInitialiseTaskLists+0x64>)
 80163be:	f7fe f9e5 	bl	801478c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80163c2:	480d      	ldr	r0, [pc, #52]	@ (80163f8 <prvInitialiseTaskLists+0x68>)
 80163c4:	f7fe f9e2 	bl	801478c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80163c8:	480c      	ldr	r0, [pc, #48]	@ (80163fc <prvInitialiseTaskLists+0x6c>)
 80163ca:	f7fe f9df 	bl	801478c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80163ce:	480c      	ldr	r0, [pc, #48]	@ (8016400 <prvInitialiseTaskLists+0x70>)
 80163d0:	f7fe f9dc 	bl	801478c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80163d4:	480b      	ldr	r0, [pc, #44]	@ (8016404 <prvInitialiseTaskLists+0x74>)
 80163d6:	f7fe f9d9 	bl	801478c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80163da:	4b0b      	ldr	r3, [pc, #44]	@ (8016408 <prvInitialiseTaskLists+0x78>)
 80163dc:	4a05      	ldr	r2, [pc, #20]	@ (80163f4 <prvInitialiseTaskLists+0x64>)
 80163de:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80163e0:	4b0a      	ldr	r3, [pc, #40]	@ (801640c <prvInitialiseTaskLists+0x7c>)
 80163e2:	4a05      	ldr	r2, [pc, #20]	@ (80163f8 <prvInitialiseTaskLists+0x68>)
 80163e4:	601a      	str	r2, [r3, #0]
}
 80163e6:	bf00      	nop
 80163e8:	3708      	adds	r7, #8
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bd80      	pop	{r7, pc}
 80163ee:	bf00      	nop
 80163f0:	2002989c 	.word	0x2002989c
 80163f4:	20029cfc 	.word	0x20029cfc
 80163f8:	20029d10 	.word	0x20029d10
 80163fc:	20029d2c 	.word	0x20029d2c
 8016400:	20029d40 	.word	0x20029d40
 8016404:	20029d58 	.word	0x20029d58
 8016408:	20029d24 	.word	0x20029d24
 801640c:	20029d28 	.word	0x20029d28

08016410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016416:	e019      	b.n	801644c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8016418:	f000 fcb0 	bl	8016d7c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801641c:	4b10      	ldr	r3, [pc, #64]	@ (8016460 <prvCheckTasksWaitingTermination+0x50>)
 801641e:	68db      	ldr	r3, [r3, #12]
 8016420:	68db      	ldr	r3, [r3, #12]
 8016422:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	3304      	adds	r3, #4
 8016428:	4618      	mov	r0, r3
 801642a:	f7fe fa39 	bl	80148a0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 801642e:	4b0d      	ldr	r3, [pc, #52]	@ (8016464 <prvCheckTasksWaitingTermination+0x54>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	3b01      	subs	r3, #1
 8016434:	4a0b      	ldr	r2, [pc, #44]	@ (8016464 <prvCheckTasksWaitingTermination+0x54>)
 8016436:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8016438:	4b0b      	ldr	r3, [pc, #44]	@ (8016468 <prvCheckTasksWaitingTermination+0x58>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	3b01      	subs	r3, #1
 801643e:	4a0a      	ldr	r2, [pc, #40]	@ (8016468 <prvCheckTasksWaitingTermination+0x58>)
 8016440:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8016442:	f000 fcad 	bl	8016da0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f000 f810 	bl	801646c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801644c:	4b06      	ldr	r3, [pc, #24]	@ (8016468 <prvCheckTasksWaitingTermination+0x58>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d1e1      	bne.n	8016418 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8016454:	bf00      	nop
 8016456:	bf00      	nop
 8016458:	3708      	adds	r7, #8
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	20029d40 	.word	0x20029d40
 8016464:	20029d6c 	.word	0x20029d6c
 8016468:	20029d54 	.word	0x20029d54

0801646c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 801647a:	2b00      	cmp	r3, #0
 801647c:	d108      	bne.n	8016490 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016482:	4618      	mov	r0, r3
 8016484:	f000 fec4 	bl	8017210 <vPortFree>
                vPortFree( pxTCB );
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f000 fec1 	bl	8017210 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 801648e:	e011      	b.n	80164b4 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8016496:	2b01      	cmp	r3, #1
 8016498:	d103      	bne.n	80164a2 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f000 feb8 	bl	8017210 <vPortFree>
    }
 80164a0:	e008      	b.n	80164b4 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80164a8:	2b02      	cmp	r3, #2
 80164aa:	d003      	beq.n	80164b4 <prvDeleteTCB+0x48>
 80164ac:	f000 fda4 	bl	8016ff8 <ulSetInterruptMask>
 80164b0:	bf00      	nop
 80164b2:	e7fd      	b.n	80164b0 <prvDeleteTCB+0x44>
    }
 80164b4:	bf00      	nop
 80164b6:	3708      	adds	r7, #8
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}

080164bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80164bc:	b480      	push	{r7}
 80164be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80164c0:	4b0a      	ldr	r3, [pc, #40]	@ (80164ec <prvResetNextTaskUnblockTime+0x30>)
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d104      	bne.n	80164d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80164ca:	4b09      	ldr	r3, [pc, #36]	@ (80164f0 <prvResetNextTaskUnblockTime+0x34>)
 80164cc:	f04f 32ff 	mov.w	r2, #4294967295
 80164d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80164d2:	e005      	b.n	80164e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80164d4:	4b05      	ldr	r3, [pc, #20]	@ (80164ec <prvResetNextTaskUnblockTime+0x30>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	68db      	ldr	r3, [r3, #12]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	4a04      	ldr	r2, [pc, #16]	@ (80164f0 <prvResetNextTaskUnblockTime+0x34>)
 80164de:	6013      	str	r3, [r2, #0]
}
 80164e0:	bf00      	nop
 80164e2:	46bd      	mov	sp, r7
 80164e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e8:	4770      	bx	lr
 80164ea:	bf00      	nop
 80164ec:	20029d24 	.word	0x20029d24
 80164f0:	20029d8c 	.word	0x20029d8c

080164f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80164f4:	b480      	push	{r7}
 80164f6:	b083      	sub	sp, #12
 80164f8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80164fa:	4b0b      	ldr	r3, [pc, #44]	@ (8016528 <xTaskGetSchedulerState+0x34>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d102      	bne.n	8016508 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8016502:	2301      	movs	r3, #1
 8016504:	607b      	str	r3, [r7, #4]
 8016506:	e008      	b.n	801651a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016508:	4b08      	ldr	r3, [pc, #32]	@ (801652c <xTaskGetSchedulerState+0x38>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d102      	bne.n	8016516 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8016510:	2302      	movs	r3, #2
 8016512:	607b      	str	r3, [r7, #4]
 8016514:	e001      	b.n	801651a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8016516:	2300      	movs	r3, #0
 8016518:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 801651a:	687b      	ldr	r3, [r7, #4]
    }
 801651c:	4618      	mov	r0, r3
 801651e:	370c      	adds	r7, #12
 8016520:	46bd      	mov	sp, r7
 8016522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016526:	4770      	bx	lr
 8016528:	20029d78 	.word	0x20029d78
 801652c:	20029d94 	.word	0x20029d94

08016530 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8016530:	b580      	push	{r7, lr}
 8016532:	b086      	sub	sp, #24
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 801653c:	2300      	movs	r3, #0
 801653e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d070      	beq.n	8016628 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8016546:	4b3b      	ldr	r3, [pc, #236]	@ (8016634 <xTaskPriorityDisinherit+0x104>)
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	693a      	ldr	r2, [r7, #16]
 801654c:	429a      	cmp	r2, r3
 801654e:	d003      	beq.n	8016558 <xTaskPriorityDisinherit+0x28>
 8016550:	f000 fd52 	bl	8016ff8 <ulSetInterruptMask>
 8016554:	bf00      	nop
 8016556:	e7fd      	b.n	8016554 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8016558:	693b      	ldr	r3, [r7, #16]
 801655a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801655c:	2b00      	cmp	r3, #0
 801655e:	d103      	bne.n	8016568 <xTaskPriorityDisinherit+0x38>
 8016560:	f000 fd4a 	bl	8016ff8 <ulSetInterruptMask>
 8016564:	bf00      	nop
 8016566:	e7fd      	b.n	8016564 <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 8016568:	693b      	ldr	r3, [r7, #16]
 801656a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801656c:	1e5a      	subs	r2, r3, #1
 801656e:	693b      	ldr	r3, [r7, #16]
 8016570:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801657a:	429a      	cmp	r2, r3
 801657c:	d054      	beq.n	8016628 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016582:	2b00      	cmp	r3, #0
 8016584:	d150      	bne.n	8016628 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	3304      	adds	r3, #4
 801658a:	4618      	mov	r0, r3
 801658c:	f7fe f988 	bl	80148a0 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016590:	693b      	ldr	r3, [r7, #16]
 8016592:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016594:	693b      	ldr	r3, [r7, #16]
 8016596:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016598:	693b      	ldr	r3, [r7, #16]
 801659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801659c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80165a0:	693b      	ldr	r3, [r7, #16]
 80165a2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80165a4:	693b      	ldr	r3, [r7, #16]
 80165a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165a8:	4b23      	ldr	r3, [pc, #140]	@ (8016638 <xTaskPriorityDisinherit+0x108>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d903      	bls.n	80165b8 <xTaskPriorityDisinherit+0x88>
 80165b0:	693b      	ldr	r3, [r7, #16]
 80165b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165b4:	4a20      	ldr	r2, [pc, #128]	@ (8016638 <xTaskPriorityDisinherit+0x108>)
 80165b6:	6013      	str	r3, [r2, #0]
 80165b8:	693b      	ldr	r3, [r7, #16]
 80165ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165bc:	491f      	ldr	r1, [pc, #124]	@ (801663c <xTaskPriorityDisinherit+0x10c>)
 80165be:	4613      	mov	r3, r2
 80165c0:	009b      	lsls	r3, r3, #2
 80165c2:	4413      	add	r3, r2
 80165c4:	009b      	lsls	r3, r3, #2
 80165c6:	440b      	add	r3, r1
 80165c8:	3304      	adds	r3, #4
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	60fb      	str	r3, [r7, #12]
 80165ce:	693b      	ldr	r3, [r7, #16]
 80165d0:	68fa      	ldr	r2, [r7, #12]
 80165d2:	609a      	str	r2, [r3, #8]
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	689a      	ldr	r2, [r3, #8]
 80165d8:	693b      	ldr	r3, [r7, #16]
 80165da:	60da      	str	r2, [r3, #12]
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	689b      	ldr	r3, [r3, #8]
 80165e0:	693a      	ldr	r2, [r7, #16]
 80165e2:	3204      	adds	r2, #4
 80165e4:	605a      	str	r2, [r3, #4]
 80165e6:	693b      	ldr	r3, [r7, #16]
 80165e8:	1d1a      	adds	r2, r3, #4
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	609a      	str	r2, [r3, #8]
 80165ee:	693b      	ldr	r3, [r7, #16]
 80165f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165f2:	4613      	mov	r3, r2
 80165f4:	009b      	lsls	r3, r3, #2
 80165f6:	4413      	add	r3, r2
 80165f8:	009b      	lsls	r3, r3, #2
 80165fa:	4a10      	ldr	r2, [pc, #64]	@ (801663c <xTaskPriorityDisinherit+0x10c>)
 80165fc:	441a      	add	r2, r3
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	615a      	str	r2, [r3, #20]
 8016602:	693b      	ldr	r3, [r7, #16]
 8016604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016606:	490d      	ldr	r1, [pc, #52]	@ (801663c <xTaskPriorityDisinherit+0x10c>)
 8016608:	4613      	mov	r3, r2
 801660a:	009b      	lsls	r3, r3, #2
 801660c:	4413      	add	r3, r2
 801660e:	009b      	lsls	r3, r3, #2
 8016610:	440b      	add	r3, r1
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	1c59      	adds	r1, r3, #1
 8016616:	4809      	ldr	r0, [pc, #36]	@ (801663c <xTaskPriorityDisinherit+0x10c>)
 8016618:	4613      	mov	r3, r2
 801661a:	009b      	lsls	r3, r3, #2
 801661c:	4413      	add	r3, r2
 801661e:	009b      	lsls	r3, r3, #2
 8016620:	4403      	add	r3, r0
 8016622:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8016624:	2301      	movs	r3, #1
 8016626:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8016628:	697b      	ldr	r3, [r7, #20]
    }
 801662a:	4618      	mov	r0, r3
 801662c:	3718      	adds	r7, #24
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	20029898 	.word	0x20029898
 8016638:	20029d74 	.word	0x20029d74
 801663c:	2002989c 	.word	0x2002989c

08016640 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8016640:	b480      	push	{r7}
 8016642:	b083      	sub	sp, #12
 8016644:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8016646:	4b09      	ldr	r3, [pc, #36]	@ (801666c <uxTaskResetEventItemValue+0x2c>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	699b      	ldr	r3, [r3, #24]
 801664c:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801664e:	4b07      	ldr	r3, [pc, #28]	@ (801666c <uxTaskResetEventItemValue+0x2c>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016654:	4b05      	ldr	r3, [pc, #20]	@ (801666c <uxTaskResetEventItemValue+0x2c>)
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801665c:	619a      	str	r2, [r3, #24]

    return uxReturn;
 801665e:	687b      	ldr	r3, [r7, #4]
}
 8016660:	4618      	mov	r0, r3
 8016662:	370c      	adds	r7, #12
 8016664:	46bd      	mov	sp, r7
 8016666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666a:	4770      	bx	lr
 801666c:	20029898 	.word	0x20029898

08016670 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b086      	sub	sp, #24
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
 8016678:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 801667a:	4b2e      	ldr	r3, [pc, #184]	@ (8016734 <prvAddCurrentTaskToDelayedList+0xc4>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016680:	4b2d      	ldr	r3, [pc, #180]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	3304      	adds	r3, #4
 8016686:	4618      	mov	r0, r3
 8016688:	f7fe f90a 	bl	80148a0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016692:	d124      	bne.n	80166de <prvAddCurrentTaskToDelayedList+0x6e>
 8016694:	683b      	ldr	r3, [r7, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d021      	beq.n	80166de <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801669a:	4b28      	ldr	r3, [pc, #160]	@ (801673c <prvAddCurrentTaskToDelayedList+0xcc>)
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	613b      	str	r3, [r7, #16]
 80166a0:	4b25      	ldr	r3, [pc, #148]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	693a      	ldr	r2, [r7, #16]
 80166a6:	609a      	str	r2, [r3, #8]
 80166a8:	4b23      	ldr	r3, [pc, #140]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	693a      	ldr	r2, [r7, #16]
 80166ae:	6892      	ldr	r2, [r2, #8]
 80166b0:	60da      	str	r2, [r3, #12]
 80166b2:	4b21      	ldr	r3, [pc, #132]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 80166b4:	681a      	ldr	r2, [r3, #0]
 80166b6:	693b      	ldr	r3, [r7, #16]
 80166b8:	689b      	ldr	r3, [r3, #8]
 80166ba:	3204      	adds	r2, #4
 80166bc:	605a      	str	r2, [r3, #4]
 80166be:	4b1e      	ldr	r3, [pc, #120]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	1d1a      	adds	r2, r3, #4
 80166c4:	693b      	ldr	r3, [r7, #16]
 80166c6:	609a      	str	r2, [r3, #8]
 80166c8:	4b1b      	ldr	r3, [pc, #108]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	4a1b      	ldr	r2, [pc, #108]	@ (801673c <prvAddCurrentTaskToDelayedList+0xcc>)
 80166ce:	615a      	str	r2, [r3, #20]
 80166d0:	4b1a      	ldr	r3, [pc, #104]	@ (801673c <prvAddCurrentTaskToDelayedList+0xcc>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	3301      	adds	r3, #1
 80166d6:	4a19      	ldr	r2, [pc, #100]	@ (801673c <prvAddCurrentTaskToDelayedList+0xcc>)
 80166d8:	6013      	str	r3, [r2, #0]
 80166da:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80166dc:	e026      	b.n	801672c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80166de:	697a      	ldr	r2, [r7, #20]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	4413      	add	r3, r2
 80166e4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80166e6:	4b14      	ldr	r3, [pc, #80]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	68fa      	ldr	r2, [r7, #12]
 80166ec:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80166ee:	68fa      	ldr	r2, [r7, #12]
 80166f0:	697b      	ldr	r3, [r7, #20]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d209      	bcs.n	801670a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80166f6:	4b12      	ldr	r3, [pc, #72]	@ (8016740 <prvAddCurrentTaskToDelayedList+0xd0>)
 80166f8:	681a      	ldr	r2, [r3, #0]
 80166fa:	4b0f      	ldr	r3, [pc, #60]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	3304      	adds	r3, #4
 8016700:	4619      	mov	r1, r3
 8016702:	4610      	mov	r0, r2
 8016704:	f7fe f893 	bl	801482e <vListInsert>
}
 8016708:	e010      	b.n	801672c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801670a:	4b0e      	ldr	r3, [pc, #56]	@ (8016744 <prvAddCurrentTaskToDelayedList+0xd4>)
 801670c:	681a      	ldr	r2, [r3, #0]
 801670e:	4b0a      	ldr	r3, [pc, #40]	@ (8016738 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	3304      	adds	r3, #4
 8016714:	4619      	mov	r1, r3
 8016716:	4610      	mov	r0, r2
 8016718:	f7fe f889 	bl	801482e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 801671c:	4b0a      	ldr	r3, [pc, #40]	@ (8016748 <prvAddCurrentTaskToDelayedList+0xd8>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	68fa      	ldr	r2, [r7, #12]
 8016722:	429a      	cmp	r2, r3
 8016724:	d202      	bcs.n	801672c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8016726:	4a08      	ldr	r2, [pc, #32]	@ (8016748 <prvAddCurrentTaskToDelayedList+0xd8>)
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	6013      	str	r3, [r2, #0]
}
 801672c:	bf00      	nop
 801672e:	3718      	adds	r7, #24
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}
 8016734:	20029d70 	.word	0x20029d70
 8016738:	20029898 	.word	0x20029898
 801673c:	20029d58 	.word	0x20029d58
 8016740:	20029d28 	.word	0x20029d28
 8016744:	20029d24 	.word	0x20029d24
 8016748:	20029d8c 	.word	0x20029d8c

0801674c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 801674c:	b580      	push	{r7, lr}
 801674e:	b088      	sub	sp, #32
 8016750:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8016752:	2300      	movs	r3, #0
 8016754:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8016756:	f000 fa5f 	bl	8016c18 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 801675a:	4b18      	ldr	r3, [pc, #96]	@ (80167bc <xTimerCreateTimerTask+0x70>)
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d020      	beq.n	80167a4 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8016762:	2300      	movs	r3, #0
 8016764:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8016766:	2300      	movs	r3, #0
 8016768:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801676a:	463a      	mov	r2, r7
 801676c:	1d39      	adds	r1, r7, #4
 801676e:	f107 0308 	add.w	r3, r7, #8
 8016772:	4618      	mov	r0, r3
 8016774:	f7fd fde6 	bl	8014344 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8016778:	6839      	ldr	r1, [r7, #0]
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	68ba      	ldr	r2, [r7, #8]
 801677e:	9202      	str	r2, [sp, #8]
 8016780:	9301      	str	r3, [sp, #4]
 8016782:	2302      	movs	r3, #2
 8016784:	9300      	str	r3, [sp, #0]
 8016786:	2300      	movs	r3, #0
 8016788:	460a      	mov	r2, r1
 801678a:	490d      	ldr	r1, [pc, #52]	@ (80167c0 <xTimerCreateTimerTask+0x74>)
 801678c:	480d      	ldr	r0, [pc, #52]	@ (80167c4 <xTimerCreateTimerTask+0x78>)
 801678e:	f7fe fe77 	bl	8015480 <xTaskCreateStatic>
 8016792:	4603      	mov	r3, r0
 8016794:	4a0c      	ldr	r2, [pc, #48]	@ (80167c8 <xTimerCreateTimerTask+0x7c>)
 8016796:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8016798:	4b0b      	ldr	r3, [pc, #44]	@ (80167c8 <xTimerCreateTimerTask+0x7c>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d001      	beq.n	80167a4 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 80167a0:	2301      	movs	r3, #1
 80167a2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d103      	bne.n	80167b2 <xTimerCreateTimerTask+0x66>
 80167aa:	f000 fc25 	bl	8016ff8 <ulSetInterruptMask>
 80167ae:	bf00      	nop
 80167b0:	e7fd      	b.n	80167ae <xTimerCreateTimerTask+0x62>
        return xReturn;
 80167b2:	68fb      	ldr	r3, [r7, #12]
    }
 80167b4:	4618      	mov	r0, r3
 80167b6:	3710      	adds	r7, #16
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	20029dc8 	.word	0x20029dc8
 80167c0:	08017da8 	.word	0x08017da8
 80167c4:	08016871 	.word	0x08016871
 80167c8:	20029dcc 	.word	0x20029dcc

080167cc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80167d8:	e008      	b.n	80167ec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	699b      	ldr	r3, [r3, #24]
 80167de:	68ba      	ldr	r2, [r7, #8]
 80167e0:	4413      	add	r3, r2
 80167e2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	6a1b      	ldr	r3, [r3, #32]
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	699a      	ldr	r2, [r3, #24]
 80167f0:	68bb      	ldr	r3, [r7, #8]
 80167f2:	18d1      	adds	r1, r2, r3
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	687a      	ldr	r2, [r7, #4]
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f000 f8d7 	bl	80169ac <prvInsertTimerInActiveList>
 80167fe:	4603      	mov	r3, r0
 8016800:	2b00      	cmp	r3, #0
 8016802:	d1ea      	bne.n	80167da <prvReloadTimer+0xe>
        }
    }
 8016804:	bf00      	nop
 8016806:	bf00      	nop
 8016808:	3710      	adds	r7, #16
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}
	...

08016810 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8016810:	b580      	push	{r7, lr}
 8016812:	b084      	sub	sp, #16
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801681a:	4b14      	ldr	r3, [pc, #80]	@ (801686c <prvProcessExpiredTimer+0x5c>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	68db      	ldr	r3, [r3, #12]
 8016820:	68db      	ldr	r3, [r3, #12]
 8016822:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	3304      	adds	r3, #4
 8016828:	4618      	mov	r0, r3
 801682a:	f7fe f839 	bl	80148a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016834:	f003 0304 	and.w	r3, r3, #4
 8016838:	2b00      	cmp	r3, #0
 801683a:	d005      	beq.n	8016848 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 801683c:	683a      	ldr	r2, [r7, #0]
 801683e:	6879      	ldr	r1, [r7, #4]
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	f7ff ffc3 	bl	80167cc <prvReloadTimer>
 8016846:	e008      	b.n	801685a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801684e:	f023 0301 	bic.w	r3, r3, #1
 8016852:	b2da      	uxtb	r2, r3
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	6a1b      	ldr	r3, [r3, #32]
 801685e:	68f8      	ldr	r0, [r7, #12]
 8016860:	4798      	blx	r3
    }
 8016862:	bf00      	nop
 8016864:	3710      	adds	r7, #16
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	20029dc0 	.word	0x20029dc0

08016870 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8016870:	b580      	push	{r7, lr}
 8016872:	b084      	sub	sp, #16
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016878:	f107 0308 	add.w	r3, r7, #8
 801687c:	4618      	mov	r0, r3
 801687e:	f000 f851 	bl	8016924 <prvGetNextExpireTime>
 8016882:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	4619      	mov	r1, r3
 8016888:	68f8      	ldr	r0, [r7, #12]
 801688a:	f000 f805 	bl	8016898 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 801688e:	f000 f8cf 	bl	8016a30 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016892:	bf00      	nop
 8016894:	e7f0      	b.n	8016878 <prvTimerTask+0x8>
	...

08016898 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8016898:	b580      	push	{r7, lr}
 801689a:	b084      	sub	sp, #16
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80168a2:	f7ff f879 	bl	8015998 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80168a6:	f107 0308 	add.w	r3, r7, #8
 80168aa:	4618      	mov	r0, r3
 80168ac:	f000 f85e 	bl	801696c <prvSampleTimeNow>
 80168b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d12a      	bne.n	801690e <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d10a      	bne.n	80168d4 <prvProcessTimerOrBlockTask+0x3c>
 80168be:	687a      	ldr	r2, [r7, #4]
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d806      	bhi.n	80168d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80168c6:	f7ff f875 	bl	80159b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80168ca:	68f9      	ldr	r1, [r7, #12]
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	f7ff ff9f 	bl	8016810 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80168d2:	e01e      	b.n	8016912 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d008      	beq.n	80168ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80168da:	4b10      	ldr	r3, [pc, #64]	@ (801691c <prvProcessTimerOrBlockTask+0x84>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d101      	bne.n	80168e8 <prvProcessTimerOrBlockTask+0x50>
 80168e4:	2301      	movs	r3, #1
 80168e6:	e000      	b.n	80168ea <prvProcessTimerOrBlockTask+0x52>
 80168e8:	2300      	movs	r3, #0
 80168ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80168ec:	4b0c      	ldr	r3, [pc, #48]	@ (8016920 <prvProcessTimerOrBlockTask+0x88>)
 80168ee:	6818      	ldr	r0, [r3, #0]
 80168f0:	687a      	ldr	r2, [r7, #4]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	1ad3      	subs	r3, r2, r3
 80168f6:	683a      	ldr	r2, [r7, #0]
 80168f8:	4619      	mov	r1, r3
 80168fa:	f7fe fd8d 	bl	8015418 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80168fe:	f7ff f859 	bl	80159b4 <xTaskResumeAll>
 8016902:	4603      	mov	r3, r0
 8016904:	2b00      	cmp	r3, #0
 8016906:	d104      	bne.n	8016912 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8016908:	f000 fa26 	bl	8016d58 <vPortYield>
    }
 801690c:	e001      	b.n	8016912 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 801690e:	f7ff f851 	bl	80159b4 <xTaskResumeAll>
    }
 8016912:	bf00      	nop
 8016914:	3710      	adds	r7, #16
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}
 801691a:	bf00      	nop
 801691c:	20029dc4 	.word	0x20029dc4
 8016920:	20029dc8 	.word	0x20029dc8

08016924 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8016924:	b480      	push	{r7}
 8016926:	b085      	sub	sp, #20
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801692c:	4b0e      	ldr	r3, [pc, #56]	@ (8016968 <prvGetNextExpireTime+0x44>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d101      	bne.n	801693a <prvGetNextExpireTime+0x16>
 8016936:	2201      	movs	r2, #1
 8016938:	e000      	b.n	801693c <prvGetNextExpireTime+0x18>
 801693a:	2200      	movs	r2, #0
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d105      	bne.n	8016954 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016948:	4b07      	ldr	r3, [pc, #28]	@ (8016968 <prvGetNextExpireTime+0x44>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	68db      	ldr	r3, [r3, #12]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	60fb      	str	r3, [r7, #12]
 8016952:	e001      	b.n	8016958 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8016954:	2300      	movs	r3, #0
 8016956:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8016958:	68fb      	ldr	r3, [r7, #12]
    }
 801695a:	4618      	mov	r0, r3
 801695c:	3714      	adds	r7, #20
 801695e:	46bd      	mov	sp, r7
 8016960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop
 8016968:	20029dc0 	.word	0x20029dc0

0801696c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 801696c:	b580      	push	{r7, lr}
 801696e:	b084      	sub	sp, #16
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8016974:	f7ff f906 	bl	8015b84 <xTaskGetTickCount>
 8016978:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 801697a:	4b0b      	ldr	r3, [pc, #44]	@ (80169a8 <prvSampleTimeNow+0x3c>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	68fa      	ldr	r2, [r7, #12]
 8016980:	429a      	cmp	r2, r3
 8016982:	d205      	bcs.n	8016990 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8016984:	f000 f922 	bl	8016bcc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2201      	movs	r2, #1
 801698c:	601a      	str	r2, [r3, #0]
 801698e:	e002      	b.n	8016996 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2200      	movs	r2, #0
 8016994:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8016996:	4a04      	ldr	r2, [pc, #16]	@ (80169a8 <prvSampleTimeNow+0x3c>)
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 801699c:	68fb      	ldr	r3, [r7, #12]
    }
 801699e:	4618      	mov	r0, r3
 80169a0:	3710      	adds	r7, #16
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	bf00      	nop
 80169a8:	20029dd0 	.word	0x20029dd0

080169ac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b086      	sub	sp, #24
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	60f8      	str	r0, [r7, #12]
 80169b4:	60b9      	str	r1, [r7, #8]
 80169b6:	607a      	str	r2, [r7, #4]
 80169b8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80169ba:	2300      	movs	r3, #0
 80169bc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	68ba      	ldr	r2, [r7, #8]
 80169c2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	68fa      	ldr	r2, [r7, #12]
 80169c8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80169ca:	68ba      	ldr	r2, [r7, #8]
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d812      	bhi.n	80169f8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169d2:	687a      	ldr	r2, [r7, #4]
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	1ad2      	subs	r2, r2, r3
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	699b      	ldr	r3, [r3, #24]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d302      	bcc.n	80169e6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80169e0:	2301      	movs	r3, #1
 80169e2:	617b      	str	r3, [r7, #20]
 80169e4:	e01b      	b.n	8016a1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80169e6:	4b10      	ldr	r3, [pc, #64]	@ (8016a28 <prvInsertTimerInActiveList+0x7c>)
 80169e8:	681a      	ldr	r2, [r3, #0]
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	3304      	adds	r3, #4
 80169ee:	4619      	mov	r1, r3
 80169f0:	4610      	mov	r0, r2
 80169f2:	f7fd ff1c 	bl	801482e <vListInsert>
 80169f6:	e012      	b.n	8016a1e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80169f8:	687a      	ldr	r2, [r7, #4]
 80169fa:	683b      	ldr	r3, [r7, #0]
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d206      	bcs.n	8016a0e <prvInsertTimerInActiveList+0x62>
 8016a00:	68ba      	ldr	r2, [r7, #8]
 8016a02:	683b      	ldr	r3, [r7, #0]
 8016a04:	429a      	cmp	r2, r3
 8016a06:	d302      	bcc.n	8016a0e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8016a08:	2301      	movs	r3, #1
 8016a0a:	617b      	str	r3, [r7, #20]
 8016a0c:	e007      	b.n	8016a1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016a0e:	4b07      	ldr	r3, [pc, #28]	@ (8016a2c <prvInsertTimerInActiveList+0x80>)
 8016a10:	681a      	ldr	r2, [r3, #0]
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	3304      	adds	r3, #4
 8016a16:	4619      	mov	r1, r3
 8016a18:	4610      	mov	r0, r2
 8016a1a:	f7fd ff08 	bl	801482e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8016a1e:	697b      	ldr	r3, [r7, #20]
    }
 8016a20:	4618      	mov	r0, r3
 8016a22:	3718      	adds	r7, #24
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}
 8016a28:	20029dc4 	.word	0x20029dc4
 8016a2c:	20029dc0 	.word	0x20029dc0

08016a30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b088      	sub	sp, #32
 8016a34:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016a36:	e0b7      	b.n	8016ba8 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	da11      	bge.n	8016a62 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016a3e:	1d3b      	adds	r3, r7, #4
 8016a40:	3304      	adds	r3, #4
 8016a42:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8016a44:	69fb      	ldr	r3, [r7, #28]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d103      	bne.n	8016a52 <prvProcessReceivedCommands+0x22>
 8016a4a:	f000 fad5 	bl	8016ff8 <ulSetInterruptMask>
 8016a4e:	bf00      	nop
 8016a50:	e7fd      	b.n	8016a4e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016a52:	69fb      	ldr	r3, [r7, #28]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	69fa      	ldr	r2, [r7, #28]
 8016a58:	6850      	ldr	r0, [r2, #4]
 8016a5a:	69fa      	ldr	r2, [r7, #28]
 8016a5c:	6892      	ldr	r2, [r2, #8]
 8016a5e:	4611      	mov	r1, r2
 8016a60:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	f2c0 809f 	blt.w	8016ba8 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016a6e:	69bb      	ldr	r3, [r7, #24]
 8016a70:	695b      	ldr	r3, [r3, #20]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d004      	beq.n	8016a80 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	3304      	adds	r3, #4
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7fd ff10 	bl	80148a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016a80:	463b      	mov	r3, r7
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7ff ff72 	bl	801696c <prvSampleTimeNow>
 8016a88:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	3b01      	subs	r3, #1
 8016a8e:	2b08      	cmp	r3, #8
 8016a90:	f200 8087 	bhi.w	8016ba2 <prvProcessReceivedCommands+0x172>
 8016a94:	a201      	add	r2, pc, #4	@ (adr r2, 8016a9c <prvProcessReceivedCommands+0x6c>)
 8016a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a9a:	bf00      	nop
 8016a9c:	08016ac1 	.word	0x08016ac1
 8016aa0:	08016ac1 	.word	0x08016ac1
 8016aa4:	08016b29 	.word	0x08016b29
 8016aa8:	08016b3d 	.word	0x08016b3d
 8016aac:	08016b79 	.word	0x08016b79
 8016ab0:	08016ac1 	.word	0x08016ac1
 8016ab4:	08016ac1 	.word	0x08016ac1
 8016ab8:	08016b29 	.word	0x08016b29
 8016abc:	08016b3d 	.word	0x08016b3d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016ac0:	69bb      	ldr	r3, [r7, #24]
 8016ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016ac6:	f043 0301 	orr.w	r3, r3, #1
 8016aca:	b2da      	uxtb	r2, r3
 8016acc:	69bb      	ldr	r3, [r7, #24]
 8016ace:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016ad2:	68ba      	ldr	r2, [r7, #8]
 8016ad4:	69bb      	ldr	r3, [r7, #24]
 8016ad6:	699b      	ldr	r3, [r3, #24]
 8016ad8:	18d1      	adds	r1, r2, r3
 8016ada:	68bb      	ldr	r3, [r7, #8]
 8016adc:	697a      	ldr	r2, [r7, #20]
 8016ade:	69b8      	ldr	r0, [r7, #24]
 8016ae0:	f7ff ff64 	bl	80169ac <prvInsertTimerInActiveList>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d05d      	beq.n	8016ba6 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016aea:	69bb      	ldr	r3, [r7, #24]
 8016aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016af0:	f003 0304 	and.w	r3, r3, #4
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d009      	beq.n	8016b0c <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8016af8:	68ba      	ldr	r2, [r7, #8]
 8016afa:	69bb      	ldr	r3, [r7, #24]
 8016afc:	699b      	ldr	r3, [r3, #24]
 8016afe:	4413      	add	r3, r2
 8016b00:	697a      	ldr	r2, [r7, #20]
 8016b02:	4619      	mov	r1, r3
 8016b04:	69b8      	ldr	r0, [r7, #24]
 8016b06:	f7ff fe61 	bl	80167cc <prvReloadTimer>
 8016b0a:	e008      	b.n	8016b1e <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8016b0c:	69bb      	ldr	r3, [r7, #24]
 8016b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016b12:	f023 0301 	bic.w	r3, r3, #1
 8016b16:	b2da      	uxtb	r2, r3
 8016b18:	69bb      	ldr	r3, [r7, #24]
 8016b1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016b1e:	69bb      	ldr	r3, [r7, #24]
 8016b20:	6a1b      	ldr	r3, [r3, #32]
 8016b22:	69b8      	ldr	r0, [r7, #24]
 8016b24:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8016b26:	e03e      	b.n	8016ba6 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8016b28:	69bb      	ldr	r3, [r7, #24]
 8016b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016b2e:	f023 0301 	bic.w	r3, r3, #1
 8016b32:	b2da      	uxtb	r2, r3
 8016b34:	69bb      	ldr	r3, [r7, #24]
 8016b36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8016b3a:	e035      	b.n	8016ba8 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016b3c:	69bb      	ldr	r3, [r7, #24]
 8016b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016b42:	f043 0301 	orr.w	r3, r3, #1
 8016b46:	b2da      	uxtb	r2, r3
 8016b48:	69bb      	ldr	r3, [r7, #24]
 8016b4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016b4e:	68ba      	ldr	r2, [r7, #8]
 8016b50:	69bb      	ldr	r3, [r7, #24]
 8016b52:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016b54:	69bb      	ldr	r3, [r7, #24]
 8016b56:	699b      	ldr	r3, [r3, #24]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d103      	bne.n	8016b64 <prvProcessReceivedCommands+0x134>
 8016b5c:	f000 fa4c 	bl	8016ff8 <ulSetInterruptMask>
 8016b60:	bf00      	nop
 8016b62:	e7fd      	b.n	8016b60 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016b64:	69bb      	ldr	r3, [r7, #24]
 8016b66:	699a      	ldr	r2, [r3, #24]
 8016b68:	697b      	ldr	r3, [r7, #20]
 8016b6a:	18d1      	adds	r1, r2, r3
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	697a      	ldr	r2, [r7, #20]
 8016b70:	69b8      	ldr	r0, [r7, #24]
 8016b72:	f7ff ff1b 	bl	80169ac <prvInsertTimerInActiveList>
                        break;
 8016b76:	e017      	b.n	8016ba8 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016b78:	69bb      	ldr	r3, [r7, #24]
 8016b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016b7e:	f003 0302 	and.w	r3, r3, #2
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d103      	bne.n	8016b8e <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8016b86:	69b8      	ldr	r0, [r7, #24]
 8016b88:	f000 fb42 	bl	8017210 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8016b8c:	e00c      	b.n	8016ba8 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016b94:	f023 0301 	bic.w	r3, r3, #1
 8016b98:	b2da      	uxtb	r2, r3
 8016b9a:	69bb      	ldr	r3, [r7, #24]
 8016b9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8016ba0:	e002      	b.n	8016ba8 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 8016ba2:	bf00      	nop
 8016ba4:	e000      	b.n	8016ba8 <prvProcessReceivedCommands+0x178>
                        break;
 8016ba6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016ba8:	4b07      	ldr	r3, [pc, #28]	@ (8016bc8 <prvProcessReceivedCommands+0x198>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	1d39      	adds	r1, r7, #4
 8016bae:	2200      	movs	r2, #0
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7fe f9d8 	bl	8014f66 <xQueueReceive>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	f47f af3d 	bne.w	8016a38 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8016bbe:	bf00      	nop
 8016bc0:	bf00      	nop
 8016bc2:	3720      	adds	r7, #32
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bd80      	pop	{r7, pc}
 8016bc8:	20029dc8 	.word	0x20029dc8

08016bcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016bd2:	e009      	b.n	8016be8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8016c10 <prvSwitchTimerLists+0x44>)
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	68db      	ldr	r3, [r3, #12]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8016bde:	f04f 31ff 	mov.w	r1, #4294967295
 8016be2:	6838      	ldr	r0, [r7, #0]
 8016be4:	f7ff fe14 	bl	8016810 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016be8:	4b09      	ldr	r3, [pc, #36]	@ (8016c10 <prvSwitchTimerLists+0x44>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d1f0      	bne.n	8016bd4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8016bf2:	4b07      	ldr	r3, [pc, #28]	@ (8016c10 <prvSwitchTimerLists+0x44>)
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8016bf8:	4b06      	ldr	r3, [pc, #24]	@ (8016c14 <prvSwitchTimerLists+0x48>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	4a04      	ldr	r2, [pc, #16]	@ (8016c10 <prvSwitchTimerLists+0x44>)
 8016bfe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8016c00:	4a04      	ldr	r2, [pc, #16]	@ (8016c14 <prvSwitchTimerLists+0x48>)
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	6013      	str	r3, [r2, #0]
    }
 8016c06:	bf00      	nop
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	20029dc0 	.word	0x20029dc0
 8016c14:	20029dc4 	.word	0x20029dc4

08016c18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8016c1e:	f000 f8ad 	bl	8016d7c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8016c22:	4b15      	ldr	r3, [pc, #84]	@ (8016c78 <prvCheckForValidListAndQueue+0x60>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d120      	bne.n	8016c6c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8016c2a:	4814      	ldr	r0, [pc, #80]	@ (8016c7c <prvCheckForValidListAndQueue+0x64>)
 8016c2c:	f7fd fdae 	bl	801478c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8016c30:	4813      	ldr	r0, [pc, #76]	@ (8016c80 <prvCheckForValidListAndQueue+0x68>)
 8016c32:	f7fd fdab 	bl	801478c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8016c36:	4b13      	ldr	r3, [pc, #76]	@ (8016c84 <prvCheckForValidListAndQueue+0x6c>)
 8016c38:	4a10      	ldr	r2, [pc, #64]	@ (8016c7c <prvCheckForValidListAndQueue+0x64>)
 8016c3a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8016c3c:	4b12      	ldr	r3, [pc, #72]	@ (8016c88 <prvCheckForValidListAndQueue+0x70>)
 8016c3e:	4a10      	ldr	r2, [pc, #64]	@ (8016c80 <prvCheckForValidListAndQueue+0x68>)
 8016c40:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016c42:	2300      	movs	r3, #0
 8016c44:	9300      	str	r3, [sp, #0]
 8016c46:	4b11      	ldr	r3, [pc, #68]	@ (8016c8c <prvCheckForValidListAndQueue+0x74>)
 8016c48:	4a11      	ldr	r2, [pc, #68]	@ (8016c90 <prvCheckForValidListAndQueue+0x78>)
 8016c4a:	2110      	movs	r1, #16
 8016c4c:	200a      	movs	r0, #10
 8016c4e:	f7fd fec5 	bl	80149dc <xQueueGenericCreateStatic>
 8016c52:	4603      	mov	r3, r0
 8016c54:	4a08      	ldr	r2, [pc, #32]	@ (8016c78 <prvCheckForValidListAndQueue+0x60>)
 8016c56:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8016c58:	4b07      	ldr	r3, [pc, #28]	@ (8016c78 <prvCheckForValidListAndQueue+0x60>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d005      	beq.n	8016c6c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016c60:	4b05      	ldr	r3, [pc, #20]	@ (8016c78 <prvCheckForValidListAndQueue+0x60>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	490b      	ldr	r1, [pc, #44]	@ (8016c94 <prvCheckForValidListAndQueue+0x7c>)
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7fe fb60 	bl	801532c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8016c6c:	f000 f898 	bl	8016da0 <vPortExitCritical>
    }
 8016c70:	bf00      	nop
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	20029dc8 	.word	0x20029dc8
 8016c7c:	20029d98 	.word	0x20029d98
 8016c80:	20029dac 	.word	0x20029dac
 8016c84:	20029dc0 	.word	0x20029dc0
 8016c88:	20029dc4 	.word	0x20029dc4
 8016c8c:	20029e74 	.word	0x20029e74
 8016c90:	20029dd4 	.word	0x20029dd4
 8016c94:	08017db0 	.word	0x08017db0

08016c98 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b08a      	sub	sp, #40	@ 0x28
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	60b9      	str	r1, [r7, #8]
 8016ca2:	607a      	str	r2, [r7, #4]
 8016ca4:	603b      	str	r3, [r7, #0]
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8016ca6:	f06f 0301 	mvn.w	r3, #1
 8016caa:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8016cb0:	68bb      	ldr	r3, [r7, #8]
 8016cb2:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016cb8:	4b06      	ldr	r3, [pc, #24]	@ (8016cd4 <xTimerPendFunctionCallFromISR+0x3c>)
 8016cba:	6818      	ldr	r0, [r3, #0]
 8016cbc:	f107 0114 	add.w	r1, r7, #20
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	683a      	ldr	r2, [r7, #0]
 8016cc4:	f7fe f855 	bl	8014d72 <xQueueGenericSendFromISR>
 8016cc8:	6278      	str	r0, [r7, #36]	@ 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 8016cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8016ccc:	4618      	mov	r0, r3
 8016cce:	3728      	adds	r7, #40	@ 0x28
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}
 8016cd4:	20029dc8 	.word	0x20029dc8

08016cd8 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8016cd8:	b480      	push	{r7}
 8016cda:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8016d0c <vPortSetupTimerInterrupt+0x34>)
 8016cde:	2200      	movs	r2, #0
 8016ce0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8016d10 <vPortSetupTimerInterrupt+0x38>)
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8016d14 <vPortSetupTimerInterrupt+0x3c>)
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	4a0a      	ldr	r2, [pc, #40]	@ (8016d18 <vPortSetupTimerInterrupt+0x40>)
 8016cee:	fba2 2303 	umull	r2, r3, r2, r3
 8016cf2:	099b      	lsrs	r3, r3, #6
 8016cf4:	4a09      	ldr	r2, [pc, #36]	@ (8016d1c <vPortSetupTimerInterrupt+0x44>)
 8016cf6:	3b01      	subs	r3, #1
 8016cf8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8016cfa:	4b04      	ldr	r3, [pc, #16]	@ (8016d0c <vPortSetupTimerInterrupt+0x34>)
 8016cfc:	2207      	movs	r2, #7
 8016cfe:	601a      	str	r2, [r3, #0]
}
 8016d00:	bf00      	nop
 8016d02:	46bd      	mov	sp, r7
 8016d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d08:	4770      	bx	lr
 8016d0a:	bf00      	nop
 8016d0c:	e000e010 	.word	0xe000e010
 8016d10:	e000e018 	.word	0xe000e018
 8016d14:	20000050 	.word	0x20000050
 8016d18:	10624dd3 	.word	0x10624dd3
 8016d1c:	e000e014 	.word	0xe000e014

08016d20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8016d26:	2300      	movs	r3, #0
 8016d28:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8016d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8016d54 <prvTaskExitError+0x34>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d32:	d003      	beq.n	8016d3c <prvTaskExitError+0x1c>
 8016d34:	f000 f960 	bl	8016ff8 <ulSetInterruptMask>
 8016d38:	bf00      	nop
 8016d3a:	e7fd      	b.n	8016d38 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8016d3c:	f000 f95c 	bl	8016ff8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8016d40:	bf00      	nop
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d0fc      	beq.n	8016d42 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8016d48:	bf00      	nop
 8016d4a:	bf00      	nop
 8016d4c:	3708      	adds	r7, #8
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
 8016d52:	bf00      	nop
 8016d54:	20000170 	.word	0x20000170

08016d58 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8016d58:	b480      	push	{r7}
 8016d5a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016d5c:	4b06      	ldr	r3, [pc, #24]	@ (8016d78 <vPortYield+0x20>)
 8016d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016d62:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8016d64:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8016d68:	f3bf 8f6f 	isb	sy
}
 8016d6c:	bf00      	nop
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d74:	4770      	bx	lr
 8016d76:	bf00      	nop
 8016d78:	e000ed04 	.word	0xe000ed04

08016d7c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8016d80:	f000 f93a 	bl	8016ff8 <ulSetInterruptMask>
    ulCriticalNesting++;
 8016d84:	4b05      	ldr	r3, [pc, #20]	@ (8016d9c <vPortEnterCritical+0x20>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	4a04      	ldr	r2, [pc, #16]	@ (8016d9c <vPortEnterCritical+0x20>)
 8016d8c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8016d8e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8016d92:	f3bf 8f6f 	isb	sy
}
 8016d96:	bf00      	nop
 8016d98:	bd80      	pop	{r7, pc}
 8016d9a:	bf00      	nop
 8016d9c:	20000170 	.word	0x20000170

08016da0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8016da4:	4b0a      	ldr	r3, [pc, #40]	@ (8016dd0 <vPortExitCritical+0x30>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d103      	bne.n	8016db4 <vPortExitCritical+0x14>
 8016dac:	f000 f924 	bl	8016ff8 <ulSetInterruptMask>
 8016db0:	bf00      	nop
 8016db2:	e7fd      	b.n	8016db0 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8016db4:	4b06      	ldr	r3, [pc, #24]	@ (8016dd0 <vPortExitCritical+0x30>)
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	3b01      	subs	r3, #1
 8016dba:	4a05      	ldr	r2, [pc, #20]	@ (8016dd0 <vPortExitCritical+0x30>)
 8016dbc:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8016dbe:	4b04      	ldr	r3, [pc, #16]	@ (8016dd0 <vPortExitCritical+0x30>)
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d102      	bne.n	8016dcc <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8016dc6:	2000      	movs	r0, #0
 8016dc8:	f000 f923 	bl	8017012 <vClearInterruptMask>
    }
}
 8016dcc:	bf00      	nop
 8016dce:	bd80      	pop	{r7, pc}
 8016dd0:	20000170 	.word	0x20000170

08016dd4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8016dda:	f000 f90d 	bl	8016ff8 <ulSetInterruptMask>
 8016dde:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8016de0:	f7fe feec 	bl	8015bbc <xTaskIncrementTick>
 8016de4:	4603      	mov	r3, r0
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d003      	beq.n	8016df2 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016dea:	4b05      	ldr	r3, [pc, #20]	@ (8016e00 <xPortSysTickHandler+0x2c>)
 8016dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016df0:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f000 f90d 	bl	8017012 <vClearInterruptMask>
}
 8016df8:	bf00      	nop
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}
 8016e00:	e000ed04 	.word	0xe000ed04

08016e04 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b084      	sub	sp, #16
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	699b      	ldr	r3, [r3, #24]
 8016e10:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	3b02      	subs	r3, #2
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8016e1a:	7afb      	ldrb	r3, [r7, #11]
 8016e1c:	2b02      	cmp	r3, #2
 8016e1e:	d102      	bne.n	8016e26 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8016e20:	f000 f8b6 	bl	8016f90 <vRestoreContextOfFirstTask>
            break;
 8016e24:	e003      	b.n	8016e2e <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8016e26:	f000 f8e7 	bl	8016ff8 <ulSetInterruptMask>
 8016e2a:	bf00      	nop
 8016e2c:	e7fd      	b.n	8016e2a <vPortSVCHandler_C+0x26>
    }
}
 8016e2e:	bf00      	nop
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
	...

08016e38 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 8016e38:	b480      	push	{r7}
 8016e3a:	b085      	sub	sp, #20
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
 8016e44:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	3b04      	subs	r3, #4
 8016e4a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016e52:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	3b04      	subs	r3, #4
 8016e58:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8016e5a:	687a      	ldr	r2, [r7, #4]
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	3b04      	subs	r3, #4
 8016e64:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8016e66:	4a38      	ldr	r2, [pc, #224]	@ (8016f48 <pxPortInitialiseStack+0x110>)
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	3b04      	subs	r3, #4
 8016e70:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8016e78:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	3b04      	subs	r3, #4
 8016e7e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8016e86:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	3b04      	subs	r3, #4
 8016e8c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8016e94:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	3b04      	subs	r3, #4
 8016e9a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8016ea2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	3b04      	subs	r3, #4
 8016ea8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8016eaa:	683a      	ldr	r2, [r7, #0]
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	3b04      	subs	r3, #4
 8016eb4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8016ebc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	3b04      	subs	r3, #4
 8016ec2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8016eca:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	3b04      	subs	r3, #4
 8016ed0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8016ed8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	3b04      	subs	r3, #4
 8016ede:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8016ee6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	3b04      	subs	r3, #4
 8016eec:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8016ef4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	3b04      	subs	r3, #4
 8016efa:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8016f02:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	3b04      	subs	r3, #4
 8016f08:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8016f10:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	3b04      	subs	r3, #4
 8016f16:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8016f1e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	3b04      	subs	r3, #4
 8016f24:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8016f2c:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	3b04      	subs	r3, #4
 8016f32:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8016f34:	68ba      	ldr	r2, [r7, #8]
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3714      	adds	r7, #20
 8016f40:	46bd      	mov	sp, r7
 8016f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f46:	4770      	bx	lr
 8016f48:	08016d21 	.word	0x08016d21

08016f4c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8016f50:	4b0c      	ldr	r3, [pc, #48]	@ (8016f84 <xPortStartScheduler+0x38>)
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	4a0b      	ldr	r2, [pc, #44]	@ (8016f84 <xPortStartScheduler+0x38>)
 8016f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8016f5a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8016f5c:	4b09      	ldr	r3, [pc, #36]	@ (8016f84 <xPortStartScheduler+0x38>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	4a08      	ldr	r2, [pc, #32]	@ (8016f84 <xPortStartScheduler+0x38>)
 8016f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8016f66:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8016f68:	f7ff feb6 	bl	8016cd8 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8016f6c:	4b06      	ldr	r3, [pc, #24]	@ (8016f88 <xPortStartScheduler+0x3c>)
 8016f6e:	2200      	movs	r2, #0
 8016f70:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 8016f72:	f000 f82d 	bl	8016fd0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8016f76:	f7fe ff0f 	bl	8015d98 <vTaskSwitchContext>
    prvTaskExitError();
 8016f7a:	f7ff fed1 	bl	8016d20 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8016f7e:	2300      	movs	r3, #0
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	bd80      	pop	{r7, pc}
 8016f84:	e000ed20 	.word	0xe000ed20
 8016f88:	20000170 	.word	0x20000170
 8016f8c:	00000000 	.word	0x00000000

08016f90 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8016f90:	4a0b      	ldr	r2, [pc, #44]	@ (8016fc0 <pxCurrentTCBConst2>)
 8016f92:	6811      	ldr	r1, [r2, #0]
 8016f94:	6808      	ldr	r0, [r1, #0]
 8016f96:	c806      	ldmia	r0!, {r1, r2}
 8016f98:	f381 880b 	msr	PSPLIM, r1
 8016f9c:	2102      	movs	r1, #2
 8016f9e:	f381 8814 	msr	CONTROL, r1
 8016fa2:	3020      	adds	r0, #32
 8016fa4:	f380 8809 	msr	PSP, r0
 8016fa8:	f3bf 8f6f 	isb	sy
 8016fac:	f04f 0000 	mov.w	r0, #0
 8016fb0:	f380 8811 	msr	BASEPRI, r0
 8016fb4:	4710      	bx	r2
 8016fb6:	bf00      	nop
 8016fb8:	f3af 8000 	nop.w
 8016fbc:	f3af 8000 	nop.w

08016fc0 <pxCurrentTCBConst2>:
 8016fc0:	20029898 	.word	0x20029898
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 8016fc4:	bf00      	nop
 8016fc6:	bf00      	nop
	...

08016fd0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8016fd0:	4807      	ldr	r0, [pc, #28]	@ (8016ff0 <xVTORConst>)
 8016fd2:	6800      	ldr	r0, [r0, #0]
 8016fd4:	6800      	ldr	r0, [r0, #0]
 8016fd6:	f380 8808 	msr	MSP, r0
 8016fda:	b662      	cpsie	i
 8016fdc:	b661      	cpsie	f
 8016fde:	f3bf 8f4f 	dsb	sy
 8016fe2:	f3bf 8f6f 	isb	sy
 8016fe6:	df02      	svc	2
 8016fe8:	bf00      	nop
 8016fea:	bf00      	nop
 8016fec:	f3af 8000 	nop.w

08016ff0 <xVTORConst>:
 8016ff0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8016ff4:	bf00      	nop
 8016ff6:	bf00      	nop

08016ff8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8016ff8:	f3ef 8011 	mrs	r0, BASEPRI
 8016ffc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8017000:	f381 8811 	msr	BASEPRI, r1
 8017004:	f3bf 8f4f 	dsb	sy
 8017008:	f3bf 8f6f 	isb	sy
 801700c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 801700e:	bf00      	nop
 8017010:	4618      	mov	r0, r3

08017012 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8017012:	f380 8811 	msr	BASEPRI, r0
 8017016:	f3bf 8f4f 	dsb	sy
 801701a:	f3bf 8f6f 	isb	sy
 801701e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8017020:	bf00      	nop
	...

08017030 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8017030:	f3ef 8009 	mrs	r0, PSP
 8017034:	f3ef 820b 	mrs	r2, PSPLIM
 8017038:	4673      	mov	r3, lr
 801703a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801703e:	4a10      	ldr	r2, [pc, #64]	@ (8017080 <pxCurrentTCBConst>)
 8017040:	6811      	ldr	r1, [r2, #0]
 8017042:	6008      	str	r0, [r1, #0]
 8017044:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017048:	f380 8811 	msr	BASEPRI, r0
 801704c:	f3bf 8f4f 	dsb	sy
 8017050:	f3bf 8f6f 	isb	sy
 8017054:	f7fe fea0 	bl	8015d98 <vTaskSwitchContext>
 8017058:	f04f 0000 	mov.w	r0, #0
 801705c:	f380 8811 	msr	BASEPRI, r0
 8017060:	4a07      	ldr	r2, [pc, #28]	@ (8017080 <pxCurrentTCBConst>)
 8017062:	6811      	ldr	r1, [r2, #0]
 8017064:	6808      	ldr	r0, [r1, #0]
 8017066:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801706a:	f382 880b 	msr	PSPLIM, r2
 801706e:	f380 8809 	msr	PSP, r0
 8017072:	4718      	bx	r3
 8017074:	f3af 8000 	nop.w
 8017078:	f3af 8000 	nop.w
 801707c:	f3af 8000 	nop.w

08017080 <pxCurrentTCBConst>:
 8017080:	20029898 	.word	0x20029898
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8017084:	bf00      	nop
 8017086:	bf00      	nop
	...

08017090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8017090:	f01e 0f04 	tst.w	lr, #4
 8017094:	bf0c      	ite	eq
 8017096:	f3ef 8008 	mrseq	r0, MSP
 801709a:	f3ef 8009 	mrsne	r0, PSP
 801709e:	4904      	ldr	r1, [pc, #16]	@ (80170b0 <svchandler_address_const>)
 80170a0:	4708      	bx	r1
 80170a2:	bf00      	nop
 80170a4:	f3af 8000 	nop.w
 80170a8:	f3af 8000 	nop.w
 80170ac:	f3af 8000 	nop.w

080170b0 <svchandler_address_const>:
 80170b0:	08016e05 	.word	0x08016e05
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 80170b4:	bf00      	nop
 80170b6:	bf00      	nop

080170b8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b088      	sub	sp, #32
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80170c0:	2300      	movs	r3, #0
 80170c2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80170c4:	f7fe fc68 	bl	8015998 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80170c8:	4b4c      	ldr	r3, [pc, #304]	@ (80171fc <pvPortMalloc+0x144>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d101      	bne.n	80170d4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80170d0:	f000 f8ec 	bl	80172ac <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d012      	beq.n	8017100 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80170da:	2208      	movs	r2, #8
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f003 0307 	and.w	r3, r3, #7
 80170e2:	1ad3      	subs	r3, r2, r3
 80170e4:	3308      	adds	r3, #8
 80170e6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80170e8:	693b      	ldr	r3, [r7, #16]
 80170ea:	43db      	mvns	r3, r3
 80170ec:	687a      	ldr	r2, [r7, #4]
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d804      	bhi.n	80170fc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80170f2:	687a      	ldr	r2, [r7, #4]
 80170f4:	693b      	ldr	r3, [r7, #16]
 80170f6:	4413      	add	r3, r2
 80170f8:	607b      	str	r3, [r7, #4]
 80170fa:	e001      	b.n	8017100 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80170fc:	2300      	movs	r3, #0
 80170fe:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	2b00      	cmp	r3, #0
 8017104:	db69      	blt.n	80171da <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d066      	beq.n	80171da <pvPortMalloc+0x122>
 801710c:	4b3c      	ldr	r3, [pc, #240]	@ (8017200 <pvPortMalloc+0x148>)
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	687a      	ldr	r2, [r7, #4]
 8017112:	429a      	cmp	r2, r3
 8017114:	d861      	bhi.n	80171da <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8017116:	4b3b      	ldr	r3, [pc, #236]	@ (8017204 <pvPortMalloc+0x14c>)
 8017118:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 801711a:	4b3a      	ldr	r3, [pc, #232]	@ (8017204 <pvPortMalloc+0x14c>)
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017120:	e004      	b.n	801712c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8017122:	69fb      	ldr	r3, [r7, #28]
 8017124:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8017126:	69fb      	ldr	r3, [r7, #28]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801712c:	69fb      	ldr	r3, [r7, #28]
 801712e:	685b      	ldr	r3, [r3, #4]
 8017130:	687a      	ldr	r2, [r7, #4]
 8017132:	429a      	cmp	r2, r3
 8017134:	d903      	bls.n	801713e <pvPortMalloc+0x86>
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d1f1      	bne.n	8017122 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 801713e:	4b2f      	ldr	r3, [pc, #188]	@ (80171fc <pvPortMalloc+0x144>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	69fa      	ldr	r2, [r7, #28]
 8017144:	429a      	cmp	r2, r3
 8017146:	d048      	beq.n	80171da <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017148:	69bb      	ldr	r3, [r7, #24]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	2208      	movs	r2, #8
 801714e:	4413      	add	r3, r2
 8017150:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017152:	69fb      	ldr	r3, [r7, #28]
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801715a:	69fb      	ldr	r3, [r7, #28]
 801715c:	685a      	ldr	r2, [r3, #4]
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	1ad2      	subs	r2, r2, r3
 8017162:	2308      	movs	r3, #8
 8017164:	005b      	lsls	r3, r3, #1
 8017166:	429a      	cmp	r2, r3
 8017168:	d918      	bls.n	801719c <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801716a:	69fa      	ldr	r2, [r7, #28]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	4413      	add	r3, r2
 8017170:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	f003 0307 	and.w	r3, r3, #7
 8017178:	2b00      	cmp	r3, #0
 801717a:	d003      	beq.n	8017184 <pvPortMalloc+0xcc>
 801717c:	f7ff ff3c 	bl	8016ff8 <ulSetInterruptMask>
 8017180:	bf00      	nop
 8017182:	e7fd      	b.n	8017180 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017184:	69fb      	ldr	r3, [r7, #28]
 8017186:	685a      	ldr	r2, [r3, #4]
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	1ad2      	subs	r2, r2, r3
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8017190:	69fb      	ldr	r3, [r7, #28]
 8017192:	687a      	ldr	r2, [r7, #4]
 8017194:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017196:	68f8      	ldr	r0, [r7, #12]
 8017198:	f000 f8e4 	bl	8017364 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801719c:	4b18      	ldr	r3, [pc, #96]	@ (8017200 <pvPortMalloc+0x148>)
 801719e:	681a      	ldr	r2, [r3, #0]
 80171a0:	69fb      	ldr	r3, [r7, #28]
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	1ad3      	subs	r3, r2, r3
 80171a6:	4a16      	ldr	r2, [pc, #88]	@ (8017200 <pvPortMalloc+0x148>)
 80171a8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80171aa:	4b15      	ldr	r3, [pc, #84]	@ (8017200 <pvPortMalloc+0x148>)
 80171ac:	681a      	ldr	r2, [r3, #0]
 80171ae:	4b16      	ldr	r3, [pc, #88]	@ (8017208 <pvPortMalloc+0x150>)
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	429a      	cmp	r2, r3
 80171b4:	d203      	bcs.n	80171be <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80171b6:	4b12      	ldr	r3, [pc, #72]	@ (8017200 <pvPortMalloc+0x148>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	4a13      	ldr	r2, [pc, #76]	@ (8017208 <pvPortMalloc+0x150>)
 80171bc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80171be:	69fb      	ldr	r3, [r7, #28]
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80171c6:	69fb      	ldr	r3, [r7, #28]
 80171c8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80171ca:	69fb      	ldr	r3, [r7, #28]
 80171cc:	2200      	movs	r2, #0
 80171ce:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80171d0:	4b0e      	ldr	r3, [pc, #56]	@ (801720c <pvPortMalloc+0x154>)
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	3301      	adds	r3, #1
 80171d6:	4a0d      	ldr	r2, [pc, #52]	@ (801720c <pvPortMalloc+0x154>)
 80171d8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80171da:	f7fe fbeb 	bl	80159b4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	f003 0307 	and.w	r3, r3, #7
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d003      	beq.n	80171f0 <pvPortMalloc+0x138>
 80171e8:	f7ff ff06 	bl	8016ff8 <ulSetInterruptMask>
 80171ec:	bf00      	nop
 80171ee:	e7fd      	b.n	80171ec <pvPortMalloc+0x134>
    return pvReturn;
 80171f0:	697b      	ldr	r3, [r7, #20]
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	3720      	adds	r7, #32
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	2002becc 	.word	0x2002becc
 8017200:	2002bed0 	.word	0x2002bed0
 8017204:	2002bec4 	.word	0x2002bec4
 8017208:	2002bed4 	.word	0x2002bed4
 801720c:	2002bed8 	.word	0x2002bed8

08017210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b084      	sub	sp, #16
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d03b      	beq.n	801729a <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8017222:	2308      	movs	r3, #8
 8017224:	425b      	negs	r3, r3
 8017226:	68fa      	ldr	r2, [r7, #12]
 8017228:	4413      	add	r3, r2
 801722a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8017230:	68bb      	ldr	r3, [r7, #8]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	2b00      	cmp	r3, #0
 8017236:	db03      	blt.n	8017240 <vPortFree+0x30>
 8017238:	f7ff fede 	bl	8016ff8 <ulSetInterruptMask>
 801723c:	bf00      	nop
 801723e:	e7fd      	b.n	801723c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017240:	68bb      	ldr	r3, [r7, #8]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d003      	beq.n	8017250 <vPortFree+0x40>
 8017248:	f7ff fed6 	bl	8016ff8 <ulSetInterruptMask>
 801724c:	bf00      	nop
 801724e:	e7fd      	b.n	801724c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8017250:	68bb      	ldr	r3, [r7, #8]
 8017252:	685b      	ldr	r3, [r3, #4]
 8017254:	0fdb      	lsrs	r3, r3, #31
 8017256:	f003 0301 	and.w	r3, r3, #1
 801725a:	b2db      	uxtb	r3, r3
 801725c:	2b00      	cmp	r3, #0
 801725e:	d01c      	beq.n	801729a <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8017260:	68bb      	ldr	r3, [r7, #8]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d118      	bne.n	801729a <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8017268:	68bb      	ldr	r3, [r7, #8]
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8017270:	68bb      	ldr	r3, [r7, #8]
 8017272:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8017274:	f7fe fb90 	bl	8015998 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	685a      	ldr	r2, [r3, #4]
 801727c:	4b09      	ldr	r3, [pc, #36]	@ (80172a4 <vPortFree+0x94>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	4413      	add	r3, r2
 8017282:	4a08      	ldr	r2, [pc, #32]	@ (80172a4 <vPortFree+0x94>)
 8017284:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017286:	68b8      	ldr	r0, [r7, #8]
 8017288:	f000 f86c 	bl	8017364 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 801728c:	4b06      	ldr	r3, [pc, #24]	@ (80172a8 <vPortFree+0x98>)
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	3301      	adds	r3, #1
 8017292:	4a05      	ldr	r2, [pc, #20]	@ (80172a8 <vPortFree+0x98>)
 8017294:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8017296:	f7fe fb8d 	bl	80159b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 801729a:	bf00      	nop
 801729c:	3710      	adds	r7, #16
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}
 80172a2:	bf00      	nop
 80172a4:	2002bed0 	.word	0x2002bed0
 80172a8:	2002bedc 	.word	0x2002bedc

080172ac <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80172ac:	b480      	push	{r7}
 80172ae:	b085      	sub	sp, #20
 80172b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80172b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80172b6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80172b8:	4b25      	ldr	r3, [pc, #148]	@ (8017350 <prvHeapInit+0xa4>)
 80172ba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	f003 0307 	and.w	r3, r3, #7
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d00c      	beq.n	80172e0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	3307      	adds	r3, #7
 80172ca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	f023 0307 	bic.w	r3, r3, #7
 80172d2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80172d4:	68ba      	ldr	r2, [r7, #8]
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	1ad3      	subs	r3, r2, r3
 80172da:	4a1d      	ldr	r2, [pc, #116]	@ (8017350 <prvHeapInit+0xa4>)
 80172dc:	4413      	add	r3, r2
 80172de:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80172e4:	4a1b      	ldr	r2, [pc, #108]	@ (8017354 <prvHeapInit+0xa8>)
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80172ea:	4b1a      	ldr	r3, [pc, #104]	@ (8017354 <prvHeapInit+0xa8>)
 80172ec:	2200      	movs	r2, #0
 80172ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	68ba      	ldr	r2, [r7, #8]
 80172f4:	4413      	add	r3, r2
 80172f6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80172f8:	2208      	movs	r2, #8
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	1a9b      	subs	r3, r3, r2
 80172fe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	f023 0307 	bic.w	r3, r3, #7
 8017306:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	4a13      	ldr	r2, [pc, #76]	@ (8017358 <prvHeapInit+0xac>)
 801730c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 801730e:	4b12      	ldr	r3, [pc, #72]	@ (8017358 <prvHeapInit+0xac>)
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2200      	movs	r2, #0
 8017314:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8017316:	4b10      	ldr	r3, [pc, #64]	@ (8017358 <prvHeapInit+0xac>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2200      	movs	r2, #0
 801731c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	68fa      	ldr	r2, [r7, #12]
 8017326:	1ad2      	subs	r2, r2, r3
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801732c:	4b0a      	ldr	r3, [pc, #40]	@ (8017358 <prvHeapInit+0xac>)
 801732e:	681a      	ldr	r2, [r3, #0]
 8017330:	683b      	ldr	r3, [r7, #0]
 8017332:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017334:	683b      	ldr	r3, [r7, #0]
 8017336:	685b      	ldr	r3, [r3, #4]
 8017338:	4a08      	ldr	r2, [pc, #32]	@ (801735c <prvHeapInit+0xb0>)
 801733a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	4a07      	ldr	r2, [pc, #28]	@ (8017360 <prvHeapInit+0xb4>)
 8017342:	6013      	str	r3, [r2, #0]
}
 8017344:	bf00      	nop
 8017346:	3714      	adds	r7, #20
 8017348:	46bd      	mov	sp, r7
 801734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734e:	4770      	bx	lr
 8017350:	20029ec4 	.word	0x20029ec4
 8017354:	2002bec4 	.word	0x2002bec4
 8017358:	2002becc 	.word	0x2002becc
 801735c:	2002bed4 	.word	0x2002bed4
 8017360:	2002bed0 	.word	0x2002bed0

08017364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8017364:	b480      	push	{r7}
 8017366:	b085      	sub	sp, #20
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801736c:	4b28      	ldr	r3, [pc, #160]	@ (8017410 <prvInsertBlockIntoFreeList+0xac>)
 801736e:	60fb      	str	r3, [r7, #12]
 8017370:	e002      	b.n	8017378 <prvInsertBlockIntoFreeList+0x14>
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	60fb      	str	r3, [r7, #12]
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	687a      	ldr	r2, [r7, #4]
 801737e:	429a      	cmp	r2, r3
 8017380:	d8f7      	bhi.n	8017372 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	68ba      	ldr	r2, [r7, #8]
 801738c:	4413      	add	r3, r2
 801738e:	687a      	ldr	r2, [r7, #4]
 8017390:	429a      	cmp	r2, r3
 8017392:	d108      	bne.n	80173a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	685a      	ldr	r2, [r3, #4]
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	685b      	ldr	r3, [r3, #4]
 801739c:	441a      	add	r2, r3
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	685b      	ldr	r3, [r3, #4]
 80173ae:	68ba      	ldr	r2, [r7, #8]
 80173b0:	441a      	add	r2, r3
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d118      	bne.n	80173ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	681a      	ldr	r2, [r3, #0]
 80173be:	4b15      	ldr	r3, [pc, #84]	@ (8017414 <prvInsertBlockIntoFreeList+0xb0>)
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d00d      	beq.n	80173e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	685a      	ldr	r2, [r3, #4]
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	685b      	ldr	r3, [r3, #4]
 80173d0:	441a      	add	r2, r3
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	681a      	ldr	r2, [r3, #0]
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	601a      	str	r2, [r3, #0]
 80173e0:	e008      	b.n	80173f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80173e2:	4b0c      	ldr	r3, [pc, #48]	@ (8017414 <prvInsertBlockIntoFreeList+0xb0>)
 80173e4:	681a      	ldr	r2, [r3, #0]
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	601a      	str	r2, [r3, #0]
 80173ea:	e003      	b.n	80173f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	681a      	ldr	r2, [r3, #0]
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80173f4:	68fa      	ldr	r2, [r7, #12]
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d002      	beq.n	8017402 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8017402:	bf00      	nop
 8017404:	3714      	adds	r7, #20
 8017406:	46bd      	mov	sp, r7
 8017408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740c:	4770      	bx	lr
 801740e:	bf00      	nop
 8017410:	2002bec4 	.word	0x2002bec4
 8017414:	2002becc 	.word	0x2002becc

08017418 <MX_TOUCHSENSING_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* TOUCHSENSING init function */
void MX_TOUCHSENSING_Init(void)
{
 8017418:	b580      	push	{r7, lr}
 801741a:	af00      	add	r7, sp, #0
/***************************************/
   /**
  */

  tsl_user_Init();
 801741c:	f000 f802 	bl	8017424 <tsl_user_Init>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8017420:	bf00      	nop
 8017422:	bd80      	pop	{r7, pc}

08017424 <tsl_user_Init>:
  * @brief  Initialize the STMTouch Driver
  * @param  None
  * @retval None
  */
void tsl_user_Init(void)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	af00      	add	r7, sp, #0
  TSL_obj_GroupInit(&MyObjGroup); /* Init Objects */
 8017428:	4804      	ldr	r0, [pc, #16]	@ (801743c <tsl_user_Init+0x18>)
 801742a:	f7fa ff63 	bl	80122f4 <TSL_obj_GroupInit>

  TSL_Init(MyBanks); /* Init acquisition module */
 801742e:	4804      	ldr	r0, [pc, #16]	@ (8017440 <tsl_user_Init+0x1c>)
 8017430:	f7f9 fc44 	bl	8010cbc <TSL_Init>

  tsl_user_SetThresholds(); /* Init thresholds for each object individually (optional) */
 8017434:	f000 f806 	bl	8017444 <tsl_user_SetThresholds>
}
 8017438:	bf00      	nop
 801743a:	bd80      	pop	{r7, pc}
 801743c:	20000174 	.word	0x20000174
 8017440:	0801804c 	.word	0x0801804c

08017444 <tsl_user_SetThresholds>:
  * @brief  Set thresholds for each object (optional).
  * @param  None
  * @retval None
  */
void tsl_user_SetThresholds(void)
{
 8017444:	b480      	push	{r7}
 8017446:	af00      	add	r7, sp, #0
  /* Example: Decrease the Detect thresholds for the TKEY 0
  MyTKeys_Param[0].DetectInTh -= 10;
  MyTKeys_Param[0].DetectOutTh -= 10;
  */
/* USER CODE END Tsl_user_SetThresholds */
  }
 8017448:	bf00      	nop
 801744a:	46bd      	mov	sp, r7
 801744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017450:	4770      	bx	lr

08017452 <MyLinRots_ErrorStateProcess>:
  * @brief  Executed when a sensor is in Error state
  * @param  None
  * @retval None
  */
void MyLinRots_ErrorStateProcess(void)
{
 8017452:	b480      	push	{r7}
 8017454:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MyLinRots_ErrorStateProcess */
  /* Add here your own processing when a sensor is in Error state */
/* USER CODE END MyLinRots_ErrorStateProcess */
}
 8017456:	bf00      	nop
 8017458:	46bd      	mov	sp, r7
 801745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745e:	4770      	bx	lr

08017460 <MyLinRots_OffStateProcess>:
  * @brief  Executed when a sensor is in Off state
  * @param  None
  * @retval None
  */
void MyLinRots_OffStateProcess(void)
{
 8017460:	b480      	push	{r7}
 8017462:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MyLinRots_OffStateProcess */
  /* Add here your own processing when a sensor is in Off state */
/* USER CODE END MyLinRots_OffStateProcess */
}
 8017464:	bf00      	nop
 8017466:	46bd      	mov	sp, r7
 8017468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746c:	4770      	bx	lr
	...

08017470 <CDC_Itf_Init>:
  * @brief  Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	af00      	add	r7, sp, #0
  /* ##-1- Creation of Semaphore ############################################## */
  UsbSemaphoreHandle = osSemaphoreNew(1, 1, &UsbSemaphore_attributes);
 8017474:	4a0b      	ldr	r2, [pc, #44]	@ (80174a4 <CDC_Itf_Init+0x34>)
 8017476:	2101      	movs	r1, #1
 8017478:	2001      	movs	r0, #1
 801747a:	f7fc fe82 	bl	8014182 <osSemaphoreNew>
 801747e:	4603      	mov	r3, r0
 8017480:	4a09      	ldr	r2, [pc, #36]	@ (80174a8 <CDC_Itf_Init+0x38>)
 8017482:	6013      	str	r3, [r2, #0]
  /* ##-2- Set Application Buffers ############################################ */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBuffer, 0);
 8017484:	2200      	movs	r2, #0
 8017486:	4909      	ldr	r1, [pc, #36]	@ (80174ac <CDC_Itf_Init+0x3c>)
 8017488:	4809      	ldr	r0, [pc, #36]	@ (80174b0 <CDC_Itf_Init+0x40>)
 801748a:	f7fb fa2e 	bl	80128ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBuffer);
 801748e:	4909      	ldr	r1, [pc, #36]	@ (80174b4 <CDC_Itf_Init+0x44>)
 8017490:	4807      	ldr	r0, [pc, #28]	@ (80174b0 <CDC_Itf_Init+0x40>)
 8017492:	f7fb fa48 	bl	8012926 <USBD_CDC_SetRxBuffer>
  /* ##-3- Arm the USB reception ############################################## */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017496:	4806      	ldr	r0, [pc, #24]	@ (80174b0 <CDC_Itf_Init+0x40>)
 8017498:	f7fb fa5e 	bl	8012958 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 801749c:	2300      	movs	r3, #0
}
 801749e:	4618      	mov	r0, r3
 80174a0:	bd80      	pop	{r7, pc}
 80174a2:	bf00      	nop
 80174a4:	08018144 	.word	0x08018144
 80174a8:	2002c728 	.word	0x2002c728
 80174ac:	2002c328 	.word	0x2002c328
 80174b0:	20028b98 	.word	0x20028b98
 80174b4:	2002bf28 	.word	0x2002bf28

080174b8 <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 80174b8:	b480      	push	{r7}
 80174ba:	af00      	add	r7, sp, #0
  return (USBD_OK);
 80174bc:	2300      	movs	r3, #0
}
 80174be:	4618      	mov	r0, r3
 80174c0:	46bd      	mov	sp, r7
 80174c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c6:	4770      	bx	lr

080174c8 <CDC_Itf_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control(uint8_t Cmd, uint8_t * pBuf, uint16_t Size)
{
 80174c8:	b480      	push	{r7}
 80174ca:	b083      	sub	sp, #12
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	4603      	mov	r3, r0
 80174d0:	6039      	str	r1, [r7, #0]
 80174d2:	71fb      	strb	r3, [r7, #7]
 80174d4:	4613      	mov	r3, r2
 80174d6:	80bb      	strh	r3, [r7, #4]
  switch (Cmd)
 80174d8:	79fb      	ldrb	r3, [r7, #7]
 80174da:	2b23      	cmp	r3, #35	@ 0x23
 80174dc:	d84a      	bhi.n	8017574 <CDC_Itf_Control+0xac>
 80174de:	a201      	add	r2, pc, #4	@ (adr r2, 80174e4 <CDC_Itf_Control+0x1c>)
 80174e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174e4:	08017575 	.word	0x08017575
 80174e8:	08017575 	.word	0x08017575
 80174ec:	08017575 	.word	0x08017575
 80174f0:	08017575 	.word	0x08017575
 80174f4:	08017575 	.word	0x08017575
 80174f8:	08017575 	.word	0x08017575
 80174fc:	08017575 	.word	0x08017575
 8017500:	08017575 	.word	0x08017575
 8017504:	08017575 	.word	0x08017575
 8017508:	08017575 	.word	0x08017575
 801750c:	08017575 	.word	0x08017575
 8017510:	08017575 	.word	0x08017575
 8017514:	08017575 	.word	0x08017575
 8017518:	08017575 	.word	0x08017575
 801751c:	08017575 	.word	0x08017575
 8017520:	08017575 	.word	0x08017575
 8017524:	08017575 	.word	0x08017575
 8017528:	08017575 	.word	0x08017575
 801752c:	08017575 	.word	0x08017575
 8017530:	08017575 	.word	0x08017575
 8017534:	08017575 	.word	0x08017575
 8017538:	08017575 	.word	0x08017575
 801753c:	08017575 	.word	0x08017575
 8017540:	08017575 	.word	0x08017575
 8017544:	08017575 	.word	0x08017575
 8017548:	08017575 	.word	0x08017575
 801754c:	08017575 	.word	0x08017575
 8017550:	08017575 	.word	0x08017575
 8017554:	08017575 	.word	0x08017575
 8017558:	08017575 	.word	0x08017575
 801755c:	08017575 	.word	0x08017575
 8017560:	08017575 	.word	0x08017575
 8017564:	08017575 	.word	0x08017575
 8017568:	08017575 	.word	0x08017575
 801756c:	08017575 	.word	0x08017575
 8017570:	08017575 	.word	0x08017575
  case CDC_SEND_BREAK:
    /* Add your code here */
    break;

  default:
    break;
 8017574:	bf00      	nop
  }

  return (USBD_OK);
 8017576:	2300      	movs	r3, #0
}
 8017578:	4618      	mov	r0, r3
 801757a:	370c      	adds	r7, #12
 801757c:	46bd      	mov	sp, r7
 801757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017582:	4770      	bx	lr

08017584 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t * Buf, uint32_t * Len)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b082      	sub	sp, #8
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
 801758c:	6039      	str	r1, [r7, #0]
  MX_USB_OTG_FS_PCD_Private_PushBytes(Buf, (uint16_t)*Len);
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	b29b      	uxth	r3, r3
 8017594:	4619      	mov	r1, r3
 8017596:	6878      	ldr	r0, [r7, #4]
 8017598:	f7ea ff34 	bl	8002404 <MX_USB_OTG_FS_PCD_Private_PushBytes>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801759c:	6879      	ldr	r1, [r7, #4]
 801759e:	4805      	ldr	r0, [pc, #20]	@ (80175b4 <CDC_Itf_Receive+0x30>)
 80175a0:	f7fb f9c1 	bl	8012926 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80175a4:	4803      	ldr	r0, [pc, #12]	@ (80175b4 <CDC_Itf_Receive+0x30>)
 80175a6:	f7fb f9d7 	bl	8012958 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 80175aa:	2300      	movs	r3, #0
}
 80175ac:	4618      	mov	r0, r3
 80175ae:	3708      	adds	r7, #8
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}
 80175b4:	20028b98 	.word	0x20028b98

080175b8 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epNum)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b084      	sub	sp, #16
 80175bc:	af00      	add	r7, sp, #0
 80175be:	60f8      	str	r0, [r7, #12]
 80175c0:	60b9      	str	r1, [r7, #8]
 80175c2:	4613      	mov	r3, r2
 80175c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epNum);
  osSemaphoreRelease(UsbSemaphoreHandle);
 80175c6:	4b05      	ldr	r3, [pc, #20]	@ (80175dc <CDC_TransmitCplt+0x24>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7fc fe62 	bl	8014294 <osSemaphoreRelease>

  return (USBD_OK);
 80175d0:	2300      	movs	r3, #0
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3710      	adds	r7, #16
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop
 80175dc:	2002c728 	.word	0x2002c728

080175e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175e0:	b480      	push	{r7}
 80175e2:	b083      	sub	sp, #12
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	4603      	mov	r3, r0
 80175e8:	6039      	str	r1, [r7, #0]
 80175ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80175ec:	683b      	ldr	r3, [r7, #0]
 80175ee:	2212      	movs	r2, #18
 80175f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80175f2:	4b03      	ldr	r3, [pc, #12]	@ (8017600 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80175f4:	4618      	mov	r0, r3
 80175f6:	370c      	adds	r7, #12
 80175f8:	46bd      	mov	sp, r7
 80175fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fe:	4770      	bx	lr
 8017600:	200001c4 	.word	0x200001c4

08017604 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017604:	b480      	push	{r7}
 8017606:	b083      	sub	sp, #12
 8017608:	af00      	add	r7, sp, #0
 801760a:	4603      	mov	r3, r0
 801760c:	6039      	str	r1, [r7, #0]
 801760e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	2204      	movs	r2, #4
 8017614:	801a      	strh	r2, [r3, #0]
  return (uint8_t *) USBD_LangIDDesc;
 8017616:	4b03      	ldr	r3, [pc, #12]	@ (8017624 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8017618:	4618      	mov	r0, r3
 801761a:	370c      	adds	r7, #12
 801761c:	46bd      	mov	sp, r7
 801761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017622:	4770      	bx	lr
 8017624:	200001d8 	.word	0x200001d8

08017628 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	4603      	mov	r3, r0
 8017630:	6039      	str	r1, [r7, #0]
 8017632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017634:	79fb      	ldrb	r3, [r7, #7]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d105      	bne.n	8017646 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801763a:	683a      	ldr	r2, [r7, #0]
 801763c:	4907      	ldr	r1, [pc, #28]	@ (801765c <USBD_CDC_ProductStrDescriptor+0x34>)
 801763e:	4808      	ldr	r0, [pc, #32]	@ (8017660 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017640:	f7fc fa0d 	bl	8013a5e <USBD_GetString>
 8017644:	e004      	b.n	8017650 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017646:	683a      	ldr	r2, [r7, #0]
 8017648:	4904      	ldr	r1, [pc, #16]	@ (801765c <USBD_CDC_ProductStrDescriptor+0x34>)
 801764a:	4805      	ldr	r0, [pc, #20]	@ (8017660 <USBD_CDC_ProductStrDescriptor+0x38>)
 801764c:	f7fc fa07 	bl	8013a5e <USBD_GetString>
  }
  return USBD_StrDesc;
 8017650:	4b02      	ldr	r3, [pc, #8]	@ (801765c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8017652:	4618      	mov	r0, r3
 8017654:	3708      	adds	r7, #8
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}
 801765a:	bf00      	nop
 801765c:	2002c72c 	.word	0x2002c72c
 8017660:	08017dc8 	.word	0x08017dc8

08017664 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
 801766a:	4603      	mov	r3, r0
 801766c:	6039      	str	r1, [r7, #0]
 801766e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017670:	683a      	ldr	r2, [r7, #0]
 8017672:	4904      	ldr	r1, [pc, #16]	@ (8017684 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8017674:	4804      	ldr	r0, [pc, #16]	@ (8017688 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8017676:	f7fc f9f2 	bl	8013a5e <USBD_GetString>
  return USBD_StrDesc;
 801767a:	4b02      	ldr	r3, [pc, #8]	@ (8017684 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801767c:	4618      	mov	r0, r3
 801767e:	3708      	adds	r7, #8
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}
 8017684:	2002c72c 	.word	0x2002c72c
 8017688:	08017de0 	.word	0x08017de0

0801768c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
 8017692:	4603      	mov	r3, r0
 8017694:	6039      	str	r1, [r7, #0]
 8017696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017698:	683b      	ldr	r3, [r7, #0]
 801769a:	221a      	movs	r2, #26
 801769c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801769e:	f000 f843 	bl	8017728 <Get_SerialNum>



  return (uint8_t *) USBD_StringSerial;
 80176a2:	4b02      	ldr	r3, [pc, #8]	@ (80176ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3708      	adds	r7, #8
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}
 80176ac:	200001dc 	.word	0x200001dc

080176b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	4603      	mov	r3, r0
 80176b8:	6039      	str	r1, [r7, #0]
 80176ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80176bc:	79fb      	ldrb	r3, [r7, #7]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d105      	bne.n	80176ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80176c2:	683a      	ldr	r2, [r7, #0]
 80176c4:	4907      	ldr	r1, [pc, #28]	@ (80176e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80176c6:	4808      	ldr	r0, [pc, #32]	@ (80176e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80176c8:	f7fc f9c9 	bl	8013a5e <USBD_GetString>
 80176cc:	e004      	b.n	80176d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80176ce:	683a      	ldr	r2, [r7, #0]
 80176d0:	4904      	ldr	r1, [pc, #16]	@ (80176e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80176d2:	4805      	ldr	r0, [pc, #20]	@ (80176e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80176d4:	f7fc f9c3 	bl	8013a5e <USBD_GetString>
  }
  return USBD_StrDesc;
 80176d8:	4b02      	ldr	r3, [pc, #8]	@ (80176e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80176da:	4618      	mov	r0, r3
 80176dc:	3708      	adds	r7, #8
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}
 80176e2:	bf00      	nop
 80176e4:	2002c72c 	.word	0x2002c72c
 80176e8:	08017df4 	.word	0x08017df4

080176ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b082      	sub	sp, #8
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	4603      	mov	r3, r0
 80176f4:	6039      	str	r1, [r7, #0]
 80176f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80176f8:	79fb      	ldrb	r3, [r7, #7]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d105      	bne.n	801770a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80176fe:	683a      	ldr	r2, [r7, #0]
 8017700:	4907      	ldr	r1, [pc, #28]	@ (8017720 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8017702:	4808      	ldr	r0, [pc, #32]	@ (8017724 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8017704:	f7fc f9ab 	bl	8013a5e <USBD_GetString>
 8017708:	e004      	b.n	8017714 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801770a:	683a      	ldr	r2, [r7, #0]
 801770c:	4904      	ldr	r1, [pc, #16]	@ (8017720 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801770e:	4805      	ldr	r0, [pc, #20]	@ (8017724 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8017710:	f7fc f9a5 	bl	8013a5e <USBD_GetString>
  }
  return USBD_StrDesc;
 8017714:	4b02      	ldr	r3, [pc, #8]	@ (8017720 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8017716:	4618      	mov	r0, r3
 8017718:	3708      	adds	r7, #8
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	2002c72c 	.word	0x2002c72c
 8017724:	08017e00 	.word	0x08017e00

08017728 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b084      	sub	sp, #16
 801772c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801772e:	4b0f      	ldr	r3, [pc, #60]	@ (801776c <Get_SerialNum+0x44>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017734:	4b0e      	ldr	r3, [pc, #56]	@ (8017770 <Get_SerialNum+0x48>)
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801773a:	4b0e      	ldr	r3, [pc, #56]	@ (8017774 <Get_SerialNum+0x4c>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017740:	68fa      	ldr	r2, [r7, #12]
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	4413      	add	r3, r2
 8017746:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d009      	beq.n	8017762 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801774e:	2208      	movs	r2, #8
 8017750:	4909      	ldr	r1, [pc, #36]	@ (8017778 <Get_SerialNum+0x50>)
 8017752:	68f8      	ldr	r0, [r7, #12]
 8017754:	f000 f814 	bl	8017780 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017758:	2204      	movs	r2, #4
 801775a:	4908      	ldr	r1, [pc, #32]	@ (801777c <Get_SerialNum+0x54>)
 801775c:	68b8      	ldr	r0, [r7, #8]
 801775e:	f000 f80f 	bl	8017780 <IntToUnicode>
  }
}
 8017762:	bf00      	nop
 8017764:	3710      	adds	r7, #16
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}
 801776a:	bf00      	nop
 801776c:	0bfa0700 	.word	0x0bfa0700
 8017770:	0bfa0704 	.word	0x0bfa0704
 8017774:	0bfa0708 	.word	0x0bfa0708
 8017778:	200001de 	.word	0x200001de
 801777c:	200001ee 	.word	0x200001ee

08017780 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017780:	b480      	push	{r7}
 8017782:	b087      	sub	sp, #28
 8017784:	af00      	add	r7, sp, #0
 8017786:	60f8      	str	r0, [r7, #12]
 8017788:	60b9      	str	r1, [r7, #8]
 801778a:	4613      	mov	r3, r2
 801778c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801778e:	2300      	movs	r3, #0
 8017790:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017792:	2300      	movs	r3, #0
 8017794:	75fb      	strb	r3, [r7, #23]
 8017796:	e027      	b.n	80177e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	0f1b      	lsrs	r3, r3, #28
 801779c:	2b09      	cmp	r3, #9
 801779e:	d80b      	bhi.n	80177b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	0f1b      	lsrs	r3, r3, #28
 80177a4:	b2da      	uxtb	r2, r3
 80177a6:	7dfb      	ldrb	r3, [r7, #23]
 80177a8:	005b      	lsls	r3, r3, #1
 80177aa:	4619      	mov	r1, r3
 80177ac:	68bb      	ldr	r3, [r7, #8]
 80177ae:	440b      	add	r3, r1
 80177b0:	3230      	adds	r2, #48	@ 0x30
 80177b2:	b2d2      	uxtb	r2, r2
 80177b4:	701a      	strb	r2, [r3, #0]
 80177b6:	e00a      	b.n	80177ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	0f1b      	lsrs	r3, r3, #28
 80177bc:	b2da      	uxtb	r2, r3
 80177be:	7dfb      	ldrb	r3, [r7, #23]
 80177c0:	005b      	lsls	r3, r3, #1
 80177c2:	4619      	mov	r1, r3
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	440b      	add	r3, r1
 80177c8:	3237      	adds	r2, #55	@ 0x37
 80177ca:	b2d2      	uxtb	r2, r2
 80177cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	011b      	lsls	r3, r3, #4
 80177d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80177d4:	7dfb      	ldrb	r3, [r7, #23]
 80177d6:	005b      	lsls	r3, r3, #1
 80177d8:	3301      	adds	r3, #1
 80177da:	68ba      	ldr	r2, [r7, #8]
 80177dc:	4413      	add	r3, r2
 80177de:	2200      	movs	r2, #0
 80177e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80177e2:	7dfb      	ldrb	r3, [r7, #23]
 80177e4:	3301      	adds	r3, #1
 80177e6:	75fb      	strb	r3, [r7, #23]
 80177e8:	7dfa      	ldrb	r2, [r7, #23]
 80177ea:	79fb      	ldrb	r3, [r7, #7]
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d3d3      	bcc.n	8017798 <IntToUnicode+0x18>
  }
}
 80177f0:	bf00      	nop
 80177f2:	bf00      	nop
 80177f4:	371c      	adds	r7, #28
 80177f6:	46bd      	mov	sp, r7
 80177f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fc:	4770      	bx	lr

080177fe <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177fe:	b580      	push	{r7, lr}
 8017800:	b082      	sub	sp, #8
 8017802:	af00      	add	r7, sp, #0
 8017804:	6078      	str	r0, [r7, #4]

  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8017812:	4619      	mov	r1, r3
 8017814:	4610      	mov	r0, r2
 8017816:	f7fb f93b 	bl	8012a90 <USBD_LL_SetupStage>

}
 801781a:	bf00      	nop
 801781c:	3708      	adds	r7, #8
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}

08017822 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017822:	b580      	push	{r7, lr}
 8017824:	b082      	sub	sp, #8
 8017826:	af00      	add	r7, sp, #0
 8017828:	6078      	str	r0, [r7, #4]
 801782a:	460b      	mov	r3, r1
 801782c:	70fb      	strb	r3, [r7, #3]

  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8017834:	78fa      	ldrb	r2, [r7, #3]
 8017836:	6879      	ldr	r1, [r7, #4]
 8017838:	4613      	mov	r3, r2
 801783a:	00db      	lsls	r3, r3, #3
 801783c:	4413      	add	r3, r2
 801783e:	009b      	lsls	r3, r3, #2
 8017840:	440b      	add	r3, r1
 8017842:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8017846:	681a      	ldr	r2, [r3, #0]
 8017848:	78fb      	ldrb	r3, [r7, #3]
 801784a:	4619      	mov	r1, r3
 801784c:	f7fb f975 	bl	8012b3a <USBD_LL_DataOutStage>

}
 8017850:	bf00      	nop
 8017852:	3708      	adds	r7, #8
 8017854:	46bd      	mov	sp, r7
 8017856:	bd80      	pop	{r7, pc}

08017858 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b082      	sub	sp, #8
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
 8017860:	460b      	mov	r3, r1
 8017862:	70fb      	strb	r3, [r7, #3]

  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801786a:	78fa      	ldrb	r2, [r7, #3]
 801786c:	6879      	ldr	r1, [r7, #4]
 801786e:	4613      	mov	r3, r2
 8017870:	00db      	lsls	r3, r3, #3
 8017872:	4413      	add	r3, r2
 8017874:	009b      	lsls	r3, r3, #2
 8017876:	440b      	add	r3, r1
 8017878:	3348      	adds	r3, #72	@ 0x48
 801787a:	681a      	ldr	r2, [r3, #0]
 801787c:	78fb      	ldrb	r3, [r7, #3]
 801787e:	4619      	mov	r1, r3
 8017880:	f7fb f9be 	bl	8012c00 <USBD_LL_DataInStage>

}
 8017884:	bf00      	nop
 8017886:	3708      	adds	r7, #8
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}

0801788c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b082      	sub	sp, #8
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]

  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801789a:	4618      	mov	r0, r3
 801789c:	f7fb fad2 	bl	8012e44 <USBD_LL_SOF>

}
 80178a0:	bf00      	nop
 80178a2:	3708      	adds	r7, #8
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}

080178a8 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b084      	sub	sp, #16
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]

  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80178b0:	2301      	movs	r3, #1
 80178b2:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	691b      	ldr	r3, [r3, #16]
 80178b8:	2b02      	cmp	r3, #2
 80178ba:	d001      	beq.n	80178c0 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80178bc:	f7e9 ffec 	bl	8001898 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80178c6:	7bfa      	ldrb	r2, [r7, #15]
 80178c8:	4611      	mov	r1, r2
 80178ca:	4618      	mov	r0, r3
 80178cc:	f7fb fa7c 	bl	8012dc8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80178d6:	4618      	mov	r0, r3
 80178d8:	f7fb fa28 	bl	8012d2c <USBD_LL_Reset>

}
 80178dc:	bf00      	nop
 80178de:	3710      	adds	r7, #16
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}

080178e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b082      	sub	sp, #8
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]

  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80178f2:	4618      	mov	r0, r3
 80178f4:	f7fb fa78 	bl	8012de8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */

}
 80178f8:	bf00      	nop
 80178fa:	3708      	adds	r7, #8
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}

08017900 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]



  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801790e:	4618      	mov	r0, r3
 8017910:	f7fb fa80 	bl	8012e14 <USBD_LL_Resume>

}
 8017914:	bf00      	nop
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
 8017924:	460b      	mov	r3, r1
 8017926:	70fb      	strb	r3, [r7, #3]

  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801792e:	78fa      	ldrb	r2, [r7, #3]
 8017930:	4611      	mov	r1, r2
 8017932:	4618      	mov	r0, r3
 8017934:	f7fb face 	bl	8012ed4 <USBD_LL_IsoOUTIncomplete>

}
 8017938:	bf00      	nop
 801793a:	3708      	adds	r7, #8
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}

08017940 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	460b      	mov	r3, r1
 801794a:	70fb      	strb	r3, [r7, #3]

  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017952:	78fa      	ldrb	r2, [r7, #3]
 8017954:	4611      	mov	r1, r2
 8017956:	4618      	mov	r0, r3
 8017958:	f7fb fa96 	bl	8012e88 <USBD_LL_IsoINIncomplete>

}
 801795c:	bf00      	nop
 801795e:	3708      	adds	r7, #8
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}

08017964 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b082      	sub	sp, #8
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]

  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017972:	4618      	mov	r0, r3
 8017974:	f7fb fad4 	bl	8012f20 <USBD_LL_DevConnected>

}
 8017978:	bf00      	nop
 801797a:	3708      	adds	r7, #8
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}

08017980 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]

  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801798e:	4618      	mov	r0, r3
 8017990:	f7fb fad1 	bl	8012f36 <USBD_LL_DevDisconnected>

}
 8017994:	bf00      	nop
 8017996:	3708      	adds	r7, #8
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b084      	sub	sp, #16
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179a4:	2300      	movs	r3, #0
 80179a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179a8:	2300      	movs	r3, #0
 80179aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7f0 f8ac 	bl	8007b10 <HAL_PCD_Start>
 80179b8:	4603      	mov	r3, r0
 80179ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80179bc:	7bfb      	ldrb	r3, [r7, #15]
 80179be:	4618      	mov	r0, r3
 80179c0:	f000 f942 	bl	8017c48 <USBD_Get_USB_Status>
 80179c4:	4603      	mov	r3, r0
 80179c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80179c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3710      	adds	r7, #16
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}

080179d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80179d2:	b580      	push	{r7, lr}
 80179d4:	b084      	sub	sp, #16
 80179d6:	af00      	add	r7, sp, #0
 80179d8:	6078      	str	r0, [r7, #4]
 80179da:	4608      	mov	r0, r1
 80179dc:	4611      	mov	r1, r2
 80179de:	461a      	mov	r2, r3
 80179e0:	4603      	mov	r3, r0
 80179e2:	70fb      	strb	r3, [r7, #3]
 80179e4:	460b      	mov	r3, r1
 80179e6:	70bb      	strb	r3, [r7, #2]
 80179e8:	4613      	mov	r3, r2
 80179ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179ec:	2300      	movs	r3, #0
 80179ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179f0:	2300      	movs	r3, #0
 80179f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80179fa:	78bb      	ldrb	r3, [r7, #2]
 80179fc:	883a      	ldrh	r2, [r7, #0]
 80179fe:	78f9      	ldrb	r1, [r7, #3]
 8017a00:	f7f0 fda6 	bl	8008550 <HAL_PCD_EP_Open>
 8017a04:	4603      	mov	r3, r0
 8017a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a08:	7bfb      	ldrb	r3, [r7, #15]
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f000 f91c 	bl	8017c48 <USBD_Get_USB_Status>
 8017a10:	4603      	mov	r3, r0
 8017a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3710      	adds	r7, #16
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}

08017a1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a1e:	b580      	push	{r7, lr}
 8017a20:	b084      	sub	sp, #16
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	6078      	str	r0, [r7, #4]
 8017a26:	460b      	mov	r3, r1
 8017a28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017a38:	78fa      	ldrb	r2, [r7, #3]
 8017a3a:	4611      	mov	r1, r2
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7f0 fdef 	bl	8008620 <HAL_PCD_EP_Close>
 8017a42:	4603      	mov	r3, r0
 8017a44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a46:	7bfb      	ldrb	r3, [r7, #15]
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f000 f8fd 	bl	8017c48 <USBD_Get_USB_Status>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a54:	4618      	mov	r0, r3
 8017a56:	3710      	adds	r7, #16
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}

08017a5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b084      	sub	sp, #16
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	460b      	mov	r3, r1
 8017a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017a76:	78fa      	ldrb	r2, [r7, #3]
 8017a78:	4611      	mov	r1, r2
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f7f0 fea9 	bl	80087d2 <HAL_PCD_EP_SetStall>
 8017a80:	4603      	mov	r3, r0
 8017a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a84:	7bfb      	ldrb	r3, [r7, #15]
 8017a86:	4618      	mov	r0, r3
 8017a88:	f000 f8de 	bl	8017c48 <USBD_Get_USB_Status>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a92:	4618      	mov	r0, r3
 8017a94:	3710      	adds	r7, #16
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd80      	pop	{r7, pc}

08017a9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a9a:	b580      	push	{r7, lr}
 8017a9c:	b084      	sub	sp, #16
 8017a9e:	af00      	add	r7, sp, #0
 8017aa0:	6078      	str	r0, [r7, #4]
 8017aa2:	460b      	mov	r3, r1
 8017aa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017ab4:	78fa      	ldrb	r2, [r7, #3]
 8017ab6:	4611      	mov	r1, r2
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f7f0 feee 	bl	800889a <HAL_PCD_EP_ClrStall>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ac2:	7bfb      	ldrb	r3, [r7, #15]
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f000 f8bf 	bl	8017c48 <USBD_Get_USB_Status>
 8017aca:	4603      	mov	r3, r0
 8017acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	3710      	adds	r7, #16
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}

08017ad8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ad8:	b480      	push	{r7}
 8017ada:	b085      	sub	sp, #20
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	460b      	mov	r3, r1
 8017ae2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017aea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	da0b      	bge.n	8017b0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017af4:	78fb      	ldrb	r3, [r7, #3]
 8017af6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017afa:	68f9      	ldr	r1, [r7, #12]
 8017afc:	4613      	mov	r3, r2
 8017afe:	00db      	lsls	r3, r3, #3
 8017b00:	4413      	add	r3, r2
 8017b02:	009b      	lsls	r3, r3, #2
 8017b04:	440b      	add	r3, r1
 8017b06:	333e      	adds	r3, #62	@ 0x3e
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	e00b      	b.n	8017b24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017b0c:	78fb      	ldrb	r3, [r7, #3]
 8017b0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017b12:	68f9      	ldr	r1, [r7, #12]
 8017b14:	4613      	mov	r3, r2
 8017b16:	00db      	lsls	r3, r3, #3
 8017b18:	4413      	add	r3, r2
 8017b1a:	009b      	lsls	r3, r3, #2
 8017b1c:	440b      	add	r3, r1
 8017b1e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8017b22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017b24:	4618      	mov	r0, r3
 8017b26:	3714      	adds	r7, #20
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2e:	4770      	bx	lr

08017b30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	460b      	mov	r3, r1
 8017b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b40:	2300      	movs	r3, #0
 8017b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017b4a:	78fa      	ldrb	r2, [r7, #3]
 8017b4c:	4611      	mov	r1, r2
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f7f0 fcd9 	bl	8008506 <HAL_PCD_SetAddress>
 8017b54:	4603      	mov	r3, r0
 8017b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b58:	7bfb      	ldrb	r3, [r7, #15]
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	f000 f874 	bl	8017c48 <USBD_Get_USB_Status>
 8017b60:	4603      	mov	r3, r0
 8017b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b66:	4618      	mov	r0, r3
 8017b68:	3710      	adds	r7, #16
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	bd80      	pop	{r7, pc}

08017b6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017b6e:	b580      	push	{r7, lr}
 8017b70:	b086      	sub	sp, #24
 8017b72:	af00      	add	r7, sp, #0
 8017b74:	60f8      	str	r0, [r7, #12]
 8017b76:	607a      	str	r2, [r7, #4]
 8017b78:	603b      	str	r3, [r7, #0]
 8017b7a:	460b      	mov	r3, r1
 8017b7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b82:	2300      	movs	r3, #0
 8017b84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8017b8c:	7af9      	ldrb	r1, [r7, #11]
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	f7f0 fde3 	bl	800875c <HAL_PCD_EP_Transmit>
 8017b96:	4603      	mov	r3, r0
 8017b98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b9a:	7dfb      	ldrb	r3, [r7, #23]
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f000 f853 	bl	8017c48 <USBD_Get_USB_Status>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017ba6:	7dbb      	ldrb	r3, [r7, #22]
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3718      	adds	r7, #24
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}

08017bb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b086      	sub	sp, #24
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	607a      	str	r2, [r7, #4]
 8017bba:	603b      	str	r3, [r7, #0]
 8017bbc:	460b      	mov	r3, r1
 8017bbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8017bce:	7af9      	ldrb	r1, [r7, #11]
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	687a      	ldr	r2, [r7, #4]
 8017bd4:	f7f0 fd6e 	bl	80086b4 <HAL_PCD_EP_Receive>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bdc:	7dfb      	ldrb	r3, [r7, #23]
 8017bde:	4618      	mov	r0, r3
 8017be0:	f000 f832 	bl	8017c48 <USBD_Get_USB_Status>
 8017be4:	4603      	mov	r3, r0
 8017be6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017be8:	7dbb      	ldrb	r3, [r7, #22]
}
 8017bea:	4618      	mov	r0, r3
 8017bec:	3718      	adds	r7, #24
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b082      	sub	sp, #8
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
 8017bfa:	460b      	mov	r3, r1
 8017bfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017c04:	78fa      	ldrb	r2, [r7, #3]
 8017c06:	4611      	mov	r1, r2
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7f0 fd8f 	bl	800872c <HAL_PCD_EP_GetRxCount>
 8017c0e:	4603      	mov	r3, r0
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	3708      	adds	r7, #8
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017c18:	b480      	push	{r7}
 8017c1a:	b083      	sub	sp, #12
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017c20:	4b03      	ldr	r3, [pc, #12]	@ (8017c30 <USBD_static_malloc+0x18>)
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	370c      	adds	r7, #12
 8017c26:	46bd      	mov	sp, r7
 8017c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2c:	4770      	bx	lr
 8017c2e:	bf00      	nop
 8017c30:	2002c92c 	.word	0x2002c92c

08017c34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017c34:	b480      	push	{r7}
 8017c36:	b083      	sub	sp, #12
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]

}
 8017c3c:	bf00      	nop
 8017c3e:	370c      	adds	r7, #12
 8017c40:	46bd      	mov	sp, r7
 8017c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c46:	4770      	bx	lr

08017c48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017c48:	b480      	push	{r7}
 8017c4a:	b085      	sub	sp, #20
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	4603      	mov	r3, r0
 8017c50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c52:	2300      	movs	r3, #0
 8017c54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017c56:	79fb      	ldrb	r3, [r7, #7]
 8017c58:	2b03      	cmp	r3, #3
 8017c5a:	d817      	bhi.n	8017c8c <USBD_Get_USB_Status+0x44>
 8017c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8017c64 <USBD_Get_USB_Status+0x1c>)
 8017c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c62:	bf00      	nop
 8017c64:	08017c75 	.word	0x08017c75
 8017c68:	08017c7b 	.word	0x08017c7b
 8017c6c:	08017c81 	.word	0x08017c81
 8017c70:	08017c87 	.word	0x08017c87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017c74:	2300      	movs	r3, #0
 8017c76:	73fb      	strb	r3, [r7, #15]
    break;
 8017c78:	e00b      	b.n	8017c92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017c7a:	2303      	movs	r3, #3
 8017c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8017c7e:	e008      	b.n	8017c92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017c80:	2301      	movs	r3, #1
 8017c82:	73fb      	strb	r3, [r7, #15]
    break;
 8017c84:	e005      	b.n	8017c92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017c86:	2303      	movs	r3, #3
 8017c88:	73fb      	strb	r3, [r7, #15]
    break;
 8017c8a:	e002      	b.n	8017c92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017c8c:	2303      	movs	r3, #3
 8017c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8017c90:	bf00      	nop
  }
  return usb_status;
 8017c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c94:	4618      	mov	r0, r3
 8017c96:	3714      	adds	r7, #20
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9e:	4770      	bx	lr

08017ca0 <memset>:
 8017ca0:	4402      	add	r2, r0
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	4293      	cmp	r3, r2
 8017ca6:	d100      	bne.n	8017caa <memset+0xa>
 8017ca8:	4770      	bx	lr
 8017caa:	f803 1b01 	strb.w	r1, [r3], #1
 8017cae:	e7f9      	b.n	8017ca4 <memset+0x4>

08017cb0 <__libc_init_array>:
 8017cb0:	b570      	push	{r4, r5, r6, lr}
 8017cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8017ce8 <__libc_init_array+0x38>)
 8017cb4:	2600      	movs	r6, #0
 8017cb6:	4c0d      	ldr	r4, [pc, #52]	@ (8017cec <__libc_init_array+0x3c>)
 8017cb8:	1b64      	subs	r4, r4, r5
 8017cba:	10a4      	asrs	r4, r4, #2
 8017cbc:	42a6      	cmp	r6, r4
 8017cbe:	d109      	bne.n	8017cd4 <__libc_init_array+0x24>
 8017cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8017cf0 <__libc_init_array+0x40>)
 8017cc2:	2600      	movs	r6, #0
 8017cc4:	4c0b      	ldr	r4, [pc, #44]	@ (8017cf4 <__libc_init_array+0x44>)
 8017cc6:	f000 f825 	bl	8017d14 <_init>
 8017cca:	1b64      	subs	r4, r4, r5
 8017ccc:	10a4      	asrs	r4, r4, #2
 8017cce:	42a6      	cmp	r6, r4
 8017cd0:	d105      	bne.n	8017cde <__libc_init_array+0x2e>
 8017cd2:	bd70      	pop	{r4, r5, r6, pc}
 8017cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cd8:	3601      	adds	r6, #1
 8017cda:	4798      	blx	r3
 8017cdc:	e7ee      	b.n	8017cbc <__libc_init_array+0xc>
 8017cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ce2:	3601      	adds	r6, #1
 8017ce4:	4798      	blx	r3
 8017ce6:	e7f2      	b.n	8017cce <__libc_init_array+0x1e>
 8017ce8:	0801815c 	.word	0x0801815c
 8017cec:	0801815c 	.word	0x0801815c
 8017cf0:	0801815c 	.word	0x0801815c
 8017cf4:	08018160 	.word	0x08018160

08017cf8 <memcpy>:
 8017cf8:	440a      	add	r2, r1
 8017cfa:	1e43      	subs	r3, r0, #1
 8017cfc:	4291      	cmp	r1, r2
 8017cfe:	d100      	bne.n	8017d02 <memcpy+0xa>
 8017d00:	4770      	bx	lr
 8017d02:	b510      	push	{r4, lr}
 8017d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d08:	4291      	cmp	r1, r2
 8017d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d0e:	d1f9      	bne.n	8017d04 <memcpy+0xc>
 8017d10:	bd10      	pop	{r4, pc}
	...

08017d14 <_init>:
 8017d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d16:	bf00      	nop
 8017d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d1a:	bc08      	pop	{r3}
 8017d1c:	469e      	mov	lr, r3
 8017d1e:	4770      	bx	lr

08017d20 <_fini>:
 8017d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d22:	bf00      	nop
 8017d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d26:	bc08      	pop	{r3}
 8017d28:	469e      	mov	lr, r3
 8017d2a:	4770      	bx	lr
